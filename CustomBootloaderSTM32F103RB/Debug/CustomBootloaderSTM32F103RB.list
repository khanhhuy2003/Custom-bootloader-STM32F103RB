
CustomBootloaderSTM32F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002558  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08002664  08002664  00012664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027ec  080027ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080027ec  080027ec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027ec  080027ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027ec  080027ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027f0  080027f0  000127f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080027f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000070  08002864  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08002864  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b6e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b4  00000000  00000000  00028c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0002a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  0002aa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bbd  00000000  00000000  0002b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000804e  00000000  00000000  00041ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082005  00000000  00000000  00049cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cbcf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e4c  00000000  00000000  000cbd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800264c 	.word	0x0800264c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800264c 	.word	0x0800264c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <send_uart_message>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_uart_message(char *message) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f7ff fff1 	bl	800014c <strlen>
 800016a:	4603      	mov	r3, r0
 800016c:	b29a      	uxth	r2, r3
 800016e:	f04f 33ff 	mov.w	r3, #4294967295
 8000172:	6879      	ldr	r1, [r7, #4]
 8000174:	4803      	ldr	r0, [pc, #12]	; (8000184 <send_uart_message+0x28>)
 8000176:	f001 fb91 	bl	800189c <HAL_UART_Transmit>
}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	20000130 	.word	0x20000130

08000188 <printmsg>:
void printmsg(const char *msg) {
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000190:	6878      	ldr	r0, [r7, #4]
 8000192:	f7ff ffdb 	bl	800014c <strlen>
 8000196:	4603      	mov	r3, r0
 8000198:	b29a      	uxth	r2, r3
 800019a:	f04f 33ff 	mov.w	r3, #4294967295
 800019e:	6879      	ldr	r1, [r7, #4]
 80001a0:	4803      	ldr	r0, [pc, #12]	; (80001b0 <printmsg+0x28>)
 80001a2:	f001 fb7b 	bl	800189c <HAL_UART_Transmit>
}
 80001a6:	bf00      	nop
 80001a8:	3708      	adds	r7, #8
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000130 	.word	0x20000130

080001b4 <bootloader_uart_read_data>:

void bootloader_uart_read_data(){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
      // Allocates at runtime
//    if (!bl_rx_buffer) {
//        send_uart_message("Memory allocation failed!\r\n");
//        return;
//    }
	uint8_t rcv_len = 0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	71fb      	strb	r3, [r7, #7]
	while(1){
		memset(bl_rx_buffer, 0, 200);
 80001be:	22c8      	movs	r2, #200	; 0xc8
 80001c0:	2100      	movs	r1, #0
 80001c2:	480f      	ldr	r0, [pc, #60]	; (8000200 <bootloader_uart_read_data+0x4c>)
 80001c4:	f001 fe00 	bl	8001dc8 <memset>
		HAL_UART_Receive(&huart2, bl_rx_buffer, 1, HAL_MAX_DELAY);
 80001c8:	f04f 33ff 	mov.w	r3, #4294967295
 80001cc:	2201      	movs	r2, #1
 80001ce:	490c      	ldr	r1, [pc, #48]	; (8000200 <bootloader_uart_read_data+0x4c>)
 80001d0:	480c      	ldr	r0, [pc, #48]	; (8000204 <bootloader_uart_read_data+0x50>)
 80001d2:	f001 fbee 	bl	80019b2 <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0]; // extract the first byte as the length of message
 80001d6:	4b0a      	ldr	r3, [pc, #40]	; (8000200 <bootloader_uart_read_data+0x4c>)
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(&huart2, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY); // then read the remaining of the command
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	b29a      	uxth	r2, r3
 80001e0:	f04f 33ff 	mov.w	r3, #4294967295
 80001e4:	4908      	ldr	r1, [pc, #32]	; (8000208 <bootloader_uart_read_data+0x54>)
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <bootloader_uart_read_data+0x50>)
 80001e8:	f001 fbe3 	bl	80019b2 <HAL_UART_Receive>
		switch(bl_rx_buffer[1]){ //the second byte here is the command code,
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <bootloader_uart_read_data+0x4c>)
 80001ee:	785b      	ldrb	r3, [r3, #1]
 80001f0:	2b51      	cmp	r3, #81	; 0x51
 80001f2:	d1e4      	bne.n	80001be <bootloader_uart_read_data+0xa>
		case BL_GET_VER:
			bootloader_handle_getver_cmd(bl_rx_buffer);
 80001f4:	4802      	ldr	r0, [pc, #8]	; (8000200 <bootloader_uart_read_data+0x4c>)
 80001f6:	f000 f947 	bl	8000488 <bootloader_handle_getver_cmd>
			break;
 80001fa:	bf00      	nop
		memset(bl_rx_buffer, 0, 200);
 80001fc:	e7df      	b.n	80001be <bootloader_uart_read_data+0xa>
 80001fe:	bf00      	nop
 8000200:	20000178 	.word	0x20000178
 8000204:	20000130 	.word	0x20000130
 8000208:	20000179 	.word	0x20000179

0800020c <bootloader_jump_to_user_app>:
		}

	}

}
void bootloader_jump_to_user_app(void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000212:	b672      	cpsid	i
}
 8000214:	bf00      	nop
    __disable_irq();  // Disable all interrupts

    uint32_t user_app_stack_pointer = *((volatile uint32_t*) USER_APP_ADDRESS);
 8000216:	4b15      	ldr	r3, [pc, #84]	; (800026c <bootloader_jump_to_user_app+0x60>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	60fb      	str	r3, [r7, #12]
    uint32_t user_app_reset_address = *((volatile uint32_t*) (USER_APP_ADDRESS + 4));
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <bootloader_jump_to_user_app+0x64>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	60bb      	str	r3, [r7, #8]

    if (user_app_reset_address == 0xFFFFFFFF || user_app_stack_pointer == 0xFFFFFFFF) {
 8000222:	68bb      	ldr	r3, [r7, #8]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d003      	beq.n	8000232 <bootloader_jump_to_user_app+0x26>
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000230:	d103      	bne.n	800023a <bootloader_jump_to_user_app+0x2e>
        send_uart_message("No valid application found. Staying in bootloader...\r\n");
 8000232:	4810      	ldr	r0, [pc, #64]	; (8000274 <bootloader_jump_to_user_app+0x68>)
 8000234:	f7ff ff92 	bl	800015c <send_uart_message>
        return;
 8000238:	e015      	b.n	8000266 <bootloader_jump_to_user_app+0x5a>
    }

    send_uart_message("Jumping to User Application...\r\n");
 800023a:	480f      	ldr	r0, [pc, #60]	; (8000278 <bootloader_jump_to_user_app+0x6c>)
 800023c:	f7ff ff8e 	bl	800015c <send_uart_message>
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	f383 8808 	msr	MSP, r3
}
 800024a:	bf00      	nop

    __set_MSP(user_app_stack_pointer);  // Set Main Stack Pointer

    SCB->VTOR = USER_APP_ADDRESS;  // Set Vector Table Offset for User App
 800024c:	4b0b      	ldr	r3, [pc, #44]	; (800027c <bootloader_jump_to_user_app+0x70>)
 800024e:	4a07      	ldr	r2, [pc, #28]	; (800026c <bootloader_jump_to_user_app+0x60>)
 8000250:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000252:	f3bf 8f4f 	dsb	sy
}
 8000256:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000258:	f3bf 8f6f 	isb	sy
}
 800025c:	bf00      	nop

    __DSB();  // Ensure all memory operations complete
    __ISB();  // Flush instruction pipeline

    void (*user_app_reset_handler)(void) = (void (*)(void)) user_app_reset_address;
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	607b      	str	r3, [r7, #4]
    user_app_reset_handler();  // Jump to user application
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4798      	blx	r3
}
 8000266:	3710      	adds	r7, #16
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	08004000 	.word	0x08004000
 8000270:	08004004 	.word	0x08004004
 8000274:	08002664 	.word	0x08002664
 8000278:	0800269c 	.word	0x0800269c
 800027c:	e000ed00 	.word	0xe000ed00

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fb6c 	bl	8000960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f820 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f898 	bl	80003c0 <MX_GPIO_Init>
  //MX_USART1_UART_Init();
  MX_USART2_UART_Init();
 8000290:	f000 f86c 	bl	800036c <MX_USART2_UART_Init>
  //MX_USART3_UART_Init();
  MX_CRC_Init();
 8000294:	f000 f856 	bl	8000344 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
  /* USER CODE END 2 */
  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
 8000298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800029c:	4808      	ldr	r0, [pc, #32]	; (80002c0 <main+0x40>)
 800029e:	f000 fe6f 	bl	8000f80 <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d105      	bne.n	80002b4 <main+0x34>
	  printmsg("Enter bootloader mode\n");
 80002a8:	4806      	ldr	r0, [pc, #24]	; (80002c4 <main+0x44>)
 80002aa:	f7ff ff6d 	bl	8000188 <printmsg>
	  bootloader_uart_read_data();
 80002ae:	f7ff ff81 	bl	80001b4 <bootloader_uart_read_data>
 80002b2:	e004      	b.n	80002be <main+0x3e>
  }else{
	  printmsg("Jump to user application\n");
 80002b4:	4804      	ldr	r0, [pc, #16]	; (80002c8 <main+0x48>)
 80002b6:	f7ff ff67 	bl	8000188 <printmsg>
	  bootloader_jump_to_user_app();
 80002ba:	f7ff ffa7 	bl	800020c <bootloader_jump_to_user_app>

  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002be:	e7fe      	b.n	80002be <main+0x3e>
 80002c0:	40011000 	.word	0x40011000
 80002c4:	080026c0 	.word	0x080026c0
 80002c8:	080026d8 	.word	0x080026d8

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b090      	sub	sp, #64	; 0x40
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fd74 	bl	8001dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ee:	2302      	movs	r3, #2
 80002f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	2310      	movs	r3, #16
 80002f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fa:	2300      	movs	r3, #0
 80002fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fe6c 	bl	8000fe0 <HAL_RCC_OscConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800030e:	f000 f987 	bl	8000620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	230f      	movs	r3, #15
 8000314:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f001 f8d8 	bl	80014e0 <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000336:	f000 f973 	bl	8000620 <Error_Handler>
  }
}
 800033a:	bf00      	nop
 800033c:	3740      	adds	r7, #64	; 0x40
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_CRC_Init+0x20>)
 800034a:	4a07      	ldr	r2, [pc, #28]	; (8000368 <MX_CRC_Init+0x24>)
 800034c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_CRC_Init+0x20>)
 8000350:	f000 fc4b 	bl	8000bea <HAL_CRC_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800035a:	f000 f961 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	200000e0 	.word	0x200000e0
 8000368:	40023000 	.word	0x40023000

0800036c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000372:	4a12      	ldr	r2, [pc, #72]	; (80003bc <MX_USART2_UART_Init+0x50>)
 8000374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800037c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000392:	220c      	movs	r2, #12
 8000394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_USART2_UART_Init+0x4c>)
 80003a4:	f001 fa2a 	bl	80017fc <HAL_UART_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003ae:	f000 f937 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000130 	.word	0x20000130
 80003bc:	40004400 	.word	0x40004400

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d4:	4b29      	ldr	r3, [pc, #164]	; (800047c <MX_GPIO_Init+0xbc>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a28      	ldr	r2, [pc, #160]	; (800047c <MX_GPIO_Init+0xbc>)
 80003da:	f043 0310 	orr.w	r3, r3, #16
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b26      	ldr	r3, [pc, #152]	; (800047c <MX_GPIO_Init+0xbc>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0310 	and.w	r3, r3, #16
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ec:	4b23      	ldr	r3, [pc, #140]	; (800047c <MX_GPIO_Init+0xbc>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a22      	ldr	r2, [pc, #136]	; (800047c <MX_GPIO_Init+0xbc>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b20      	ldr	r3, [pc, #128]	; (800047c <MX_GPIO_Init+0xbc>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000404:	4b1d      	ldr	r3, [pc, #116]	; (800047c <MX_GPIO_Init+0xbc>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a1c      	ldr	r2, [pc, #112]	; (800047c <MX_GPIO_Init+0xbc>)
 800040a:	f043 0308 	orr.w	r3, r3, #8
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b1a      	ldr	r3, [pc, #104]	; (800047c <MX_GPIO_Init+0xbc>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0308 	and.w	r3, r3, #8
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2120      	movs	r1, #32
 8000420:	4817      	ldr	r0, [pc, #92]	; (8000480 <MX_GPIO_Init+0xc0>)
 8000422:	f000 fdc4 	bl	8000fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000426:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000430:	2301      	movs	r3, #1
 8000432:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	4619      	mov	r1, r3
 800043a:	4812      	ldr	r0, [pc, #72]	; (8000484 <MX_GPIO_Init+0xc4>)
 800043c:	f000 fc1c 	bl	8000c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000440:	2301      	movs	r3, #1
 8000442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000448:	2301      	movs	r3, #1
 800044a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	4619      	mov	r1, r3
 8000452:	480b      	ldr	r0, [pc, #44]	; (8000480 <MX_GPIO_Init+0xc0>)
 8000454:	f000 fc10 	bl	8000c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000458:	2320      	movs	r3, #32
 800045a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2302      	movs	r3, #2
 8000466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	4804      	ldr	r0, [pc, #16]	; (8000480 <MX_GPIO_Init+0xc0>)
 8000470:	f000 fc02 	bl	8000c78 <HAL_GPIO_Init>

}
 8000474:	bf00      	nop
 8000476:	3720      	adds	r7, #32
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000
 8000480:	40010800 	.word	0x40010800
 8000484:	40011000 	.word	0x40011000

08000488 <bootloader_handle_getver_cmd>:
/* USER CODE BEGIN 4 */
void  bootloader_uart_read_data(void);
void bootloader_jump_to_user_app(void);

void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b092      	sub	sp, #72	; 0x48
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
    uint8_t bl_version;

    printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\n");
 8000490:	4821      	ldr	r0, [pc, #132]	; (8000518 <bootloader_handle_getver_cmd+0x90>)
 8000492:	f7ff fe79 	bl	8000188 <printmsg>

    uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	3301      	adds	r3, #1
 800049c:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len - 4));
 800049e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004a0:	3b04      	subs	r3, #4
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	4413      	add	r3, r2
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	643b      	str	r3, [r7, #64]	; 0x40

    if (!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 80004aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004ac:	3b04      	subs	r3, #4
 80004ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80004b0:	4619      	mov	r1, r3
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f000 f864 	bl	8000580 <bootloader_verify_crc>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d123      	bne.n	8000506 <bootloader_handle_getver_cmd+0x7e>
    {
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 80004be:	4817      	ldr	r0, [pc, #92]	; (800051c <bootloader_handle_getver_cmd+0x94>)
 80004c0:	f7ff fe62 	bl	8000188 <printmsg>

        // Send ACK first
        bootloader_send_ack(bl_rx_buffer[0], 1);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2101      	movs	r1, #1
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 f82c 	bl	8000528 <bootloader_send_ack>

        // Retrieve bootloader version
        bl_version = get_bootloader_version();
 80004d0:	f000 f88a 	bl	80005e8 <get_bootloader_version>
 80004d4:	4603      	mov	r3, r0
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        // DEBUG: Print version before sending
        char debug_msg[50];
        sprintf(debug_msg, "BL_DEBUG_MSG: Sending Version: 0x%X\n", bl_version);
 80004dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80004e0:	461a      	mov	r2, r3
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	490e      	ldr	r1, [pc, #56]	; (8000520 <bootloader_handle_getver_cmd+0x98>)
 80004e8:	4618      	mov	r0, r3
 80004ea:	f001 fc75 	bl	8001dd8 <siprintf>
        printmsg(debug_msg);
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fe48 	bl	8000188 <printmsg>

        // Send the version
        bootloader_uart_write_data(&bl_version, 1);
 80004f8:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 80004fc:	2101      	movs	r1, #1
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 f87a 	bl	80005f8 <bootloader_uart_write_data>
    else
    {
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
    }
}
 8000504:	e004      	b.n	8000510 <bootloader_handle_getver_cmd+0x88>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <bootloader_handle_getver_cmd+0x9c>)
 8000508:	f7ff fe3e 	bl	8000188 <printmsg>
        bootloader_send_nack();
 800050c:	f000 f826 	bl	800055c <bootloader_send_nack>
}
 8000510:	bf00      	nop
 8000512:	3748      	adds	r7, #72	; 0x48
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	080026f4 	.word	0x080026f4
 800051c:	08002720 	.word	0x08002720
 8000520:	08002744 	.word	0x08002744
 8000524:	0800276c 	.word	0x0800276c

08000528 <bootloader_send_ack>:
void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer);
void bootloader_handle_read_otp(uint8_t *pBuffer);
void bootloader_handle_dis_rw_protect(uint8_t *pBuffer);

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	460a      	mov	r2, r1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
	 //here we send 2 byte.. first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8000538:	23a5      	movs	r3, #165	; 0xa5
 800053a:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 800053c:	79bb      	ldrb	r3, [r7, #6]
 800053e:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart2,ack_buf,2,HAL_MAX_DELAY);
 8000540:	f107 010c 	add.w	r1, r7, #12
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
 8000548:	2202      	movs	r2, #2
 800054a:	4803      	ldr	r0, [pc, #12]	; (8000558 <bootloader_send_ack+0x30>)
 800054c:	f001 f9a6 	bl	800189c <HAL_UART_Transmit>

}
 8000550:	bf00      	nop
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000130 	.word	0x20000130

0800055c <bootloader_send_nack>:
void bootloader_send_nack(void){
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000562:	237f      	movs	r3, #127	; 0x7f
 8000564:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2,&nack,1,HAL_MAX_DELAY);
 8000566:	1df9      	adds	r1, r7, #7
 8000568:	f04f 33ff 	mov.w	r3, #4294967295
 800056c:	2201      	movs	r2, #1
 800056e:	4803      	ldr	r0, [pc, #12]	; (800057c <bootloader_send_nack+0x20>)
 8000570:	f001 f994 	bl	800189c <HAL_UART_Transmit>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000130 	.word	0x20000130

08000580 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
    uint32_t uwCRCValue=0xff;
 800058c:	23ff      	movs	r3, #255	; 0xff
 800058e:	61fb      	str	r3, [r7, #28]

    for (uint32_t i=0 ; i < len ; i++)
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
 8000594:	e00f      	b.n	80005b6 <bootloader_verify_crc+0x36>
	{
        uint32_t i_data = pData[i];
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	4413      	add	r3, r2
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	617b      	str	r3, [r7, #20]
        uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	2201      	movs	r2, #1
 80005a6:	4619      	mov	r1, r3
 80005a8:	480e      	ldr	r0, [pc, #56]	; (80005e4 <bootloader_verify_crc+0x64>)
 80005aa:	f000 fb3a 	bl	8000c22 <HAL_CRC_Accumulate>
 80005ae:	61f8      	str	r0, [r7, #28]
    for (uint32_t i=0 ; i < len ; i++)
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	3301      	adds	r3, #1
 80005b4:	61bb      	str	r3, [r7, #24]
 80005b6:	69ba      	ldr	r2, [r7, #24]
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d3eb      	bcc.n	8000596 <bootloader_verify_crc+0x16>
	}

	 /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(&hcrc);
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <bootloader_verify_crc+0x64>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	689a      	ldr	r2, [r3, #8]
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <bootloader_verify_crc+0x64>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f042 0201 	orr.w	r2, r2, #1
 80005cc:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 80005ce:	69fa      	ldr	r2, [r7, #28]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d101      	bne.n	80005da <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 80005d6:	2300      	movs	r3, #0
 80005d8:	e000      	b.n	80005dc <bootloader_verify_crc+0x5c>
	}

	return VERIFY_CRC_FAIL;
 80005da:	2301      	movs	r3, #1
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200000e0 	.word	0x200000e0

080005e8 <get_bootloader_version>:
uint32_t get_bootloader_version(void){
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	return (uint32_t)BL_VERSION;
 80005ec:	2310      	movs	r3, #16
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
	...

080005f8 <bootloader_uart_write_data>:
/* This function writes data in to C_UART */
void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
    //Function used to send data from bootloader to Host
	HAL_UART_Transmit(&huart2 ,pBuffer,len,HAL_MAX_DELAY);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	b29a      	uxth	r2, r3
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <bootloader_uart_write_data+0x24>)
 800060e:	f001 f945 	bl	800189c <HAL_UART_Transmit>

}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000130 	.word	0x20000130

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	e7fe      	b.n	8000628 <Error_Handler+0x8>
	...

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <HAL_MspInit+0x5c>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <HAL_MspInit+0x5c>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6193      	str	r3, [r2, #24]
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_MspInit+0x5c>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <HAL_MspInit+0x5c>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <HAL_MspInit+0x5c>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <HAL_MspInit+0x5c>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <HAL_MspInit+0x60>)
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <HAL_MspInit+0x60>)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	40021000 	.word	0x40021000
 800068c:	40010000 	.word	0x40010000

08000690 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <HAL_CRC_MspInit+0x34>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d10b      	bne.n	80006ba <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_CRC_MspInit+0x38>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <HAL_CRC_MspInit+0x38>)
 80006a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_CRC_MspInit+0x38>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	40023000 	.word	0x40023000
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08c      	sub	sp, #48	; 0x30
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a53      	ldr	r2, [pc, #332]	; (8000834 <HAL_UART_MspInit+0x168>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d132      	bne.n	8000752 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006ec:	4b52      	ldr	r3, [pc, #328]	; (8000838 <HAL_UART_MspInit+0x16c>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a51      	ldr	r2, [pc, #324]	; (8000838 <HAL_UART_MspInit+0x16c>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b4f      	ldr	r3, [pc, #316]	; (8000838 <HAL_UART_MspInit+0x16c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000700:	61fb      	str	r3, [r7, #28]
 8000702:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b4c      	ldr	r3, [pc, #304]	; (8000838 <HAL_UART_MspInit+0x16c>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a4b      	ldr	r2, [pc, #300]	; (8000838 <HAL_UART_MspInit+0x16c>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b49      	ldr	r3, [pc, #292]	; (8000838 <HAL_UART_MspInit+0x16c>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	61bb      	str	r3, [r7, #24]
 800071a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800071c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000726:	2303      	movs	r3, #3
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	4619      	mov	r1, r3
 8000730:	4842      	ldr	r0, [pc, #264]	; (800083c <HAL_UART_MspInit+0x170>)
 8000732:	f000 faa1 	bl	8000c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4619      	mov	r1, r3
 800074a:	483c      	ldr	r0, [pc, #240]	; (800083c <HAL_UART_MspInit+0x170>)
 800074c:	f000 fa94 	bl	8000c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000750:	e06c      	b.n	800082c <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a3a      	ldr	r2, [pc, #232]	; (8000840 <HAL_UART_MspInit+0x174>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d130      	bne.n	80007be <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <HAL_UART_MspInit+0x16c>)
 800075e:	69db      	ldr	r3, [r3, #28]
 8000760:	4a35      	ldr	r2, [pc, #212]	; (8000838 <HAL_UART_MspInit+0x16c>)
 8000762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000766:	61d3      	str	r3, [r2, #28]
 8000768:	4b33      	ldr	r3, [pc, #204]	; (8000838 <HAL_UART_MspInit+0x16c>)
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b30      	ldr	r3, [pc, #192]	; (8000838 <HAL_UART_MspInit+0x16c>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a2f      	ldr	r2, [pc, #188]	; (8000838 <HAL_UART_MspInit+0x16c>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <HAL_UART_MspInit+0x16c>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0304 	and.w	r3, r3, #4
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800078c:	2304      	movs	r3, #4
 800078e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	4619      	mov	r1, r3
 800079e:	4827      	ldr	r0, [pc, #156]	; (800083c <HAL_UART_MspInit+0x170>)
 80007a0:	f000 fa6a 	bl	8000c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007a4:	2308      	movs	r3, #8
 80007a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	4619      	mov	r1, r3
 80007b6:	4821      	ldr	r0, [pc, #132]	; (800083c <HAL_UART_MspInit+0x170>)
 80007b8:	f000 fa5e 	bl	8000c78 <HAL_GPIO_Init>
}
 80007bc:	e036      	b.n	800082c <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a20      	ldr	r2, [pc, #128]	; (8000844 <HAL_UART_MspInit+0x178>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d131      	bne.n	800082c <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <HAL_UART_MspInit+0x16c>)
 80007ca:	69db      	ldr	r3, [r3, #28]
 80007cc:	4a1a      	ldr	r2, [pc, #104]	; (8000838 <HAL_UART_MspInit+0x16c>)
 80007ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d2:	61d3      	str	r3, [r2, #28]
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <HAL_UART_MspInit+0x16c>)
 80007d6:	69db      	ldr	r3, [r3, #28]
 80007d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <HAL_UART_MspInit+0x16c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a14      	ldr	r2, [pc, #80]	; (8000838 <HAL_UART_MspInit+0x16c>)
 80007e6:	f043 0308 	orr.w	r3, r3, #8
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_UART_MspInit+0x16c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0308 	and.w	r3, r3, #8
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	4619      	mov	r1, r3
 800080c:	480e      	ldr	r0, [pc, #56]	; (8000848 <HAL_UART_MspInit+0x17c>)
 800080e:	f000 fa33 	bl	8000c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000812:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0320 	add.w	r3, r7, #32
 8000824:	4619      	mov	r1, r3
 8000826:	4808      	ldr	r0, [pc, #32]	; (8000848 <HAL_UART_MspInit+0x17c>)
 8000828:	f000 fa26 	bl	8000c78 <HAL_GPIO_Init>
}
 800082c:	bf00      	nop
 800082e:	3730      	adds	r7, #48	; 0x30
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40013800 	.word	0x40013800
 8000838:	40021000 	.word	0x40021000
 800083c:	40010800 	.word	0x40010800
 8000840:	40004400 	.word	0x40004400
 8000844:	40004800 	.word	0x40004800
 8000848:	40010c00 	.word	0x40010c00

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000892:	f000 f8ab 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <_sbrk+0x5c>)
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <_sbrk+0x60>)
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <_sbrk+0x64>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <_sbrk+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d207      	bcs.n	80008dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008cc:	f001 fa52 	bl	8001d74 <__errno>
 80008d0:	4603      	mov	r3, r0
 80008d2:	220c      	movs	r2, #12
 80008d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	e009      	b.n	80008f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <_sbrk+0x64>)
 80008ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20005000 	.word	0x20005000
 80008fc:	00000400 	.word	0x00000400
 8000900:	2000008c 	.word	0x2000008c
 8000904:	20000258 	.word	0x20000258

08000908 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000914:	f7ff fff8 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800091a:	490c      	ldr	r1, [pc, #48]	; (800094c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800091c:	4a0c      	ldr	r2, [pc, #48]	; (8000950 <LoopFillZerobss+0x16>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a09      	ldr	r2, [pc, #36]	; (8000954 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000930:	4c09      	ldr	r4, [pc, #36]	; (8000958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800093e:	f001 fa1f 	bl	8001d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000942:	f7ff fc9d 	bl	8000280 <main>
  bx lr
 8000946:	4770      	bx	lr
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000950:	080027f4 	.word	0x080027f4
  ldr r2, =_sbss
 8000954:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000958:	20000254 	.word	0x20000254

0800095c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_2_IRQHandler>
	...

08000960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_Init+0x28>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <HAL_Init+0x28>)
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 f907 	bl	8000b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000976:	200f      	movs	r0, #15
 8000978:	f000 f808 	bl	800098c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097c:	f7ff fe56 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40022000 	.word	0x40022000

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_InitTick+0x54>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_InitTick+0x58>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f911 	bl	8000bd2 <HAL_SYSTICK_Config>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00e      	b.n	80009d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d80a      	bhi.n	80009d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f000 f8e7 	bl	8000b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009cc:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <HAL_InitTick+0x5c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e000      	b.n	80009d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000004 	.word	0x20000004

080009ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_IncTick+0x1c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_IncTick+0x20>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a03      	ldr	r2, [pc, #12]	; (8000a0c <HAL_IncTick+0x20>)
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000240 	.word	0x20000240

08000a10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b02      	ldr	r3, [pc, #8]	; (8000a20 <HAL_GetTick+0x10>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000240 	.word	0x20000240

08000a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a40:	4013      	ands	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	60d3      	str	r3, [r2, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <__NVIC_GetPriorityGrouping+0x18>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	f003 0307 	and.w	r3, r3, #7
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	db0a      	blt.n	8000ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	490c      	ldr	r1, [pc, #48]	; (8000ad4 <__NVIC_SetPriority+0x4c>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	440b      	add	r3, r1
 8000aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab0:	e00a      	b.n	8000ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <__NVIC_SetPriority+0x50>)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	3b04      	subs	r3, #4
 8000ac0:	0112      	lsls	r2, r2, #4
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	761a      	strb	r2, [r3, #24]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f1c3 0307 	rsb	r3, r3, #7
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	bf28      	it	cs
 8000afa:	2304      	movcs	r3, #4
 8000afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3304      	adds	r3, #4
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	d902      	bls.n	8000b0c <NVIC_EncodePriority+0x30>
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3b03      	subs	r3, #3
 8000b0a:	e000      	b.n	8000b0e <NVIC_EncodePriority+0x32>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	401a      	ands	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	43d9      	mvns	r1, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	4313      	orrs	r3, r2
         );
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3724      	adds	r7, #36	; 0x24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b50:	d301      	bcc.n	8000b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00f      	b.n	8000b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <SysTick_Config+0x40>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5e:	210f      	movs	r1, #15
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f7ff ff90 	bl	8000a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SysTick_Config+0x40>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SysTick_Config+0x40>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	e000e010 	.word	0xe000e010

08000b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff49 	bl	8000a24 <__NVIC_SetPriorityGrouping>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bac:	f7ff ff5e 	bl	8000a6c <__NVIC_GetPriorityGrouping>
 8000bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	6978      	ldr	r0, [r7, #20]
 8000bb8:	f7ff ff90 	bl	8000adc <NVIC_EncodePriority>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff5f 	bl	8000a88 <__NVIC_SetPriority>
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ffb0 	bl	8000b40 <SysTick_Config>
 8000be0:	4603      	mov	r3, r0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d101      	bne.n	8000bfc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e00e      	b.n	8000c1a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	795b      	ldrb	r3, [r3, #5]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d105      	bne.n	8000c12 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fd3f 	bl	8000690 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2201      	movs	r2, #1
 8000c16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b087      	sub	sp, #28
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2202      	movs	r2, #2
 8000c36:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	e00a      	b.n	8000c54 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	441a      	add	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6812      	ldr	r2, [r2, #0]
 8000c4c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d3f0      	bcc.n	8000c3e <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2201      	movs	r2, #1
 8000c68:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000c6a:	693b      	ldr	r3, [r7, #16]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	371c      	adds	r7, #28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
	...

08000c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b08b      	sub	sp, #44	; 0x2c
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8a:	e169      	b.n	8000f60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	69fa      	ldr	r2, [r7, #28]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	f040 8158 	bne.w	8000f5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	4a9a      	ldr	r2, [pc, #616]	; (8000f18 <HAL_GPIO_Init+0x2a0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d05e      	beq.n	8000d72 <HAL_GPIO_Init+0xfa>
 8000cb4:	4a98      	ldr	r2, [pc, #608]	; (8000f18 <HAL_GPIO_Init+0x2a0>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d875      	bhi.n	8000da6 <HAL_GPIO_Init+0x12e>
 8000cba:	4a98      	ldr	r2, [pc, #608]	; (8000f1c <HAL_GPIO_Init+0x2a4>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d058      	beq.n	8000d72 <HAL_GPIO_Init+0xfa>
 8000cc0:	4a96      	ldr	r2, [pc, #600]	; (8000f1c <HAL_GPIO_Init+0x2a4>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d86f      	bhi.n	8000da6 <HAL_GPIO_Init+0x12e>
 8000cc6:	4a96      	ldr	r2, [pc, #600]	; (8000f20 <HAL_GPIO_Init+0x2a8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d052      	beq.n	8000d72 <HAL_GPIO_Init+0xfa>
 8000ccc:	4a94      	ldr	r2, [pc, #592]	; (8000f20 <HAL_GPIO_Init+0x2a8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d869      	bhi.n	8000da6 <HAL_GPIO_Init+0x12e>
 8000cd2:	4a94      	ldr	r2, [pc, #592]	; (8000f24 <HAL_GPIO_Init+0x2ac>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d04c      	beq.n	8000d72 <HAL_GPIO_Init+0xfa>
 8000cd8:	4a92      	ldr	r2, [pc, #584]	; (8000f24 <HAL_GPIO_Init+0x2ac>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d863      	bhi.n	8000da6 <HAL_GPIO_Init+0x12e>
 8000cde:	4a92      	ldr	r2, [pc, #584]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d046      	beq.n	8000d72 <HAL_GPIO_Init+0xfa>
 8000ce4:	4a90      	ldr	r2, [pc, #576]	; (8000f28 <HAL_GPIO_Init+0x2b0>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d85d      	bhi.n	8000da6 <HAL_GPIO_Init+0x12e>
 8000cea:	2b12      	cmp	r3, #18
 8000cec:	d82a      	bhi.n	8000d44 <HAL_GPIO_Init+0xcc>
 8000cee:	2b12      	cmp	r3, #18
 8000cf0:	d859      	bhi.n	8000da6 <HAL_GPIO_Init+0x12e>
 8000cf2:	a201      	add	r2, pc, #4	; (adr r2, 8000cf8 <HAL_GPIO_Init+0x80>)
 8000cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf8:	08000d73 	.word	0x08000d73
 8000cfc:	08000d4d 	.word	0x08000d4d
 8000d00:	08000d5f 	.word	0x08000d5f
 8000d04:	08000da1 	.word	0x08000da1
 8000d08:	08000da7 	.word	0x08000da7
 8000d0c:	08000da7 	.word	0x08000da7
 8000d10:	08000da7 	.word	0x08000da7
 8000d14:	08000da7 	.word	0x08000da7
 8000d18:	08000da7 	.word	0x08000da7
 8000d1c:	08000da7 	.word	0x08000da7
 8000d20:	08000da7 	.word	0x08000da7
 8000d24:	08000da7 	.word	0x08000da7
 8000d28:	08000da7 	.word	0x08000da7
 8000d2c:	08000da7 	.word	0x08000da7
 8000d30:	08000da7 	.word	0x08000da7
 8000d34:	08000da7 	.word	0x08000da7
 8000d38:	08000da7 	.word	0x08000da7
 8000d3c:	08000d55 	.word	0x08000d55
 8000d40:	08000d69 	.word	0x08000d69
 8000d44:	4a79      	ldr	r2, [pc, #484]	; (8000f2c <HAL_GPIO_Init+0x2b4>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d013      	beq.n	8000d72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d4a:	e02c      	b.n	8000da6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	623b      	str	r3, [r7, #32]
          break;
 8000d52:	e029      	b.n	8000da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	623b      	str	r3, [r7, #32]
          break;
 8000d5c:	e024      	b.n	8000da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	3308      	adds	r3, #8
 8000d64:	623b      	str	r3, [r7, #32]
          break;
 8000d66:	e01f      	b.n	8000da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	330c      	adds	r3, #12
 8000d6e:	623b      	str	r3, [r7, #32]
          break;
 8000d70:	e01a      	b.n	8000da8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d102      	bne.n	8000d80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	623b      	str	r3, [r7, #32]
          break;
 8000d7e:	e013      	b.n	8000da8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d105      	bne.n	8000d94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d88:	2308      	movs	r3, #8
 8000d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69fa      	ldr	r2, [r7, #28]
 8000d90:	611a      	str	r2, [r3, #16]
          break;
 8000d92:	e009      	b.n	8000da8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d94:	2308      	movs	r3, #8
 8000d96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69fa      	ldr	r2, [r7, #28]
 8000d9c:	615a      	str	r2, [r3, #20]
          break;
 8000d9e:	e003      	b.n	8000da8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
          break;
 8000da4:	e000      	b.n	8000da8 <HAL_GPIO_Init+0x130>
          break;
 8000da6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	2bff      	cmp	r3, #255	; 0xff
 8000dac:	d801      	bhi.n	8000db2 <HAL_GPIO_Init+0x13a>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	e001      	b.n	8000db6 <HAL_GPIO_Init+0x13e>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3304      	adds	r3, #4
 8000db6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	2bff      	cmp	r3, #255	; 0xff
 8000dbc:	d802      	bhi.n	8000dc4 <HAL_GPIO_Init+0x14c>
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	e002      	b.n	8000dca <HAL_GPIO_Init+0x152>
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc6:	3b08      	subs	r3, #8
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	210f      	movs	r1, #15
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	401a      	ands	r2, r3
 8000ddc:	6a39      	ldr	r1, [r7, #32]
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	fa01 f303 	lsl.w	r3, r1, r3
 8000de4:	431a      	orrs	r2, r3
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000df8:	4b4d      	ldr	r3, [pc, #308]	; (8000f30 <HAL_GPIO_Init+0x2b8>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a4c      	ldr	r2, [pc, #304]	; (8000f30 <HAL_GPIO_Init+0x2b8>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b4a      	ldr	r3, [pc, #296]	; (8000f30 <HAL_GPIO_Init+0x2b8>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e10:	4a48      	ldr	r2, [pc, #288]	; (8000f34 <HAL_GPIO_Init+0x2bc>)
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	089b      	lsrs	r3, r3, #2
 8000e16:	3302      	adds	r3, #2
 8000e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	220f      	movs	r2, #15
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a40      	ldr	r2, [pc, #256]	; (8000f38 <HAL_GPIO_Init+0x2c0>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d013      	beq.n	8000e64 <HAL_GPIO_Init+0x1ec>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a3f      	ldr	r2, [pc, #252]	; (8000f3c <HAL_GPIO_Init+0x2c4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d00d      	beq.n	8000e60 <HAL_GPIO_Init+0x1e8>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a3e      	ldr	r2, [pc, #248]	; (8000f40 <HAL_GPIO_Init+0x2c8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d007      	beq.n	8000e5c <HAL_GPIO_Init+0x1e4>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a3d      	ldr	r2, [pc, #244]	; (8000f44 <HAL_GPIO_Init+0x2cc>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d101      	bne.n	8000e58 <HAL_GPIO_Init+0x1e0>
 8000e54:	2303      	movs	r3, #3
 8000e56:	e006      	b.n	8000e66 <HAL_GPIO_Init+0x1ee>
 8000e58:	2304      	movs	r3, #4
 8000e5a:	e004      	b.n	8000e66 <HAL_GPIO_Init+0x1ee>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	e002      	b.n	8000e66 <HAL_GPIO_Init+0x1ee>
 8000e60:	2301      	movs	r3, #1
 8000e62:	e000      	b.n	8000e66 <HAL_GPIO_Init+0x1ee>
 8000e64:	2300      	movs	r3, #0
 8000e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e68:	f002 0203 	and.w	r2, r2, #3
 8000e6c:	0092      	lsls	r2, r2, #2
 8000e6e:	4093      	lsls	r3, r2
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e76:	492f      	ldr	r1, [pc, #188]	; (8000f34 <HAL_GPIO_Init+0x2bc>)
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	089b      	lsrs	r3, r3, #2
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d006      	beq.n	8000e9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e90:	4b2d      	ldr	r3, [pc, #180]	; (8000f48 <HAL_GPIO_Init+0x2d0>)
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	492c      	ldr	r1, [pc, #176]	; (8000f48 <HAL_GPIO_Init+0x2d0>)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	608b      	str	r3, [r1, #8]
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e9e:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <HAL_GPIO_Init+0x2d0>)
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	4928      	ldr	r1, [pc, #160]	; (8000f48 <HAL_GPIO_Init+0x2d0>)
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d006      	beq.n	8000ec6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000eb8:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <HAL_GPIO_Init+0x2d0>)
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	4922      	ldr	r1, [pc, #136]	; (8000f48 <HAL_GPIO_Init+0x2d0>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	60cb      	str	r3, [r1, #12]
 8000ec4:	e006      	b.n	8000ed4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ec6:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <HAL_GPIO_Init+0x2d0>)
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	491e      	ldr	r1, [pc, #120]	; (8000f48 <HAL_GPIO_Init+0x2d0>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d006      	beq.n	8000eee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_GPIO_Init+0x2d0>)
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	4918      	ldr	r1, [pc, #96]	; (8000f48 <HAL_GPIO_Init+0x2d0>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	604b      	str	r3, [r1, #4]
 8000eec:	e006      	b.n	8000efc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <HAL_GPIO_Init+0x2d0>)
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	4914      	ldr	r1, [pc, #80]	; (8000f48 <HAL_GPIO_Init+0x2d0>)
 8000ef8:	4013      	ands	r3, r2
 8000efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d021      	beq.n	8000f4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <HAL_GPIO_Init+0x2d0>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	490e      	ldr	r1, [pc, #56]	; (8000f48 <HAL_GPIO_Init+0x2d0>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	600b      	str	r3, [r1, #0]
 8000f14:	e021      	b.n	8000f5a <HAL_GPIO_Init+0x2e2>
 8000f16:	bf00      	nop
 8000f18:	10320000 	.word	0x10320000
 8000f1c:	10310000 	.word	0x10310000
 8000f20:	10220000 	.word	0x10220000
 8000f24:	10210000 	.word	0x10210000
 8000f28:	10120000 	.word	0x10120000
 8000f2c:	10110000 	.word	0x10110000
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40010000 	.word	0x40010000
 8000f38:	40010800 	.word	0x40010800
 8000f3c:	40010c00 	.word	0x40010c00
 8000f40:	40011000 	.word	0x40011000
 8000f44:	40011400 	.word	0x40011400
 8000f48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_GPIO_Init+0x304>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	4909      	ldr	r1, [pc, #36]	; (8000f7c <HAL_GPIO_Init+0x304>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f47f ae8e 	bne.w	8000c8c <HAL_GPIO_Init+0x14>
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	372c      	adds	r7, #44	; 0x2c
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	40010400 	.word	0x40010400

08000f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e001      	b.n	8000fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	807b      	strh	r3, [r7, #2]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fbe:	787b      	ldrb	r3, [r7, #1]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc4:	887a      	ldrh	r2, [r7, #2]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fca:	e003      	b.n	8000fd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fcc:	887b      	ldrh	r3, [r7, #2]
 8000fce:	041a      	lsls	r2, r3, #16
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	611a      	str	r2, [r3, #16]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e26c      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 8087 	beq.w	800110e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001000:	4b92      	ldr	r3, [pc, #584]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	2b04      	cmp	r3, #4
 800100a:	d00c      	beq.n	8001026 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800100c:	4b8f      	ldr	r3, [pc, #572]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	2b08      	cmp	r3, #8
 8001016:	d112      	bne.n	800103e <HAL_RCC_OscConfig+0x5e>
 8001018:	4b8c      	ldr	r3, [pc, #560]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001024:	d10b      	bne.n	800103e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001026:	4b89      	ldr	r3, [pc, #548]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d06c      	beq.n	800110c <HAL_RCC_OscConfig+0x12c>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d168      	bne.n	800110c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e246      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001046:	d106      	bne.n	8001056 <HAL_RCC_OscConfig+0x76>
 8001048:	4b80      	ldr	r3, [pc, #512]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a7f      	ldr	r2, [pc, #508]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800104e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	e02e      	b.n	80010b4 <HAL_RCC_OscConfig+0xd4>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0x98>
 800105e:	4b7b      	ldr	r3, [pc, #492]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a7a      	ldr	r2, [pc, #488]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	4b78      	ldr	r3, [pc, #480]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a77      	ldr	r2, [pc, #476]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e01d      	b.n	80010b4 <HAL_RCC_OscConfig+0xd4>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0xbc>
 8001082:	4b72      	ldr	r3, [pc, #456]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a71      	ldr	r2, [pc, #452]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4b6f      	ldr	r3, [pc, #444]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a6e      	ldr	r2, [pc, #440]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e00b      	b.n	80010b4 <HAL_RCC_OscConfig+0xd4>
 800109c:	4b6b      	ldr	r3, [pc, #428]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a6a      	ldr	r2, [pc, #424]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b68      	ldr	r3, [pc, #416]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a67      	ldr	r2, [pc, #412]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d013      	beq.n	80010e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fca8 	bl	8000a10 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fca4 	bl	8000a10 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	; 0x64
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e1fa      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	4b5d      	ldr	r3, [pc, #372]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0xe4>
 80010e2:	e014      	b.n	800110e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fc94 	bl	8000a10 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fc90 	bl	8000a10 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	; 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e1e6      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x10c>
 800110a:	e000      	b.n	800110e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d063      	beq.n	80011e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800111a:	4b4c      	ldr	r3, [pc, #304]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00b      	beq.n	800113e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001126:	4b49      	ldr	r3, [pc, #292]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b08      	cmp	r3, #8
 8001130:	d11c      	bne.n	800116c <HAL_RCC_OscConfig+0x18c>
 8001132:	4b46      	ldr	r3, [pc, #280]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d116      	bne.n	800116c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113e:	4b43      	ldr	r3, [pc, #268]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <HAL_RCC_OscConfig+0x176>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d001      	beq.n	8001156 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e1ba      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4939      	ldr	r1, [pc, #228]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	e03a      	b.n	80011e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d020      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <HAL_RCC_OscConfig+0x270>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff fc49 	bl	8000a10 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001182:	f7ff fc45 	bl	8000a10 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e19b      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a0:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4927      	ldr	r1, [pc, #156]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	600b      	str	r3, [r1, #0]
 80011b4:	e015      	b.n	80011e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <HAL_RCC_OscConfig+0x270>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fc28 	bl	8000a10 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c4:	f7ff fc24 	bl	8000a10 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e17a      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f0      	bne.n	80011c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d03a      	beq.n	8001264 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d019      	beq.n	800122a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_RCC_OscConfig+0x274>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fc:	f7ff fc08 	bl	8000a10 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001204:	f7ff fc04 	bl	8000a10 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e15a      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001222:	2001      	movs	r0, #1
 8001224:	f000 facc 	bl	80017c0 <RCC_Delay>
 8001228:	e01c      	b.n	8001264 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_RCC_OscConfig+0x274>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff fbee 	bl	8000a10 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001236:	e00f      	b.n	8001258 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fbea 	bl	8000a10 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d908      	bls.n	8001258 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e140      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	42420000 	.word	0x42420000
 8001254:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001258:	4b9e      	ldr	r3, [pc, #632]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1e9      	bne.n	8001238 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80a6 	beq.w	80013be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001276:	4b97      	ldr	r3, [pc, #604]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10d      	bne.n	800129e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b94      	ldr	r3, [pc, #592]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4a93      	ldr	r2, [pc, #588]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	61d3      	str	r3, [r2, #28]
 800128e:	4b91      	ldr	r3, [pc, #580]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129a:	2301      	movs	r3, #1
 800129c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129e:	4b8e      	ldr	r3, [pc, #568]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d118      	bne.n	80012dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012aa:	4b8b      	ldr	r3, [pc, #556]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a8a      	ldr	r2, [pc, #552]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fbab 	bl	8000a10 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012be:	f7ff fba7 	bl	8000a10 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b64      	cmp	r3, #100	; 0x64
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e0fd      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d0:	4b81      	ldr	r3, [pc, #516]	; (80014d8 <HAL_RCC_OscConfig+0x4f8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x312>
 80012e4:	4b7b      	ldr	r3, [pc, #492]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4a7a      	ldr	r2, [pc, #488]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6213      	str	r3, [r2, #32]
 80012f0:	e02d      	b.n	800134e <HAL_RCC_OscConfig+0x36e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10c      	bne.n	8001314 <HAL_RCC_OscConfig+0x334>
 80012fa:	4b76      	ldr	r3, [pc, #472]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4a75      	ldr	r2, [pc, #468]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6213      	str	r3, [r2, #32]
 8001306:	4b73      	ldr	r3, [pc, #460]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	4a72      	ldr	r2, [pc, #456]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800130c:	f023 0304 	bic.w	r3, r3, #4
 8001310:	6213      	str	r3, [r2, #32]
 8001312:	e01c      	b.n	800134e <HAL_RCC_OscConfig+0x36e>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b05      	cmp	r3, #5
 800131a:	d10c      	bne.n	8001336 <HAL_RCC_OscConfig+0x356>
 800131c:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4a6c      	ldr	r2, [pc, #432]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6213      	str	r3, [r2, #32]
 8001328:	4b6a      	ldr	r3, [pc, #424]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4a69      	ldr	r2, [pc, #420]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6213      	str	r3, [r2, #32]
 8001334:	e00b      	b.n	800134e <HAL_RCC_OscConfig+0x36e>
 8001336:	4b67      	ldr	r3, [pc, #412]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4a66      	ldr	r2, [pc, #408]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	6213      	str	r3, [r2, #32]
 8001342:	4b64      	ldr	r3, [pc, #400]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4a63      	ldr	r2, [pc, #396]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	f023 0304 	bic.w	r3, r3, #4
 800134c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d015      	beq.n	8001382 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff fb5b 	bl	8000a10 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135c:	e00a      	b.n	8001374 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135e:	f7ff fb57 	bl	8000a10 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f241 3288 	movw	r2, #5000	; 0x1388
 800136c:	4293      	cmp	r3, r2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0ab      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001374:	4b57      	ldr	r3, [pc, #348]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0ee      	beq.n	800135e <HAL_RCC_OscConfig+0x37e>
 8001380:	e014      	b.n	80013ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001382:	f7ff fb45 	bl	8000a10 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001388:	e00a      	b.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138a:	f7ff fb41 	bl	8000a10 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	f241 3288 	movw	r2, #5000	; 0x1388
 8001398:	4293      	cmp	r3, r2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e095      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a0:	4b4c      	ldr	r3, [pc, #304]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1ee      	bne.n	800138a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d105      	bne.n	80013be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b2:	4b48      	ldr	r3, [pc, #288]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a47      	ldr	r2, [pc, #284]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8081 	beq.w	80014ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013c8:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	2b08      	cmp	r3, #8
 80013d2:	d061      	beq.n	8001498 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d146      	bne.n	800146a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013dc:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <HAL_RCC_OscConfig+0x4fc>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e2:	f7ff fb15 	bl	8000a10 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ea:	f7ff fb11 	bl	8000a10 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e067      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fc:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d108      	bne.n	8001424 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001412:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	492d      	ldr	r1, [pc, #180]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a19      	ldr	r1, [r3, #32]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	430b      	orrs	r3, r1
 8001436:	4927      	ldr	r1, [pc, #156]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_RCC_OscConfig+0x4fc>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fae5 	bl	8000a10 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144a:	f7ff fae1 	bl	8000a10 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e037      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x46a>
 8001468:	e02f      	b.n	80014ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_RCC_OscConfig+0x4fc>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff face 	bl	8000a10 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff faca 	bl	8000a10 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e020      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x498>
 8001496:	e018      	b.n	80014ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e013      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_RCC_OscConfig+0x4f4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40007000 	.word	0x40007000
 80014dc:	42420060 	.word	0x42420060

080014e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0d0      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014f4:	4b6a      	ldr	r3, [pc, #424]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d910      	bls.n	8001524 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b67      	ldr	r3, [pc, #412]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 0207 	bic.w	r2, r3, #7
 800150a:	4965      	ldr	r1, [pc, #404]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001512:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0b8      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d020      	beq.n	8001572 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800153c:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001546:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001554:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4a52      	ldr	r2, [pc, #328]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800155e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001560:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	494d      	ldr	r1, [pc, #308]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	4313      	orrs	r3, r2
 8001570:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d040      	beq.n	8001600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d115      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e07f      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e073      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ae:	4b3d      	ldr	r3, [pc, #244]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e06b      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f023 0203 	bic.w	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4936      	ldr	r1, [pc, #216]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d0:	f7ff fa1e 	bl	8000a10 <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d8:	f7ff fa1a 	bl	8000a10 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e053      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 020c 	and.w	r2, r3, #12
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d1eb      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d210      	bcs.n	8001630 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 0207 	bic.w	r2, r3, #7
 8001616:	4922      	ldr	r1, [pc, #136]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e032      	b.n	8001696 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4916      	ldr	r1, [pc, #88]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	4313      	orrs	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d009      	beq.n	800166e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	490e      	ldr	r1, [pc, #56]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800166e:	f000 f821 	bl	80016b4 <HAL_RCC_GetSysClockFreq>
 8001672:	4602      	mov	r2, r0
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	490a      	ldr	r1, [pc, #40]	; (80016a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001680:	5ccb      	ldrb	r3, [r1, r3]
 8001682:	fa22 f303 	lsr.w	r3, r2, r3
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_RCC_ClockConfig+0x1cc>)
 8001688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_RCC_ClockConfig+0x1d0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff f97c 	bl	800098c <HAL_InitTick>

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40022000 	.word	0x40022000
 80016a4:	40021000 	.word	0x40021000
 80016a8:	0800278c 	.word	0x0800278c
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000004 	.word	0x20000004

080016b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <HAL_RCC_GetSysClockFreq+0x94>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d002      	beq.n	80016e4 <HAL_RCC_GetSysClockFreq+0x30>
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d003      	beq.n	80016ea <HAL_RCC_GetSysClockFreq+0x36>
 80016e2:	e027      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_RCC_GetSysClockFreq+0x98>)
 80016e6:	613b      	str	r3, [r7, #16]
      break;
 80016e8:	e027      	b.n	800173a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	0c9b      	lsrs	r3, r3, #18
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d010      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_RCC_GetSysClockFreq+0x94>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	0c5b      	lsrs	r3, r3, #17
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	4a11      	ldr	r2, [pc, #68]	; (8001754 <HAL_RCC_GetSysClockFreq+0xa0>)
 800170e:	5cd3      	ldrb	r3, [r2, r3]
 8001710:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_RCC_GetSysClockFreq+0x98>)
 8001716:	fb02 f203 	mul.w	r2, r2, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	e004      	b.n	800172e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a0c      	ldr	r2, [pc, #48]	; (8001758 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	613b      	str	r3, [r7, #16]
      break;
 8001732:	e002      	b.n	800173a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_RCC_GetSysClockFreq+0x98>)
 8001736:	613b      	str	r3, [r7, #16]
      break;
 8001738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800173a:	693b      	ldr	r3, [r7, #16]
}
 800173c:	4618      	mov	r0, r3
 800173e:	371c      	adds	r7, #28
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	007a1200 	.word	0x007a1200
 8001750:	080027a4 	.word	0x080027a4
 8001754:	080027b4 	.word	0x080027b4
 8001758:	003d0900 	.word	0x003d0900

0800175c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001760:	4b02      	ldr	r3, [pc, #8]	; (800176c <HAL_RCC_GetHCLKFreq+0x10>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	20000000 	.word	0x20000000

08001770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001774:	f7ff fff2 	bl	800175c <HAL_RCC_GetHCLKFreq>
 8001778:	4602      	mov	r2, r0
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	4903      	ldr	r1, [pc, #12]	; (8001794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001786:	5ccb      	ldrb	r3, [r1, r3]
 8001788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800178c:	4618      	mov	r0, r3
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	0800279c 	.word	0x0800279c

08001798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800179c:	f7ff ffde 	bl	800175c <HAL_RCC_GetHCLKFreq>
 80017a0:	4602      	mov	r2, r0
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	0adb      	lsrs	r3, r3, #11
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	4903      	ldr	r1, [pc, #12]	; (80017bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80017ae:	5ccb      	ldrb	r3, [r1, r3]
 80017b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	0800279c 	.word	0x0800279c

080017c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <RCC_Delay+0x34>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <RCC_Delay+0x38>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	0a5b      	lsrs	r3, r3, #9
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017dc:	bf00      	nop
  }
  while (Delay --);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	60fa      	str	r2, [r7, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f9      	bne.n	80017dc <RCC_Delay+0x1c>
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	20000000 	.word	0x20000000
 80017f8:	10624dd3 	.word	0x10624dd3

080017fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e042      	b.n	8001894 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7fe ff52 	bl	80006cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2224      	movs	r2, #36	; 0x24
 800182c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800183e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 fa09 	bl	8001c58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2220      	movs	r2, #32
 8001880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2220      	movs	r2, #32
 8001888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	4613      	mov	r3, r2
 80018aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b20      	cmp	r3, #32
 80018ba:	d175      	bne.n	80019a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_UART_Transmit+0x2c>
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e06e      	b.n	80019aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2221      	movs	r2, #33	; 0x21
 80018d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018da:	f7ff f899 	bl	8000a10 <HAL_GetTick>
 80018de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	88fa      	ldrh	r2, [r7, #6]
 80018e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	88fa      	ldrh	r2, [r7, #6]
 80018ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f4:	d108      	bne.n	8001908 <HAL_UART_Transmit+0x6c>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d104      	bne.n	8001908 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	e003      	b.n	8001910 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001910:	e02e      	b.n	8001970 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2200      	movs	r2, #0
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 f8df 	bl	8001ae0 <UART_WaitOnFlagUntilTimeout>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2220      	movs	r2, #32
 800192c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e03a      	b.n	80019aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10b      	bne.n	8001952 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001948:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	3302      	adds	r3, #2
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	e007      	b.n	8001962 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	781a      	ldrb	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	3301      	adds	r3, #1
 8001960:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001966:	b29b      	uxth	r3, r3
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001974:	b29b      	uxth	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1cb      	bne.n	8001912 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2200      	movs	r2, #0
 8001982:	2140      	movs	r1, #64	; 0x40
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f8ab 	bl	8001ae0 <UART_WaitOnFlagUntilTimeout>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2220      	movs	r2, #32
 8001994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e006      	b.n	80019aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	e000      	b.n	80019aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80019a8:	2302      	movs	r3, #2
  }
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3720      	adds	r7, #32
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b08a      	sub	sp, #40	; 0x28
 80019b6:	af02      	add	r7, sp, #8
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4613      	mov	r3, r2
 80019c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b20      	cmp	r3, #32
 80019d0:	f040 8081 	bne.w	8001ad6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <HAL_UART_Receive+0x2e>
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e079      	b.n	8001ad8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2222      	movs	r2, #34	; 0x22
 80019ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019f8:	f7ff f80a 	bl	8000a10 <HAL_GetTick>
 80019fc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	88fa      	ldrh	r2, [r7, #6]
 8001a02:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	88fa      	ldrh	r2, [r7, #6]
 8001a08:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a12:	d108      	bne.n	8001a26 <HAL_UART_Receive+0x74>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d104      	bne.n	8001a26 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
 8001a24:	e003      	b.n	8001a2e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001a2e:	e047      	b.n	8001ac0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2200      	movs	r2, #0
 8001a38:	2120      	movs	r1, #32
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f850 	bl	8001ae0 <UART_WaitOnFlagUntilTimeout>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e042      	b.n	8001ad8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10c      	bne.n	8001a72 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	e01f      	b.n	8001ab2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a7a:	d007      	beq.n	8001a8c <HAL_UART_Receive+0xda>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10a      	bne.n	8001a9a <HAL_UART_Receive+0xe8>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d106      	bne.n	8001a9a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	701a      	strb	r2, [r3, #0]
 8001a98:	e008      	b.n	8001aac <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1b2      	bne.n	8001a30 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2220      	movs	r2, #32
 8001ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e000      	b.n	8001ad8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001ad6:	2302      	movs	r3, #2
  }
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	4613      	mov	r3, r2
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001af0:	e03b      	b.n	8001b6a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d037      	beq.n	8001b6a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001afa:	f7fe ff89 	bl	8000a10 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	6a3a      	ldr	r2, [r7, #32]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d302      	bcc.n	8001b10 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e03a      	b.n	8001b8a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d023      	beq.n	8001b6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b80      	cmp	r3, #128	; 0x80
 8001b26:	d020      	beq.n	8001b6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b40      	cmp	r3, #64	; 0x40
 8001b2c:	d01d      	beq.n	8001b6a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d116      	bne.n	8001b6a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f81d 	bl	8001b92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00f      	b.n	8001b8a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4013      	ands	r3, r2
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	bf0c      	ite	eq
 8001b7a:	2301      	moveq	r3, #1
 8001b7c:	2300      	movne	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d0b4      	beq.n	8001af2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b095      	sub	sp, #84	; 0x54
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	330c      	adds	r3, #12
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba4:	e853 3f00 	ldrex	r3, [r3]
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	330c      	adds	r3, #12
 8001bb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bba:	643a      	str	r2, [r7, #64]	; 0x40
 8001bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001bc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bc2:	e841 2300 	strex	r3, r2, [r1]
 8001bc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1e5      	bne.n	8001b9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3314      	adds	r3, #20
 8001bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	e853 3f00 	ldrex	r3, [r3]
 8001bdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	3314      	adds	r3, #20
 8001bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf6:	e841 2300 	strex	r3, r2, [r1]
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1e5      	bne.n	8001bce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d119      	bne.n	8001c3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	330c      	adds	r3, #12
 8001c10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	e853 3f00 	ldrex	r3, [r3]
 8001c18:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f023 0310 	bic.w	r3, r3, #16
 8001c20:	647b      	str	r3, [r7, #68]	; 0x44
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	330c      	adds	r3, #12
 8001c28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c2a:	61ba      	str	r2, [r7, #24]
 8001c2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c2e:	6979      	ldr	r1, [r7, #20]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	e841 2300 	strex	r3, r2, [r1]
 8001c36:	613b      	str	r3, [r7, #16]
   return(result);
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1e5      	bne.n	8001c0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2220      	movs	r2, #32
 8001c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001c4c:	bf00      	nop
 8001c4e:	3754      	adds	r7, #84	; 0x54
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
	...

08001c58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c92:	f023 030c 	bic.w	r3, r3, #12
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	68b9      	ldr	r1, [r7, #8]
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a2c      	ldr	r2, [pc, #176]	; (8001d6c <UART_SetConfig+0x114>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d103      	bne.n	8001cc8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cc0:	f7ff fd6a 	bl	8001798 <HAL_RCC_GetPCLK2Freq>
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	e002      	b.n	8001cce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cc8:	f7ff fd52 	bl	8001770 <HAL_RCC_GetPCLK1Freq>
 8001ccc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009a      	lsls	r2, r3, #2
 8001cd8:	441a      	add	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <UART_SetConfig+0x118>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	0119      	lsls	r1, r3, #4
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009a      	lsls	r2, r3, #2
 8001cf8:	441a      	add	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d04:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <UART_SetConfig+0x118>)
 8001d06:	fba3 0302 	umull	r0, r3, r3, r2
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2064      	movs	r0, #100	; 0x64
 8001d0e:	fb00 f303 	mul.w	r3, r0, r3
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	3332      	adds	r3, #50	; 0x32
 8001d18:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <UART_SetConfig+0x118>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d24:	4419      	add	r1, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009a      	lsls	r2, r3, #2
 8001d30:	441a      	add	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <UART_SetConfig+0x118>)
 8001d3e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2064      	movs	r0, #100	; 0x64
 8001d46:	fb00 f303 	mul.w	r3, r0, r3
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	3332      	adds	r3, #50	; 0x32
 8001d50:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <UART_SetConfig+0x118>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	f003 020f 	and.w	r2, r3, #15
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	440a      	add	r2, r1
 8001d62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	51eb851f 	.word	0x51eb851f

08001d74 <__errno>:
 8001d74:	4b01      	ldr	r3, [pc, #4]	; (8001d7c <__errno+0x8>)
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	2000000c 	.word	0x2000000c

08001d80 <__libc_init_array>:
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	2600      	movs	r6, #0
 8001d84:	4d0c      	ldr	r5, [pc, #48]	; (8001db8 <__libc_init_array+0x38>)
 8001d86:	4c0d      	ldr	r4, [pc, #52]	; (8001dbc <__libc_init_array+0x3c>)
 8001d88:	1b64      	subs	r4, r4, r5
 8001d8a:	10a4      	asrs	r4, r4, #2
 8001d8c:	42a6      	cmp	r6, r4
 8001d8e:	d109      	bne.n	8001da4 <__libc_init_array+0x24>
 8001d90:	f000 fc5c 	bl	800264c <_init>
 8001d94:	2600      	movs	r6, #0
 8001d96:	4d0a      	ldr	r5, [pc, #40]	; (8001dc0 <__libc_init_array+0x40>)
 8001d98:	4c0a      	ldr	r4, [pc, #40]	; (8001dc4 <__libc_init_array+0x44>)
 8001d9a:	1b64      	subs	r4, r4, r5
 8001d9c:	10a4      	asrs	r4, r4, #2
 8001d9e:	42a6      	cmp	r6, r4
 8001da0:	d105      	bne.n	8001dae <__libc_init_array+0x2e>
 8001da2:	bd70      	pop	{r4, r5, r6, pc}
 8001da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001da8:	4798      	blx	r3
 8001daa:	3601      	adds	r6, #1
 8001dac:	e7ee      	b.n	8001d8c <__libc_init_array+0xc>
 8001dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8001db2:	4798      	blx	r3
 8001db4:	3601      	adds	r6, #1
 8001db6:	e7f2      	b.n	8001d9e <__libc_init_array+0x1e>
 8001db8:	080027ec 	.word	0x080027ec
 8001dbc:	080027ec 	.word	0x080027ec
 8001dc0:	080027ec 	.word	0x080027ec
 8001dc4:	080027f0 	.word	0x080027f0

08001dc8 <memset>:
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4402      	add	r2, r0
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d100      	bne.n	8001dd2 <memset+0xa>
 8001dd0:	4770      	bx	lr
 8001dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8001dd6:	e7f9      	b.n	8001dcc <memset+0x4>

08001dd8 <siprintf>:
 8001dd8:	b40e      	push	{r1, r2, r3}
 8001dda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001dde:	b500      	push	{lr}
 8001de0:	b09c      	sub	sp, #112	; 0x70
 8001de2:	ab1d      	add	r3, sp, #116	; 0x74
 8001de4:	9002      	str	r0, [sp, #8]
 8001de6:	9006      	str	r0, [sp, #24]
 8001de8:	9107      	str	r1, [sp, #28]
 8001dea:	9104      	str	r1, [sp, #16]
 8001dec:	4808      	ldr	r0, [pc, #32]	; (8001e10 <siprintf+0x38>)
 8001dee:	4909      	ldr	r1, [pc, #36]	; (8001e14 <siprintf+0x3c>)
 8001df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8001df4:	9105      	str	r1, [sp, #20]
 8001df6:	6800      	ldr	r0, [r0, #0]
 8001df8:	a902      	add	r1, sp, #8
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	f000 f868 	bl	8001ed0 <_svfiprintf_r>
 8001e00:	2200      	movs	r2, #0
 8001e02:	9b02      	ldr	r3, [sp, #8]
 8001e04:	701a      	strb	r2, [r3, #0]
 8001e06:	b01c      	add	sp, #112	; 0x70
 8001e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e0c:	b003      	add	sp, #12
 8001e0e:	4770      	bx	lr
 8001e10:	2000000c 	.word	0x2000000c
 8001e14:	ffff0208 	.word	0xffff0208

08001e18 <__ssputs_r>:
 8001e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e1c:	688e      	ldr	r6, [r1, #8]
 8001e1e:	4682      	mov	sl, r0
 8001e20:	429e      	cmp	r6, r3
 8001e22:	460c      	mov	r4, r1
 8001e24:	4690      	mov	r8, r2
 8001e26:	461f      	mov	r7, r3
 8001e28:	d838      	bhi.n	8001e9c <__ssputs_r+0x84>
 8001e2a:	898a      	ldrh	r2, [r1, #12]
 8001e2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e30:	d032      	beq.n	8001e98 <__ssputs_r+0x80>
 8001e32:	6825      	ldr	r5, [r4, #0]
 8001e34:	6909      	ldr	r1, [r1, #16]
 8001e36:	3301      	adds	r3, #1
 8001e38:	eba5 0901 	sub.w	r9, r5, r1
 8001e3c:	6965      	ldr	r5, [r4, #20]
 8001e3e:	444b      	add	r3, r9
 8001e40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e48:	106d      	asrs	r5, r5, #1
 8001e4a:	429d      	cmp	r5, r3
 8001e4c:	bf38      	it	cc
 8001e4e:	461d      	movcc	r5, r3
 8001e50:	0553      	lsls	r3, r2, #21
 8001e52:	d531      	bpl.n	8001eb8 <__ssputs_r+0xa0>
 8001e54:	4629      	mov	r1, r5
 8001e56:	f000 fb53 	bl	8002500 <_malloc_r>
 8001e5a:	4606      	mov	r6, r0
 8001e5c:	b950      	cbnz	r0, 8001e74 <__ssputs_r+0x5c>
 8001e5e:	230c      	movs	r3, #12
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f8ca 3000 	str.w	r3, [sl]
 8001e68:	89a3      	ldrh	r3, [r4, #12]
 8001e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e6e:	81a3      	strh	r3, [r4, #12]
 8001e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e74:	464a      	mov	r2, r9
 8001e76:	6921      	ldr	r1, [r4, #16]
 8001e78:	f000 face 	bl	8002418 <memcpy>
 8001e7c:	89a3      	ldrh	r3, [r4, #12]
 8001e7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e86:	81a3      	strh	r3, [r4, #12]
 8001e88:	6126      	str	r6, [r4, #16]
 8001e8a:	444e      	add	r6, r9
 8001e8c:	6026      	str	r6, [r4, #0]
 8001e8e:	463e      	mov	r6, r7
 8001e90:	6165      	str	r5, [r4, #20]
 8001e92:	eba5 0509 	sub.w	r5, r5, r9
 8001e96:	60a5      	str	r5, [r4, #8]
 8001e98:	42be      	cmp	r6, r7
 8001e9a:	d900      	bls.n	8001e9e <__ssputs_r+0x86>
 8001e9c:	463e      	mov	r6, r7
 8001e9e:	4632      	mov	r2, r6
 8001ea0:	4641      	mov	r1, r8
 8001ea2:	6820      	ldr	r0, [r4, #0]
 8001ea4:	f000 fac6 	bl	8002434 <memmove>
 8001ea8:	68a3      	ldr	r3, [r4, #8]
 8001eaa:	6822      	ldr	r2, [r4, #0]
 8001eac:	1b9b      	subs	r3, r3, r6
 8001eae:	4432      	add	r2, r6
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	60a3      	str	r3, [r4, #8]
 8001eb4:	6022      	str	r2, [r4, #0]
 8001eb6:	e7db      	b.n	8001e70 <__ssputs_r+0x58>
 8001eb8:	462a      	mov	r2, r5
 8001eba:	f000 fb7b 	bl	80025b4 <_realloc_r>
 8001ebe:	4606      	mov	r6, r0
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	d1e1      	bne.n	8001e88 <__ssputs_r+0x70>
 8001ec4:	4650      	mov	r0, sl
 8001ec6:	6921      	ldr	r1, [r4, #16]
 8001ec8:	f000 face 	bl	8002468 <_free_r>
 8001ecc:	e7c7      	b.n	8001e5e <__ssputs_r+0x46>
	...

08001ed0 <_svfiprintf_r>:
 8001ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed4:	4698      	mov	r8, r3
 8001ed6:	898b      	ldrh	r3, [r1, #12]
 8001ed8:	4607      	mov	r7, r0
 8001eda:	061b      	lsls	r3, r3, #24
 8001edc:	460d      	mov	r5, r1
 8001ede:	4614      	mov	r4, r2
 8001ee0:	b09d      	sub	sp, #116	; 0x74
 8001ee2:	d50e      	bpl.n	8001f02 <_svfiprintf_r+0x32>
 8001ee4:	690b      	ldr	r3, [r1, #16]
 8001ee6:	b963      	cbnz	r3, 8001f02 <_svfiprintf_r+0x32>
 8001ee8:	2140      	movs	r1, #64	; 0x40
 8001eea:	f000 fb09 	bl	8002500 <_malloc_r>
 8001eee:	6028      	str	r0, [r5, #0]
 8001ef0:	6128      	str	r0, [r5, #16]
 8001ef2:	b920      	cbnz	r0, 8001efe <_svfiprintf_r+0x2e>
 8001ef4:	230c      	movs	r3, #12
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	e0d1      	b.n	80020a2 <_svfiprintf_r+0x1d2>
 8001efe:	2340      	movs	r3, #64	; 0x40
 8001f00:	616b      	str	r3, [r5, #20]
 8001f02:	2300      	movs	r3, #0
 8001f04:	9309      	str	r3, [sp, #36]	; 0x24
 8001f06:	2320      	movs	r3, #32
 8001f08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f0c:	2330      	movs	r3, #48	; 0x30
 8001f0e:	f04f 0901 	mov.w	r9, #1
 8001f12:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80020bc <_svfiprintf_r+0x1ec>
 8001f1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f1e:	4623      	mov	r3, r4
 8001f20:	469a      	mov	sl, r3
 8001f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f26:	b10a      	cbz	r2, 8001f2c <_svfiprintf_r+0x5c>
 8001f28:	2a25      	cmp	r2, #37	; 0x25
 8001f2a:	d1f9      	bne.n	8001f20 <_svfiprintf_r+0x50>
 8001f2c:	ebba 0b04 	subs.w	fp, sl, r4
 8001f30:	d00b      	beq.n	8001f4a <_svfiprintf_r+0x7a>
 8001f32:	465b      	mov	r3, fp
 8001f34:	4622      	mov	r2, r4
 8001f36:	4629      	mov	r1, r5
 8001f38:	4638      	mov	r0, r7
 8001f3a:	f7ff ff6d 	bl	8001e18 <__ssputs_r>
 8001f3e:	3001      	adds	r0, #1
 8001f40:	f000 80aa 	beq.w	8002098 <_svfiprintf_r+0x1c8>
 8001f44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f46:	445a      	add	r2, fp
 8001f48:	9209      	str	r2, [sp, #36]	; 0x24
 8001f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80a2 	beq.w	8002098 <_svfiprintf_r+0x1c8>
 8001f54:	2300      	movs	r3, #0
 8001f56:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f5e:	f10a 0a01 	add.w	sl, sl, #1
 8001f62:	9304      	str	r3, [sp, #16]
 8001f64:	9307      	str	r3, [sp, #28]
 8001f66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f6a:	931a      	str	r3, [sp, #104]	; 0x68
 8001f6c:	4654      	mov	r4, sl
 8001f6e:	2205      	movs	r2, #5
 8001f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f74:	4851      	ldr	r0, [pc, #324]	; (80020bc <_svfiprintf_r+0x1ec>)
 8001f76:	f000 fa41 	bl	80023fc <memchr>
 8001f7a:	9a04      	ldr	r2, [sp, #16]
 8001f7c:	b9d8      	cbnz	r0, 8001fb6 <_svfiprintf_r+0xe6>
 8001f7e:	06d0      	lsls	r0, r2, #27
 8001f80:	bf44      	itt	mi
 8001f82:	2320      	movmi	r3, #32
 8001f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f88:	0711      	lsls	r1, r2, #28
 8001f8a:	bf44      	itt	mi
 8001f8c:	232b      	movmi	r3, #43	; 0x2b
 8001f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f92:	f89a 3000 	ldrb.w	r3, [sl]
 8001f96:	2b2a      	cmp	r3, #42	; 0x2a
 8001f98:	d015      	beq.n	8001fc6 <_svfiprintf_r+0xf6>
 8001f9a:	4654      	mov	r4, sl
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f04f 0c0a 	mov.w	ip, #10
 8001fa2:	9a07      	ldr	r2, [sp, #28]
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001faa:	3b30      	subs	r3, #48	; 0x30
 8001fac:	2b09      	cmp	r3, #9
 8001fae:	d94e      	bls.n	800204e <_svfiprintf_r+0x17e>
 8001fb0:	b1b0      	cbz	r0, 8001fe0 <_svfiprintf_r+0x110>
 8001fb2:	9207      	str	r2, [sp, #28]
 8001fb4:	e014      	b.n	8001fe0 <_svfiprintf_r+0x110>
 8001fb6:	eba0 0308 	sub.w	r3, r0, r8
 8001fba:	fa09 f303 	lsl.w	r3, r9, r3
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	46a2      	mov	sl, r4
 8001fc2:	9304      	str	r3, [sp, #16]
 8001fc4:	e7d2      	b.n	8001f6c <_svfiprintf_r+0x9c>
 8001fc6:	9b03      	ldr	r3, [sp, #12]
 8001fc8:	1d19      	adds	r1, r3, #4
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	9103      	str	r1, [sp, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bfbb      	ittet	lt
 8001fd2:	425b      	neglt	r3, r3
 8001fd4:	f042 0202 	orrlt.w	r2, r2, #2
 8001fd8:	9307      	strge	r3, [sp, #28]
 8001fda:	9307      	strlt	r3, [sp, #28]
 8001fdc:	bfb8      	it	lt
 8001fde:	9204      	strlt	r2, [sp, #16]
 8001fe0:	7823      	ldrb	r3, [r4, #0]
 8001fe2:	2b2e      	cmp	r3, #46	; 0x2e
 8001fe4:	d10c      	bne.n	8002000 <_svfiprintf_r+0x130>
 8001fe6:	7863      	ldrb	r3, [r4, #1]
 8001fe8:	2b2a      	cmp	r3, #42	; 0x2a
 8001fea:	d135      	bne.n	8002058 <_svfiprintf_r+0x188>
 8001fec:	9b03      	ldr	r3, [sp, #12]
 8001fee:	3402      	adds	r4, #2
 8001ff0:	1d1a      	adds	r2, r3, #4
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	9203      	str	r2, [sp, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bfb8      	it	lt
 8001ffa:	f04f 33ff 	movlt.w	r3, #4294967295
 8001ffe:	9305      	str	r3, [sp, #20]
 8002000:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80020cc <_svfiprintf_r+0x1fc>
 8002004:	2203      	movs	r2, #3
 8002006:	4650      	mov	r0, sl
 8002008:	7821      	ldrb	r1, [r4, #0]
 800200a:	f000 f9f7 	bl	80023fc <memchr>
 800200e:	b140      	cbz	r0, 8002022 <_svfiprintf_r+0x152>
 8002010:	2340      	movs	r3, #64	; 0x40
 8002012:	eba0 000a 	sub.w	r0, r0, sl
 8002016:	fa03 f000 	lsl.w	r0, r3, r0
 800201a:	9b04      	ldr	r3, [sp, #16]
 800201c:	3401      	adds	r4, #1
 800201e:	4303      	orrs	r3, r0
 8002020:	9304      	str	r3, [sp, #16]
 8002022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002026:	2206      	movs	r2, #6
 8002028:	4825      	ldr	r0, [pc, #148]	; (80020c0 <_svfiprintf_r+0x1f0>)
 800202a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800202e:	f000 f9e5 	bl	80023fc <memchr>
 8002032:	2800      	cmp	r0, #0
 8002034:	d038      	beq.n	80020a8 <_svfiprintf_r+0x1d8>
 8002036:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <_svfiprintf_r+0x1f4>)
 8002038:	bb1b      	cbnz	r3, 8002082 <_svfiprintf_r+0x1b2>
 800203a:	9b03      	ldr	r3, [sp, #12]
 800203c:	3307      	adds	r3, #7
 800203e:	f023 0307 	bic.w	r3, r3, #7
 8002042:	3308      	adds	r3, #8
 8002044:	9303      	str	r3, [sp, #12]
 8002046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002048:	4433      	add	r3, r6
 800204a:	9309      	str	r3, [sp, #36]	; 0x24
 800204c:	e767      	b.n	8001f1e <_svfiprintf_r+0x4e>
 800204e:	460c      	mov	r4, r1
 8002050:	2001      	movs	r0, #1
 8002052:	fb0c 3202 	mla	r2, ip, r2, r3
 8002056:	e7a5      	b.n	8001fa4 <_svfiprintf_r+0xd4>
 8002058:	2300      	movs	r3, #0
 800205a:	f04f 0c0a 	mov.w	ip, #10
 800205e:	4619      	mov	r1, r3
 8002060:	3401      	adds	r4, #1
 8002062:	9305      	str	r3, [sp, #20]
 8002064:	4620      	mov	r0, r4
 8002066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800206a:	3a30      	subs	r2, #48	; 0x30
 800206c:	2a09      	cmp	r2, #9
 800206e:	d903      	bls.n	8002078 <_svfiprintf_r+0x1a8>
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0c5      	beq.n	8002000 <_svfiprintf_r+0x130>
 8002074:	9105      	str	r1, [sp, #20]
 8002076:	e7c3      	b.n	8002000 <_svfiprintf_r+0x130>
 8002078:	4604      	mov	r4, r0
 800207a:	2301      	movs	r3, #1
 800207c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002080:	e7f0      	b.n	8002064 <_svfiprintf_r+0x194>
 8002082:	ab03      	add	r3, sp, #12
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	462a      	mov	r2, r5
 8002088:	4638      	mov	r0, r7
 800208a:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <_svfiprintf_r+0x1f8>)
 800208c:	a904      	add	r1, sp, #16
 800208e:	f3af 8000 	nop.w
 8002092:	1c42      	adds	r2, r0, #1
 8002094:	4606      	mov	r6, r0
 8002096:	d1d6      	bne.n	8002046 <_svfiprintf_r+0x176>
 8002098:	89ab      	ldrh	r3, [r5, #12]
 800209a:	065b      	lsls	r3, r3, #25
 800209c:	f53f af2c 	bmi.w	8001ef8 <_svfiprintf_r+0x28>
 80020a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020a2:	b01d      	add	sp, #116	; 0x74
 80020a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020a8:	ab03      	add	r3, sp, #12
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	462a      	mov	r2, r5
 80020ae:	4638      	mov	r0, r7
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <_svfiprintf_r+0x1f8>)
 80020b2:	a904      	add	r1, sp, #16
 80020b4:	f000 f87c 	bl	80021b0 <_printf_i>
 80020b8:	e7eb      	b.n	8002092 <_svfiprintf_r+0x1c2>
 80020ba:	bf00      	nop
 80020bc:	080027b6 	.word	0x080027b6
 80020c0:	080027c0 	.word	0x080027c0
 80020c4:	00000000 	.word	0x00000000
 80020c8:	08001e19 	.word	0x08001e19
 80020cc:	080027bc 	.word	0x080027bc

080020d0 <_printf_common>:
 80020d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020d4:	4616      	mov	r6, r2
 80020d6:	4699      	mov	r9, r3
 80020d8:	688a      	ldr	r2, [r1, #8]
 80020da:	690b      	ldr	r3, [r1, #16]
 80020dc:	4607      	mov	r7, r0
 80020de:	4293      	cmp	r3, r2
 80020e0:	bfb8      	it	lt
 80020e2:	4613      	movlt	r3, r2
 80020e4:	6033      	str	r3, [r6, #0]
 80020e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020ea:	460c      	mov	r4, r1
 80020ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020f0:	b10a      	cbz	r2, 80020f6 <_printf_common+0x26>
 80020f2:	3301      	adds	r3, #1
 80020f4:	6033      	str	r3, [r6, #0]
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	0699      	lsls	r1, r3, #26
 80020fa:	bf42      	ittt	mi
 80020fc:	6833      	ldrmi	r3, [r6, #0]
 80020fe:	3302      	addmi	r3, #2
 8002100:	6033      	strmi	r3, [r6, #0]
 8002102:	6825      	ldr	r5, [r4, #0]
 8002104:	f015 0506 	ands.w	r5, r5, #6
 8002108:	d106      	bne.n	8002118 <_printf_common+0x48>
 800210a:	f104 0a19 	add.w	sl, r4, #25
 800210e:	68e3      	ldr	r3, [r4, #12]
 8002110:	6832      	ldr	r2, [r6, #0]
 8002112:	1a9b      	subs	r3, r3, r2
 8002114:	42ab      	cmp	r3, r5
 8002116:	dc28      	bgt.n	800216a <_printf_common+0x9a>
 8002118:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800211c:	1e13      	subs	r3, r2, #0
 800211e:	6822      	ldr	r2, [r4, #0]
 8002120:	bf18      	it	ne
 8002122:	2301      	movne	r3, #1
 8002124:	0692      	lsls	r2, r2, #26
 8002126:	d42d      	bmi.n	8002184 <_printf_common+0xb4>
 8002128:	4649      	mov	r1, r9
 800212a:	4638      	mov	r0, r7
 800212c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002130:	47c0      	blx	r8
 8002132:	3001      	adds	r0, #1
 8002134:	d020      	beq.n	8002178 <_printf_common+0xa8>
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	68e5      	ldr	r5, [r4, #12]
 800213a:	f003 0306 	and.w	r3, r3, #6
 800213e:	2b04      	cmp	r3, #4
 8002140:	bf18      	it	ne
 8002142:	2500      	movne	r5, #0
 8002144:	6832      	ldr	r2, [r6, #0]
 8002146:	f04f 0600 	mov.w	r6, #0
 800214a:	68a3      	ldr	r3, [r4, #8]
 800214c:	bf08      	it	eq
 800214e:	1aad      	subeq	r5, r5, r2
 8002150:	6922      	ldr	r2, [r4, #16]
 8002152:	bf08      	it	eq
 8002154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002158:	4293      	cmp	r3, r2
 800215a:	bfc4      	itt	gt
 800215c:	1a9b      	subgt	r3, r3, r2
 800215e:	18ed      	addgt	r5, r5, r3
 8002160:	341a      	adds	r4, #26
 8002162:	42b5      	cmp	r5, r6
 8002164:	d11a      	bne.n	800219c <_printf_common+0xcc>
 8002166:	2000      	movs	r0, #0
 8002168:	e008      	b.n	800217c <_printf_common+0xac>
 800216a:	2301      	movs	r3, #1
 800216c:	4652      	mov	r2, sl
 800216e:	4649      	mov	r1, r9
 8002170:	4638      	mov	r0, r7
 8002172:	47c0      	blx	r8
 8002174:	3001      	adds	r0, #1
 8002176:	d103      	bne.n	8002180 <_printf_common+0xb0>
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002180:	3501      	adds	r5, #1
 8002182:	e7c4      	b.n	800210e <_printf_common+0x3e>
 8002184:	2030      	movs	r0, #48	; 0x30
 8002186:	18e1      	adds	r1, r4, r3
 8002188:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002192:	4422      	add	r2, r4
 8002194:	3302      	adds	r3, #2
 8002196:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800219a:	e7c5      	b.n	8002128 <_printf_common+0x58>
 800219c:	2301      	movs	r3, #1
 800219e:	4622      	mov	r2, r4
 80021a0:	4649      	mov	r1, r9
 80021a2:	4638      	mov	r0, r7
 80021a4:	47c0      	blx	r8
 80021a6:	3001      	adds	r0, #1
 80021a8:	d0e6      	beq.n	8002178 <_printf_common+0xa8>
 80021aa:	3601      	adds	r6, #1
 80021ac:	e7d9      	b.n	8002162 <_printf_common+0x92>
	...

080021b0 <_printf_i>:
 80021b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021b4:	460c      	mov	r4, r1
 80021b6:	7e27      	ldrb	r7, [r4, #24]
 80021b8:	4691      	mov	r9, r2
 80021ba:	2f78      	cmp	r7, #120	; 0x78
 80021bc:	4680      	mov	r8, r0
 80021be:	469a      	mov	sl, r3
 80021c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80021c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021c6:	d807      	bhi.n	80021d8 <_printf_i+0x28>
 80021c8:	2f62      	cmp	r7, #98	; 0x62
 80021ca:	d80a      	bhi.n	80021e2 <_printf_i+0x32>
 80021cc:	2f00      	cmp	r7, #0
 80021ce:	f000 80d9 	beq.w	8002384 <_printf_i+0x1d4>
 80021d2:	2f58      	cmp	r7, #88	; 0x58
 80021d4:	f000 80a4 	beq.w	8002320 <_printf_i+0x170>
 80021d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80021dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80021e0:	e03a      	b.n	8002258 <_printf_i+0xa8>
 80021e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80021e6:	2b15      	cmp	r3, #21
 80021e8:	d8f6      	bhi.n	80021d8 <_printf_i+0x28>
 80021ea:	a001      	add	r0, pc, #4	; (adr r0, 80021f0 <_printf_i+0x40>)
 80021ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80021f0:	08002249 	.word	0x08002249
 80021f4:	0800225d 	.word	0x0800225d
 80021f8:	080021d9 	.word	0x080021d9
 80021fc:	080021d9 	.word	0x080021d9
 8002200:	080021d9 	.word	0x080021d9
 8002204:	080021d9 	.word	0x080021d9
 8002208:	0800225d 	.word	0x0800225d
 800220c:	080021d9 	.word	0x080021d9
 8002210:	080021d9 	.word	0x080021d9
 8002214:	080021d9 	.word	0x080021d9
 8002218:	080021d9 	.word	0x080021d9
 800221c:	0800236b 	.word	0x0800236b
 8002220:	0800228d 	.word	0x0800228d
 8002224:	0800234d 	.word	0x0800234d
 8002228:	080021d9 	.word	0x080021d9
 800222c:	080021d9 	.word	0x080021d9
 8002230:	0800238d 	.word	0x0800238d
 8002234:	080021d9 	.word	0x080021d9
 8002238:	0800228d 	.word	0x0800228d
 800223c:	080021d9 	.word	0x080021d9
 8002240:	080021d9 	.word	0x080021d9
 8002244:	08002355 	.word	0x08002355
 8002248:	680b      	ldr	r3, [r1, #0]
 800224a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800224e:	1d1a      	adds	r2, r3, #4
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	600a      	str	r2, [r1, #0]
 8002254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002258:	2301      	movs	r3, #1
 800225a:	e0a4      	b.n	80023a6 <_printf_i+0x1f6>
 800225c:	6825      	ldr	r5, [r4, #0]
 800225e:	6808      	ldr	r0, [r1, #0]
 8002260:	062e      	lsls	r6, r5, #24
 8002262:	f100 0304 	add.w	r3, r0, #4
 8002266:	d50a      	bpl.n	800227e <_printf_i+0xce>
 8002268:	6805      	ldr	r5, [r0, #0]
 800226a:	600b      	str	r3, [r1, #0]
 800226c:	2d00      	cmp	r5, #0
 800226e:	da03      	bge.n	8002278 <_printf_i+0xc8>
 8002270:	232d      	movs	r3, #45	; 0x2d
 8002272:	426d      	negs	r5, r5
 8002274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002278:	230a      	movs	r3, #10
 800227a:	485e      	ldr	r0, [pc, #376]	; (80023f4 <_printf_i+0x244>)
 800227c:	e019      	b.n	80022b2 <_printf_i+0x102>
 800227e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002282:	6805      	ldr	r5, [r0, #0]
 8002284:	600b      	str	r3, [r1, #0]
 8002286:	bf18      	it	ne
 8002288:	b22d      	sxthne	r5, r5
 800228a:	e7ef      	b.n	800226c <_printf_i+0xbc>
 800228c:	680b      	ldr	r3, [r1, #0]
 800228e:	6825      	ldr	r5, [r4, #0]
 8002290:	1d18      	adds	r0, r3, #4
 8002292:	6008      	str	r0, [r1, #0]
 8002294:	0628      	lsls	r0, r5, #24
 8002296:	d501      	bpl.n	800229c <_printf_i+0xec>
 8002298:	681d      	ldr	r5, [r3, #0]
 800229a:	e002      	b.n	80022a2 <_printf_i+0xf2>
 800229c:	0669      	lsls	r1, r5, #25
 800229e:	d5fb      	bpl.n	8002298 <_printf_i+0xe8>
 80022a0:	881d      	ldrh	r5, [r3, #0]
 80022a2:	2f6f      	cmp	r7, #111	; 0x6f
 80022a4:	bf0c      	ite	eq
 80022a6:	2308      	moveq	r3, #8
 80022a8:	230a      	movne	r3, #10
 80022aa:	4852      	ldr	r0, [pc, #328]	; (80023f4 <_printf_i+0x244>)
 80022ac:	2100      	movs	r1, #0
 80022ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022b2:	6866      	ldr	r6, [r4, #4]
 80022b4:	2e00      	cmp	r6, #0
 80022b6:	bfa8      	it	ge
 80022b8:	6821      	ldrge	r1, [r4, #0]
 80022ba:	60a6      	str	r6, [r4, #8]
 80022bc:	bfa4      	itt	ge
 80022be:	f021 0104 	bicge.w	r1, r1, #4
 80022c2:	6021      	strge	r1, [r4, #0]
 80022c4:	b90d      	cbnz	r5, 80022ca <_printf_i+0x11a>
 80022c6:	2e00      	cmp	r6, #0
 80022c8:	d04d      	beq.n	8002366 <_printf_i+0x1b6>
 80022ca:	4616      	mov	r6, r2
 80022cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80022d0:	fb03 5711 	mls	r7, r3, r1, r5
 80022d4:	5dc7      	ldrb	r7, [r0, r7]
 80022d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80022da:	462f      	mov	r7, r5
 80022dc:	42bb      	cmp	r3, r7
 80022de:	460d      	mov	r5, r1
 80022e0:	d9f4      	bls.n	80022cc <_printf_i+0x11c>
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d10b      	bne.n	80022fe <_printf_i+0x14e>
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	07df      	lsls	r7, r3, #31
 80022ea:	d508      	bpl.n	80022fe <_printf_i+0x14e>
 80022ec:	6923      	ldr	r3, [r4, #16]
 80022ee:	6861      	ldr	r1, [r4, #4]
 80022f0:	4299      	cmp	r1, r3
 80022f2:	bfde      	ittt	le
 80022f4:	2330      	movle	r3, #48	; 0x30
 80022f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80022fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80022fe:	1b92      	subs	r2, r2, r6
 8002300:	6122      	str	r2, [r4, #16]
 8002302:	464b      	mov	r3, r9
 8002304:	4621      	mov	r1, r4
 8002306:	4640      	mov	r0, r8
 8002308:	f8cd a000 	str.w	sl, [sp]
 800230c:	aa03      	add	r2, sp, #12
 800230e:	f7ff fedf 	bl	80020d0 <_printf_common>
 8002312:	3001      	adds	r0, #1
 8002314:	d14c      	bne.n	80023b0 <_printf_i+0x200>
 8002316:	f04f 30ff 	mov.w	r0, #4294967295
 800231a:	b004      	add	sp, #16
 800231c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002320:	4834      	ldr	r0, [pc, #208]	; (80023f4 <_printf_i+0x244>)
 8002322:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002326:	680e      	ldr	r6, [r1, #0]
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	f856 5b04 	ldr.w	r5, [r6], #4
 800232e:	061f      	lsls	r7, r3, #24
 8002330:	600e      	str	r6, [r1, #0]
 8002332:	d514      	bpl.n	800235e <_printf_i+0x1ae>
 8002334:	07d9      	lsls	r1, r3, #31
 8002336:	bf44      	itt	mi
 8002338:	f043 0320 	orrmi.w	r3, r3, #32
 800233c:	6023      	strmi	r3, [r4, #0]
 800233e:	b91d      	cbnz	r5, 8002348 <_printf_i+0x198>
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	f023 0320 	bic.w	r3, r3, #32
 8002346:	6023      	str	r3, [r4, #0]
 8002348:	2310      	movs	r3, #16
 800234a:	e7af      	b.n	80022ac <_printf_i+0xfc>
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	f043 0320 	orr.w	r3, r3, #32
 8002352:	6023      	str	r3, [r4, #0]
 8002354:	2378      	movs	r3, #120	; 0x78
 8002356:	4828      	ldr	r0, [pc, #160]	; (80023f8 <_printf_i+0x248>)
 8002358:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800235c:	e7e3      	b.n	8002326 <_printf_i+0x176>
 800235e:	065e      	lsls	r6, r3, #25
 8002360:	bf48      	it	mi
 8002362:	b2ad      	uxthmi	r5, r5
 8002364:	e7e6      	b.n	8002334 <_printf_i+0x184>
 8002366:	4616      	mov	r6, r2
 8002368:	e7bb      	b.n	80022e2 <_printf_i+0x132>
 800236a:	680b      	ldr	r3, [r1, #0]
 800236c:	6826      	ldr	r6, [r4, #0]
 800236e:	1d1d      	adds	r5, r3, #4
 8002370:	6960      	ldr	r0, [r4, #20]
 8002372:	600d      	str	r5, [r1, #0]
 8002374:	0635      	lsls	r5, r6, #24
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	d501      	bpl.n	800237e <_printf_i+0x1ce>
 800237a:	6018      	str	r0, [r3, #0]
 800237c:	e002      	b.n	8002384 <_printf_i+0x1d4>
 800237e:	0671      	lsls	r1, r6, #25
 8002380:	d5fb      	bpl.n	800237a <_printf_i+0x1ca>
 8002382:	8018      	strh	r0, [r3, #0]
 8002384:	2300      	movs	r3, #0
 8002386:	4616      	mov	r6, r2
 8002388:	6123      	str	r3, [r4, #16]
 800238a:	e7ba      	b.n	8002302 <_printf_i+0x152>
 800238c:	680b      	ldr	r3, [r1, #0]
 800238e:	1d1a      	adds	r2, r3, #4
 8002390:	600a      	str	r2, [r1, #0]
 8002392:	681e      	ldr	r6, [r3, #0]
 8002394:	2100      	movs	r1, #0
 8002396:	4630      	mov	r0, r6
 8002398:	6862      	ldr	r2, [r4, #4]
 800239a:	f000 f82f 	bl	80023fc <memchr>
 800239e:	b108      	cbz	r0, 80023a4 <_printf_i+0x1f4>
 80023a0:	1b80      	subs	r0, r0, r6
 80023a2:	6060      	str	r0, [r4, #4]
 80023a4:	6863      	ldr	r3, [r4, #4]
 80023a6:	6123      	str	r3, [r4, #16]
 80023a8:	2300      	movs	r3, #0
 80023aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023ae:	e7a8      	b.n	8002302 <_printf_i+0x152>
 80023b0:	4632      	mov	r2, r6
 80023b2:	4649      	mov	r1, r9
 80023b4:	4640      	mov	r0, r8
 80023b6:	6923      	ldr	r3, [r4, #16]
 80023b8:	47d0      	blx	sl
 80023ba:	3001      	adds	r0, #1
 80023bc:	d0ab      	beq.n	8002316 <_printf_i+0x166>
 80023be:	6823      	ldr	r3, [r4, #0]
 80023c0:	079b      	lsls	r3, r3, #30
 80023c2:	d413      	bmi.n	80023ec <_printf_i+0x23c>
 80023c4:	68e0      	ldr	r0, [r4, #12]
 80023c6:	9b03      	ldr	r3, [sp, #12]
 80023c8:	4298      	cmp	r0, r3
 80023ca:	bfb8      	it	lt
 80023cc:	4618      	movlt	r0, r3
 80023ce:	e7a4      	b.n	800231a <_printf_i+0x16a>
 80023d0:	2301      	movs	r3, #1
 80023d2:	4632      	mov	r2, r6
 80023d4:	4649      	mov	r1, r9
 80023d6:	4640      	mov	r0, r8
 80023d8:	47d0      	blx	sl
 80023da:	3001      	adds	r0, #1
 80023dc:	d09b      	beq.n	8002316 <_printf_i+0x166>
 80023de:	3501      	adds	r5, #1
 80023e0:	68e3      	ldr	r3, [r4, #12]
 80023e2:	9903      	ldr	r1, [sp, #12]
 80023e4:	1a5b      	subs	r3, r3, r1
 80023e6:	42ab      	cmp	r3, r5
 80023e8:	dcf2      	bgt.n	80023d0 <_printf_i+0x220>
 80023ea:	e7eb      	b.n	80023c4 <_printf_i+0x214>
 80023ec:	2500      	movs	r5, #0
 80023ee:	f104 0619 	add.w	r6, r4, #25
 80023f2:	e7f5      	b.n	80023e0 <_printf_i+0x230>
 80023f4:	080027c7 	.word	0x080027c7
 80023f8:	080027d8 	.word	0x080027d8

080023fc <memchr>:
 80023fc:	4603      	mov	r3, r0
 80023fe:	b510      	push	{r4, lr}
 8002400:	b2c9      	uxtb	r1, r1
 8002402:	4402      	add	r2, r0
 8002404:	4293      	cmp	r3, r2
 8002406:	4618      	mov	r0, r3
 8002408:	d101      	bne.n	800240e <memchr+0x12>
 800240a:	2000      	movs	r0, #0
 800240c:	e003      	b.n	8002416 <memchr+0x1a>
 800240e:	7804      	ldrb	r4, [r0, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	428c      	cmp	r4, r1
 8002414:	d1f6      	bne.n	8002404 <memchr+0x8>
 8002416:	bd10      	pop	{r4, pc}

08002418 <memcpy>:
 8002418:	440a      	add	r2, r1
 800241a:	4291      	cmp	r1, r2
 800241c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002420:	d100      	bne.n	8002424 <memcpy+0xc>
 8002422:	4770      	bx	lr
 8002424:	b510      	push	{r4, lr}
 8002426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800242a:	4291      	cmp	r1, r2
 800242c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002430:	d1f9      	bne.n	8002426 <memcpy+0xe>
 8002432:	bd10      	pop	{r4, pc}

08002434 <memmove>:
 8002434:	4288      	cmp	r0, r1
 8002436:	b510      	push	{r4, lr}
 8002438:	eb01 0402 	add.w	r4, r1, r2
 800243c:	d902      	bls.n	8002444 <memmove+0x10>
 800243e:	4284      	cmp	r4, r0
 8002440:	4623      	mov	r3, r4
 8002442:	d807      	bhi.n	8002454 <memmove+0x20>
 8002444:	1e43      	subs	r3, r0, #1
 8002446:	42a1      	cmp	r1, r4
 8002448:	d008      	beq.n	800245c <memmove+0x28>
 800244a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800244e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002452:	e7f8      	b.n	8002446 <memmove+0x12>
 8002454:	4601      	mov	r1, r0
 8002456:	4402      	add	r2, r0
 8002458:	428a      	cmp	r2, r1
 800245a:	d100      	bne.n	800245e <memmove+0x2a>
 800245c:	bd10      	pop	{r4, pc}
 800245e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002466:	e7f7      	b.n	8002458 <memmove+0x24>

08002468 <_free_r>:
 8002468:	b538      	push	{r3, r4, r5, lr}
 800246a:	4605      	mov	r5, r0
 800246c:	2900      	cmp	r1, #0
 800246e:	d043      	beq.n	80024f8 <_free_r+0x90>
 8002470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002474:	1f0c      	subs	r4, r1, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	bfb8      	it	lt
 800247a:	18e4      	addlt	r4, r4, r3
 800247c:	f000 f8d0 	bl	8002620 <__malloc_lock>
 8002480:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <_free_r+0x94>)
 8002482:	6813      	ldr	r3, [r2, #0]
 8002484:	4610      	mov	r0, r2
 8002486:	b933      	cbnz	r3, 8002496 <_free_r+0x2e>
 8002488:	6063      	str	r3, [r4, #4]
 800248a:	6014      	str	r4, [r2, #0]
 800248c:	4628      	mov	r0, r5
 800248e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002492:	f000 b8cb 	b.w	800262c <__malloc_unlock>
 8002496:	42a3      	cmp	r3, r4
 8002498:	d90a      	bls.n	80024b0 <_free_r+0x48>
 800249a:	6821      	ldr	r1, [r4, #0]
 800249c:	1862      	adds	r2, r4, r1
 800249e:	4293      	cmp	r3, r2
 80024a0:	bf01      	itttt	eq
 80024a2:	681a      	ldreq	r2, [r3, #0]
 80024a4:	685b      	ldreq	r3, [r3, #4]
 80024a6:	1852      	addeq	r2, r2, r1
 80024a8:	6022      	streq	r2, [r4, #0]
 80024aa:	6063      	str	r3, [r4, #4]
 80024ac:	6004      	str	r4, [r0, #0]
 80024ae:	e7ed      	b.n	800248c <_free_r+0x24>
 80024b0:	461a      	mov	r2, r3
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	b10b      	cbz	r3, 80024ba <_free_r+0x52>
 80024b6:	42a3      	cmp	r3, r4
 80024b8:	d9fa      	bls.n	80024b0 <_free_r+0x48>
 80024ba:	6811      	ldr	r1, [r2, #0]
 80024bc:	1850      	adds	r0, r2, r1
 80024be:	42a0      	cmp	r0, r4
 80024c0:	d10b      	bne.n	80024da <_free_r+0x72>
 80024c2:	6820      	ldr	r0, [r4, #0]
 80024c4:	4401      	add	r1, r0
 80024c6:	1850      	adds	r0, r2, r1
 80024c8:	4283      	cmp	r3, r0
 80024ca:	6011      	str	r1, [r2, #0]
 80024cc:	d1de      	bne.n	800248c <_free_r+0x24>
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4401      	add	r1, r0
 80024d4:	6011      	str	r1, [r2, #0]
 80024d6:	6053      	str	r3, [r2, #4]
 80024d8:	e7d8      	b.n	800248c <_free_r+0x24>
 80024da:	d902      	bls.n	80024e2 <_free_r+0x7a>
 80024dc:	230c      	movs	r3, #12
 80024de:	602b      	str	r3, [r5, #0]
 80024e0:	e7d4      	b.n	800248c <_free_r+0x24>
 80024e2:	6820      	ldr	r0, [r4, #0]
 80024e4:	1821      	adds	r1, r4, r0
 80024e6:	428b      	cmp	r3, r1
 80024e8:	bf01      	itttt	eq
 80024ea:	6819      	ldreq	r1, [r3, #0]
 80024ec:	685b      	ldreq	r3, [r3, #4]
 80024ee:	1809      	addeq	r1, r1, r0
 80024f0:	6021      	streq	r1, [r4, #0]
 80024f2:	6063      	str	r3, [r4, #4]
 80024f4:	6054      	str	r4, [r2, #4]
 80024f6:	e7c9      	b.n	800248c <_free_r+0x24>
 80024f8:	bd38      	pop	{r3, r4, r5, pc}
 80024fa:	bf00      	nop
 80024fc:	20000090 	.word	0x20000090

08002500 <_malloc_r>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	1ccd      	adds	r5, r1, #3
 8002504:	f025 0503 	bic.w	r5, r5, #3
 8002508:	3508      	adds	r5, #8
 800250a:	2d0c      	cmp	r5, #12
 800250c:	bf38      	it	cc
 800250e:	250c      	movcc	r5, #12
 8002510:	2d00      	cmp	r5, #0
 8002512:	4606      	mov	r6, r0
 8002514:	db01      	blt.n	800251a <_malloc_r+0x1a>
 8002516:	42a9      	cmp	r1, r5
 8002518:	d903      	bls.n	8002522 <_malloc_r+0x22>
 800251a:	230c      	movs	r3, #12
 800251c:	6033      	str	r3, [r6, #0]
 800251e:	2000      	movs	r0, #0
 8002520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002522:	f000 f87d 	bl	8002620 <__malloc_lock>
 8002526:	4921      	ldr	r1, [pc, #132]	; (80025ac <_malloc_r+0xac>)
 8002528:	680a      	ldr	r2, [r1, #0]
 800252a:	4614      	mov	r4, r2
 800252c:	b99c      	cbnz	r4, 8002556 <_malloc_r+0x56>
 800252e:	4f20      	ldr	r7, [pc, #128]	; (80025b0 <_malloc_r+0xb0>)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	b923      	cbnz	r3, 800253e <_malloc_r+0x3e>
 8002534:	4621      	mov	r1, r4
 8002536:	4630      	mov	r0, r6
 8002538:	f000 f862 	bl	8002600 <_sbrk_r>
 800253c:	6038      	str	r0, [r7, #0]
 800253e:	4629      	mov	r1, r5
 8002540:	4630      	mov	r0, r6
 8002542:	f000 f85d 	bl	8002600 <_sbrk_r>
 8002546:	1c43      	adds	r3, r0, #1
 8002548:	d123      	bne.n	8002592 <_malloc_r+0x92>
 800254a:	230c      	movs	r3, #12
 800254c:	4630      	mov	r0, r6
 800254e:	6033      	str	r3, [r6, #0]
 8002550:	f000 f86c 	bl	800262c <__malloc_unlock>
 8002554:	e7e3      	b.n	800251e <_malloc_r+0x1e>
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	1b5b      	subs	r3, r3, r5
 800255a:	d417      	bmi.n	800258c <_malloc_r+0x8c>
 800255c:	2b0b      	cmp	r3, #11
 800255e:	d903      	bls.n	8002568 <_malloc_r+0x68>
 8002560:	6023      	str	r3, [r4, #0]
 8002562:	441c      	add	r4, r3
 8002564:	6025      	str	r5, [r4, #0]
 8002566:	e004      	b.n	8002572 <_malloc_r+0x72>
 8002568:	6863      	ldr	r3, [r4, #4]
 800256a:	42a2      	cmp	r2, r4
 800256c:	bf0c      	ite	eq
 800256e:	600b      	streq	r3, [r1, #0]
 8002570:	6053      	strne	r3, [r2, #4]
 8002572:	4630      	mov	r0, r6
 8002574:	f000 f85a 	bl	800262c <__malloc_unlock>
 8002578:	f104 000b 	add.w	r0, r4, #11
 800257c:	1d23      	adds	r3, r4, #4
 800257e:	f020 0007 	bic.w	r0, r0, #7
 8002582:	1ac2      	subs	r2, r0, r3
 8002584:	d0cc      	beq.n	8002520 <_malloc_r+0x20>
 8002586:	1a1b      	subs	r3, r3, r0
 8002588:	50a3      	str	r3, [r4, r2]
 800258a:	e7c9      	b.n	8002520 <_malloc_r+0x20>
 800258c:	4622      	mov	r2, r4
 800258e:	6864      	ldr	r4, [r4, #4]
 8002590:	e7cc      	b.n	800252c <_malloc_r+0x2c>
 8002592:	1cc4      	adds	r4, r0, #3
 8002594:	f024 0403 	bic.w	r4, r4, #3
 8002598:	42a0      	cmp	r0, r4
 800259a:	d0e3      	beq.n	8002564 <_malloc_r+0x64>
 800259c:	1a21      	subs	r1, r4, r0
 800259e:	4630      	mov	r0, r6
 80025a0:	f000 f82e 	bl	8002600 <_sbrk_r>
 80025a4:	3001      	adds	r0, #1
 80025a6:	d1dd      	bne.n	8002564 <_malloc_r+0x64>
 80025a8:	e7cf      	b.n	800254a <_malloc_r+0x4a>
 80025aa:	bf00      	nop
 80025ac:	20000090 	.word	0x20000090
 80025b0:	20000094 	.word	0x20000094

080025b4 <_realloc_r>:
 80025b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b6:	4607      	mov	r7, r0
 80025b8:	4614      	mov	r4, r2
 80025ba:	460e      	mov	r6, r1
 80025bc:	b921      	cbnz	r1, 80025c8 <_realloc_r+0x14>
 80025be:	4611      	mov	r1, r2
 80025c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80025c4:	f7ff bf9c 	b.w	8002500 <_malloc_r>
 80025c8:	b922      	cbnz	r2, 80025d4 <_realloc_r+0x20>
 80025ca:	f7ff ff4d 	bl	8002468 <_free_r>
 80025ce:	4625      	mov	r5, r4
 80025d0:	4628      	mov	r0, r5
 80025d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025d4:	f000 f830 	bl	8002638 <_malloc_usable_size_r>
 80025d8:	42a0      	cmp	r0, r4
 80025da:	d20f      	bcs.n	80025fc <_realloc_r+0x48>
 80025dc:	4621      	mov	r1, r4
 80025de:	4638      	mov	r0, r7
 80025e0:	f7ff ff8e 	bl	8002500 <_malloc_r>
 80025e4:	4605      	mov	r5, r0
 80025e6:	2800      	cmp	r0, #0
 80025e8:	d0f2      	beq.n	80025d0 <_realloc_r+0x1c>
 80025ea:	4631      	mov	r1, r6
 80025ec:	4622      	mov	r2, r4
 80025ee:	f7ff ff13 	bl	8002418 <memcpy>
 80025f2:	4631      	mov	r1, r6
 80025f4:	4638      	mov	r0, r7
 80025f6:	f7ff ff37 	bl	8002468 <_free_r>
 80025fa:	e7e9      	b.n	80025d0 <_realloc_r+0x1c>
 80025fc:	4635      	mov	r5, r6
 80025fe:	e7e7      	b.n	80025d0 <_realloc_r+0x1c>

08002600 <_sbrk_r>:
 8002600:	b538      	push	{r3, r4, r5, lr}
 8002602:	2300      	movs	r3, #0
 8002604:	4d05      	ldr	r5, [pc, #20]	; (800261c <_sbrk_r+0x1c>)
 8002606:	4604      	mov	r4, r0
 8002608:	4608      	mov	r0, r1
 800260a:	602b      	str	r3, [r5, #0]
 800260c:	f7fe f946 	bl	800089c <_sbrk>
 8002610:	1c43      	adds	r3, r0, #1
 8002612:	d102      	bne.n	800261a <_sbrk_r+0x1a>
 8002614:	682b      	ldr	r3, [r5, #0]
 8002616:	b103      	cbz	r3, 800261a <_sbrk_r+0x1a>
 8002618:	6023      	str	r3, [r4, #0]
 800261a:	bd38      	pop	{r3, r4, r5, pc}
 800261c:	20000244 	.word	0x20000244

08002620 <__malloc_lock>:
 8002620:	4801      	ldr	r0, [pc, #4]	; (8002628 <__malloc_lock+0x8>)
 8002622:	f000 b811 	b.w	8002648 <__retarget_lock_acquire_recursive>
 8002626:	bf00      	nop
 8002628:	2000024c 	.word	0x2000024c

0800262c <__malloc_unlock>:
 800262c:	4801      	ldr	r0, [pc, #4]	; (8002634 <__malloc_unlock+0x8>)
 800262e:	f000 b80c 	b.w	800264a <__retarget_lock_release_recursive>
 8002632:	bf00      	nop
 8002634:	2000024c 	.word	0x2000024c

08002638 <_malloc_usable_size_r>:
 8002638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800263c:	1f18      	subs	r0, r3, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	bfbc      	itt	lt
 8002642:	580b      	ldrlt	r3, [r1, r0]
 8002644:	18c0      	addlt	r0, r0, r3
 8002646:	4770      	bx	lr

08002648 <__retarget_lock_acquire_recursive>:
 8002648:	4770      	bx	lr

0800264a <__retarget_lock_release_recursive>:
 800264a:	4770      	bx	lr

0800264c <_init>:
 800264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264e:	bf00      	nop
 8002650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002652:	bc08      	pop	{r3}
 8002654:	469e      	mov	lr, r3
 8002656:	4770      	bx	lr

08002658 <_fini>:
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265a:	bf00      	nop
 800265c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265e:	bc08      	pop	{r3}
 8002660:	469e      	mov	lr, r3
 8002662:	4770      	bx	lr
