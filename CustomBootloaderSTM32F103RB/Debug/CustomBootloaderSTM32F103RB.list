
CustomBootloaderSTM32F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08002d48  08002d48  00012d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ef8  08002ef8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002ef8  08002ef8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ef8  08002ef8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ef8  08002ef8  00012ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000018  08002f18  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002f18  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a16a  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca2  00000000  00000000  0002a1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002be50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002c6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017430  00000000  00000000  0002ceb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bdc  00000000  00000000  000442e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827e4  00000000  00000000  0004debc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d06a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002124  00000000  00000000  000d06f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d30 	.word	0x08002d30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002d30 	.word	0x08002d30

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <bootloader_store_sha256>:
uint8_t Mem_u8FlashWrite(uint8_t *dBuffer, uint32_t Cpy_u32MemAddr,uint32_t Cpy_u32Len);

uint8_t expected_sha256_hash[32] = {0};

// Function to receive SHA-256 from the host
void bootloader_store_sha256(uint8_t *hash) {
 800015c:	b4b0      	push	{r4, r5, r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    memcpy(expected_sha256_hash, hash, 32);
 8000164:	4a09      	ldr	r2, [pc, #36]	; (800018c <bootloader_store_sha256+0x30>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	4614      	mov	r4, r2
 800016a:	461d      	mov	r5, r3
 800016c:	6828      	ldr	r0, [r5, #0]
 800016e:	6869      	ldr	r1, [r5, #4]
 8000170:	68aa      	ldr	r2, [r5, #8]
 8000172:	68eb      	ldr	r3, [r5, #12]
 8000174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000176:	6928      	ldr	r0, [r5, #16]
 8000178:	6969      	ldr	r1, [r5, #20]
 800017a:	69aa      	ldr	r2, [r5, #24]
 800017c:	69eb      	ldr	r3, [r5, #28]
 800017e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
}
 8000180:	bf00      	nop
 8000182:	370c      	adds	r7, #12
 8000184:	46bd      	mov	sp, r7
 8000186:	bcb0      	pop	{r4, r5, r7}
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	20000034 	.word	0x20000034

08000190 <send_uart_message>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t help_command[] = {BL_GET_VER , BL_GET_HELP, BL_GET_CID, BL_GET_RDP_STATUS, BL_GO_TO_ADDR, BL_FLASH_ERASE, BL_MEM_WRITE,
		                 BL_EN_RW_PROTECT,BL_MEM_READ, BL_READ_SECTOR_P_STATUS, BL_OTP_READ, BL_DIS_R_W_PROTECT};
void send_uart_message(char *message) {
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000198:	6878      	ldr	r0, [r7, #4]
 800019a:	f7ff ffd7 	bl	800014c <strlen>
 800019e:	4603      	mov	r3, r0
 80001a0:	b29a      	uxth	r2, r3
 80001a2:	f04f 33ff 	mov.w	r3, #4294967295
 80001a6:	6879      	ldr	r1, [r7, #4]
 80001a8:	4803      	ldr	r0, [pc, #12]	; (80001b8 <send_uart_message+0x28>)
 80001aa:	f002 fb1b 	bl	80027e4 <HAL_UART_Transmit>
}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	200000ec 	.word	0x200000ec

080001bc <bootloader_uart_read_data>:
void printmsg(const char *msg) {
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void bootloader_uart_read_data(){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
      // Allocates at runtime
	uint8_t rcv_len = 0;
 80001c2:	2300      	movs	r3, #0
 80001c4:	71fb      	strb	r3, [r7, #7]
	while(1){
		memset(bl_rx_buffer, 0, 200);
 80001c6:	22c8      	movs	r2, #200	; 0xc8
 80001c8:	2100      	movs	r1, #0
 80001ca:	4824      	ldr	r0, [pc, #144]	; (800025c <bootloader_uart_read_data+0xa0>)
 80001cc:	f002 fda8 	bl	8002d20 <memset>
		HAL_UART_Receive(&huart2, bl_rx_buffer, 1, HAL_MAX_DELAY);
 80001d0:	f04f 33ff 	mov.w	r3, #4294967295
 80001d4:	2201      	movs	r2, #1
 80001d6:	4921      	ldr	r1, [pc, #132]	; (800025c <bootloader_uart_read_data+0xa0>)
 80001d8:	4821      	ldr	r0, [pc, #132]	; (8000260 <bootloader_uart_read_data+0xa4>)
 80001da:	f002 fb8e 	bl	80028fa <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0]; // extract the first byte as the length of message
 80001de:	4b1f      	ldr	r3, [pc, #124]	; (800025c <bootloader_uart_read_data+0xa0>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(&huart2, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY); // then read the remaining of the command
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	b29a      	uxth	r2, r3
 80001e8:	f04f 33ff 	mov.w	r3, #4294967295
 80001ec:	491d      	ldr	r1, [pc, #116]	; (8000264 <bootloader_uart_read_data+0xa8>)
 80001ee:	481c      	ldr	r0, [pc, #112]	; (8000260 <bootloader_uart_read_data+0xa4>)
 80001f0:	f002 fb83 	bl	80028fa <HAL_UART_Receive>
		switch(bl_rx_buffer[1]){ //the second byte here is the command code,
 80001f4:	4b19      	ldr	r3, [pc, #100]	; (800025c <bootloader_uart_read_data+0xa0>)
 80001f6:	785b      	ldrb	r3, [r3, #1]
 80001f8:	3b51      	subs	r3, #81	; 0x51
 80001fa:	2b06      	cmp	r3, #6
 80001fc:	d8e3      	bhi.n	80001c6 <bootloader_uart_read_data+0xa>
 80001fe:	a201      	add	r2, pc, #4	; (adr r2, 8000204 <bootloader_uart_read_data+0x48>)
 8000200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000204:	08000221 	.word	0x08000221
 8000208:	08000229 	.word	0x08000229
 800020c:	08000231 	.word	0x08000231
 8000210:	08000239 	.word	0x08000239
 8000214:	08000241 	.word	0x08000241
 8000218:	08000249 	.word	0x08000249
 800021c:	08000251 	.word	0x08000251
		case BL_GET_VER:
			bootloader_handle_getver_cmd(bl_rx_buffer);
 8000220:	480e      	ldr	r0, [pc, #56]	; (800025c <bootloader_uart_read_data+0xa0>)
 8000222:	f000 f955 	bl	80004d0 <bootloader_handle_getver_cmd>
			break;
 8000226:	e017      	b.n	8000258 <bootloader_uart_read_data+0x9c>
		case BL_GET_HELP:
			bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <bootloader_uart_read_data+0xa0>)
 800022a:	f000 f981 	bl	8000530 <bootloader_handle_gethelp_cmd>
			break;
 800022e:	e013      	b.n	8000258 <bootloader_uart_read_data+0x9c>
		case BL_GET_CID:
			bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000230:	480a      	ldr	r0, [pc, #40]	; (800025c <bootloader_uart_read_data+0xa0>)
 8000232:	f000 f9ab 	bl	800058c <bootloader_handle_getcid_cmd>
			break;
 8000236:	e00f      	b.n	8000258 <bootloader_uart_read_data+0x9c>
		case BL_GET_RDP_STATUS:
			bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000238:	4808      	ldr	r0, [pc, #32]	; (800025c <bootloader_uart_read_data+0xa0>)
 800023a:	f000 f9d9 	bl	80005f0 <bootloader_handle_getrdp_cmd>
			break;
 800023e:	e00b      	b.n	8000258 <bootloader_uart_read_data+0x9c>
		case BL_GO_TO_ADDR:
			bootloader_handle_go_cmd(bl_rx_buffer);
 8000240:	4806      	ldr	r0, [pc, #24]	; (800025c <bootloader_uart_read_data+0xa0>)
 8000242:	f000 fa3b 	bl	80006bc <bootloader_handle_go_cmd>
			break;
 8000246:	e007      	b.n	8000258 <bootloader_uart_read_data+0x9c>
		case BL_FLASH_ERASE:
			bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <bootloader_uart_read_data+0xa0>)
 800024a:	f000 fac7 	bl	80007dc <bootloader_handle_flash_erase_cmd>
			break;
 800024e:	e003      	b.n	8000258 <bootloader_uart_read_data+0x9c>
		case BL_MEM_WRITE:
			bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000250:	4802      	ldr	r0, [pc, #8]	; (800025c <bootloader_uart_read_data+0xa0>)
 8000252:	f000 fb01 	bl	8000858 <bootloader_handle_mem_write_cmd>
			break;
 8000256:	bf00      	nop
		memset(bl_rx_buffer, 0, 200);
 8000258:	e7b5      	b.n	80001c6 <bootloader_uart_read_data+0xa>
 800025a:	bf00      	nop
 800025c:	20000134 	.word	0x20000134
 8000260:	200000ec 	.word	0x200000ec
 8000264:	20000135 	.word	0x20000135

08000268 <bootloader_jump_to_user_app>:
		}

	}

}
void bootloader_jump_to_user_app(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800026e:	b672      	cpsid	i
}
 8000270:	bf00      	nop
    __disable_irq();  // Disable all interrupts

    uint32_t user_app_stack_pointer = *((volatile uint32_t*) USER_APP_ADDRESS);
 8000272:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <bootloader_jump_to_user_app+0x60>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	60fb      	str	r3, [r7, #12]
    uint32_t user_app_reset_address = *((volatile uint32_t*) (USER_APP_ADDRESS + 4));
 8000278:	4b14      	ldr	r3, [pc, #80]	; (80002cc <bootloader_jump_to_user_app+0x64>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	60bb      	str	r3, [r7, #8]

    if (user_app_reset_address == 0xFFFFFFFF || user_app_stack_pointer == 0xFFFFFFFF) {
 800027e:	68bb      	ldr	r3, [r7, #8]
 8000280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000284:	d003      	beq.n	800028e <bootloader_jump_to_user_app+0x26>
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800028c:	d103      	bne.n	8000296 <bootloader_jump_to_user_app+0x2e>
        send_uart_message("No valid application found. Staying in bootloader...\r\n");
 800028e:	4810      	ldr	r0, [pc, #64]	; (80002d0 <bootloader_jump_to_user_app+0x68>)
 8000290:	f7ff ff7e 	bl	8000190 <send_uart_message>
        return;
 8000294:	e015      	b.n	80002c2 <bootloader_jump_to_user_app+0x5a>
    }

    send_uart_message("Jumping to User Application...\r\n");
 8000296:	480f      	ldr	r0, [pc, #60]	; (80002d4 <bootloader_jump_to_user_app+0x6c>)
 8000298:	f7ff ff7a 	bl	8000190 <send_uart_message>
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	f383 8808 	msr	MSP, r3
}
 80002a6:	bf00      	nop

    __set_MSP(user_app_stack_pointer);  // Set Main Stack Pointer

    SCB->VTOR = USER_APP_ADDRESS;  // Set Vector Table Offset for User App
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <bootloader_jump_to_user_app+0x70>)
 80002aa:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <bootloader_jump_to_user_app+0x60>)
 80002ac:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002ae:	f3bf 8f4f 	dsb	sy
}
 80002b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80002b4:	f3bf 8f6f 	isb	sy
}
 80002b8:	bf00      	nop

    __DSB();  // Ensure all memory operations complete
    __ISB();  // Flush instruction pipeline

    void (*user_app_reset_handler)(void) = (void (*)(void)) user_app_reset_address;
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	607b      	str	r3, [r7, #4]
    user_app_reset_handler();  // Jump to user application
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4798      	blx	r3
}
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	08004000 	.word	0x08004000
 80002cc:	08004004 	.word	0x08004004
 80002d0:	08002d48 	.word	0x08002d48
 80002d4:	08002d80 	.word	0x08002d80
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f001 f8e2 	bl	80014a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f816 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f000 f88e 	bl	8000408 <MX_GPIO_Init>
  //MX_USART1_UART_Init();
  MX_USART2_UART_Init();
 80002ec:	f000 f862 	bl	80003b4 <MX_USART2_UART_Init>
  //MX_USART3_UART_Init();
  MX_CRC_Init();
 80002f0:	f000 f84c 	bl	800038c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
  /* USER CODE END 2 */
  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
 80002f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f8:	4805      	ldr	r0, [pc, #20]	; (8000310 <main+0x34>)
 80002fa:	f001 fde5 	bl	8001ec8 <HAL_GPIO_ReadPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d102      	bne.n	800030a <main+0x2e>
	  //printmsg("Enter bootloader mode\n");
	  bootloader_uart_read_data();
 8000304:	f7ff ff5a 	bl	80001bc <bootloader_uart_read_data>
 8000308:	e001      	b.n	800030e <main+0x32>
  }else{
	  //printmsg("Jump to user application\n");
	  bootloader_jump_to_user_app();
 800030a:	f7ff ffad 	bl	8000268 <bootloader_jump_to_user_app>

  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800030e:	e7fe      	b.n	800030e <main+0x32>
 8000310:	40011000 	.word	0x40011000

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b090      	sub	sp, #64	; 0x40
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	2228      	movs	r2, #40	; 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f002 fcfc 	bl	8002d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000336:	2302      	movs	r3, #2
 8000338:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033a:	2301      	movs	r3, #1
 800033c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033e:	2310      	movs	r3, #16
 8000340:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000342:	2300      	movs	r3, #0
 8000344:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	f107 0318 	add.w	r3, r7, #24
 800034a:	4618      	mov	r0, r3
 800034c:	f001 fdec 	bl	8001f28 <HAL_RCC_OscConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000356:	f000 fc00 	bl	8000b5a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035a:	230f      	movs	r3, #15
 800035c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f002 f858 	bl	8002428 <HAL_RCC_ClockConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800037e:	f000 fbec 	bl	8000b5a <Error_Handler>
  }
}
 8000382:	bf00      	nop
 8000384:	3740      	adds	r7, #64	; 0x40
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
	...

0800038c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_CRC_Init+0x20>)
 8000392:	4a07      	ldr	r2, [pc, #28]	; (80003b0 <MX_CRC_Init+0x24>)
 8000394:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <MX_CRC_Init+0x20>)
 8000398:	f001 f9cb 	bl	8001732 <HAL_CRC_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80003a2:	f000 fbda 	bl	8000b5a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	2000009c 	.word	0x2000009c
 80003b0:	40023000 	.word	0x40023000

080003b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b8:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_USART2_UART_Init+0x4c>)
 80003ba:	4a12      	ldr	r2, [pc, #72]	; (8000404 <MX_USART2_UART_Init+0x50>)
 80003bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <MX_USART2_UART_Init+0x4c>)
 80003c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_USART2_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_USART2_UART_Init+0x4c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_USART2_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_USART2_UART_Init+0x4c>)
 80003da:	220c      	movs	r2, #12
 80003dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_USART2_UART_Init+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USART2_UART_Init+0x4c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <MX_USART2_UART_Init+0x4c>)
 80003ec:	f002 f9aa 	bl	8002744 <HAL_UART_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003f6:	f000 fbb0 	bl	8000b5a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	200000ec 	.word	0x200000ec
 8000404:	40004400 	.word	0x40004400

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041c:	4b29      	ldr	r3, [pc, #164]	; (80004c4 <MX_GPIO_Init+0xbc>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a28      	ldr	r2, [pc, #160]	; (80004c4 <MX_GPIO_Init+0xbc>)
 8000422:	f043 0310 	orr.w	r3, r3, #16
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b26      	ldr	r3, [pc, #152]	; (80004c4 <MX_GPIO_Init+0xbc>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0310 	and.w	r3, r3, #16
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000434:	4b23      	ldr	r3, [pc, #140]	; (80004c4 <MX_GPIO_Init+0xbc>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a22      	ldr	r2, [pc, #136]	; (80004c4 <MX_GPIO_Init+0xbc>)
 800043a:	f043 0304 	orr.w	r3, r3, #4
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b20      	ldr	r3, [pc, #128]	; (80004c4 <MX_GPIO_Init+0xbc>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0304 	and.w	r3, r3, #4
 8000448:	60bb      	str	r3, [r7, #8]
 800044a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <MX_GPIO_Init+0xbc>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a1c      	ldr	r2, [pc, #112]	; (80004c4 <MX_GPIO_Init+0xbc>)
 8000452:	f043 0308 	orr.w	r3, r3, #8
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <MX_GPIO_Init+0xbc>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0308 	and.w	r3, r3, #8
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2120      	movs	r1, #32
 8000468:	4817      	ldr	r0, [pc, #92]	; (80004c8 <MX_GPIO_Init+0xc0>)
 800046a:	f001 fd44 	bl	8001ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800046e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000478:	2301      	movs	r3, #1
 800047a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	4619      	mov	r1, r3
 8000482:	4812      	ldr	r0, [pc, #72]	; (80004cc <MX_GPIO_Init+0xc4>)
 8000484:	f001 fb9c 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000488:	2301      	movs	r3, #1
 800048a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000490:	2301      	movs	r3, #1
 8000492:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	4619      	mov	r1, r3
 800049a:	480b      	ldr	r0, [pc, #44]	; (80004c8 <MX_GPIO_Init+0xc0>)
 800049c:	f001 fb90 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004a0:	2320      	movs	r3, #32
 80004a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	2301      	movs	r3, #1
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	2302      	movs	r3, #2
 80004ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	4804      	ldr	r0, [pc, #16]	; (80004c8 <MX_GPIO_Init+0xc0>)
 80004b8:	f001 fb82 	bl	8001bc0 <HAL_GPIO_Init>

}
 80004bc:	bf00      	nop
 80004be:	3720      	adds	r7, #32
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40010800 	.word	0x40010800
 80004cc:	40011000 	.word	0x40011000

080004d0 <bootloader_handle_getver_cmd>:
/* USER CODE BEGIN 4 */
void  bootloader_uart_read_data(void);
void bootloader_jump_to_user_app(void);

void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
    uint8_t bl_version;

    //printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\n");

    uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	3301      	adds	r3, #1
 80004de:	617b      	str	r3, [r7, #20]
    uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len - 4));
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	3b04      	subs	r3, #4
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	4413      	add	r3, r2
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	613b      	str	r3, [r7, #16]

    if (!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	3b04      	subs	r3, #4
 80004f0:	693a      	ldr	r2, [r7, #16]
 80004f2:	4619      	mov	r1, r3
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f000 fa5f 	bl	80009b8 <bootloader_verify_crc>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d111      	bne.n	8000524 <bootloader_handle_getver_cmd+0x54>
    {
        //printmsg("BL_DEBUG_MSG:checksum success !!\n");

        // Send ACK first
        bootloader_send_ack(bl_rx_buffer[0], 1);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2101      	movs	r1, #1
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fa2a 	bl	8000960 <bootloader_send_ack>

        // Retrieve bootloader version
        bl_version = get_bootloader_version();
 800050c:	f000 fa88 	bl	8000a20 <get_bootloader_version>
 8000510:	4603      	mov	r3, r0
 8000512:	b2db      	uxtb	r3, r3
 8000514:	73fb      	strb	r3, [r7, #15]
        // Send the version
        bootloader_uart_write_data(&bl_version, 1);
 8000516:	f107 030f 	add.w	r3, r7, #15
 800051a:	2101      	movs	r1, #1
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fa87 	bl	8000a30 <bootloader_uart_write_data>
    else
    {
        //printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
    }
}
 8000522:	e001      	b.n	8000528 <bootloader_handle_getver_cmd+0x58>
        bootloader_send_nack();
 8000524:	f000 fa36 	bl	8000994 <bootloader_send_nack>
}
 8000528:	bf00      	nop
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <bootloader_handle_gethelp_cmd>:

void bootloader_handle_gethelp_cmd(uint8_t *pBuffer){
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
    uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <bootloader_handle_gethelp_cmd+0x54>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	60fb      	str	r3, [r7, #12]
    uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len - 4));
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3b04      	subs	r3, #4
 8000544:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <bootloader_handle_gethelp_cmd+0x54>)
 8000546:	4413      	add	r3, r2
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	60bb      	str	r3, [r7, #8]

    if (!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	3b04      	subs	r3, #4
 8000550:	68ba      	ldr	r2, [r7, #8]
 8000552:	4619      	mov	r1, r3
 8000554:	480b      	ldr	r0, [pc, #44]	; (8000584 <bootloader_handle_gethelp_cmd+0x54>)
 8000556:	f000 fa2f 	bl	80009b8 <bootloader_verify_crc>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d10a      	bne.n	8000576 <bootloader_handle_gethelp_cmd+0x46>
    {
        // Send ACK first
        bootloader_send_ack(pBuffer[0], sizeof(help_command));
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	210c      	movs	r1, #12
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f9fa 	bl	8000960 <bootloader_send_ack>
        // Send the version
        bootloader_uart_write_data(help_command, sizeof(help_command));
 800056c:	210c      	movs	r1, #12
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <bootloader_handle_gethelp_cmd+0x58>)
 8000570:	f000 fa5e 	bl	8000a30 <bootloader_uart_write_data>
    else
    {
        //printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
    }
}
 8000574:	e001      	b.n	800057a <bootloader_handle_gethelp_cmd+0x4a>
        bootloader_send_nack();
 8000576:	f000 fa0d 	bl	8000994 <bootloader_send_nack>
}
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000134 	.word	0x20000134
 8000588:	20000000 	.word	0x20000000

0800058c <bootloader_handle_getcid_cmd>:
void bootloader_handle_getcid_cmd(uint8_t *pBuffer){
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <bootloader_handle_getcid_cmd+0x60>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
    uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len - 4));
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	3b04      	subs	r3, #4
 80005a0:	4a12      	ldr	r2, [pc, #72]	; (80005ec <bootloader_handle_getcid_cmd+0x60>)
 80005a2:	4413      	add	r3, r2
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	613b      	str	r3, [r7, #16]
    uint16_t cid = get_mcu_chip_id();
 80005a8:	f000 fa56 	bl	8000a58 <get_mcu_chip_id>
 80005ac:	4603      	mov	r3, r0
 80005ae:	81fb      	strh	r3, [r7, #14]
    if (!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	3b04      	subs	r3, #4
 80005b4:	693a      	ldr	r2, [r7, #16]
 80005b6:	4619      	mov	r1, r3
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <bootloader_handle_getcid_cmd+0x60>)
 80005ba:	f000 f9fd 	bl	80009b8 <bootloader_verify_crc>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d10c      	bne.n	80005de <bootloader_handle_getcid_cmd+0x52>
    {
        // Send ACK first
        bootloader_send_ack(pBuffer[0], 2);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2102      	movs	r1, #2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f9c8 	bl	8000960 <bootloader_send_ack>
        // Send the version
        bootloader_uart_write_data((uint8_t*)&cid, 2);
 80005d0:	f107 030e 	add.w	r3, r7, #14
 80005d4:	2102      	movs	r1, #2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fa2a 	bl	8000a30 <bootloader_uart_write_data>
    else
    {
        //printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
    }
}
 80005dc:	e001      	b.n	80005e2 <bootloader_handle_getcid_cmd+0x56>
        bootloader_send_nack();
 80005de:	f000 f9d9 	bl	8000994 <bootloader_send_nack>
}
 80005e2:	bf00      	nop
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000134 	.word	0x20000134

080005f0 <bootloader_handle_getrdp_cmd>:
void bootloader_handle_getrdp_cmd(uint8_t *pBuffer){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

    uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <bootloader_handle_getrdp_cmd+0x5c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
    uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len - 4));
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	3b04      	subs	r3, #4
 8000604:	4a11      	ldr	r2, [pc, #68]	; (800064c <bootloader_handle_getrdp_cmd+0x5c>)
 8000606:	4413      	add	r3, r2
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	613b      	str	r3, [r7, #16]
    uint16_t RDP_value = get_flash_rdp_level();
 800060c:	f000 fa36 	bl	8000a7c <get_flash_rdp_level>
 8000610:	4603      	mov	r3, r0
 8000612:	81fb      	strh	r3, [r7, #14]
    if (!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	3b04      	subs	r3, #4
 8000618:	693a      	ldr	r2, [r7, #16]
 800061a:	4619      	mov	r1, r3
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <bootloader_handle_getrdp_cmd+0x5c>)
 800061e:	f000 f9cb 	bl	80009b8 <bootloader_verify_crc>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d10b      	bne.n	8000640 <bootloader_handle_getrdp_cmd+0x50>
    {
        // Send ACK first
    	//printmsg("BL_DEBUG_MSG:checksum success !!\n");
        bootloader_send_ack(pBuffer[0], 2);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2102      	movs	r1, #2
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f996 	bl	8000960 <bootloader_send_ack>
        // Send the version
        bootloader_uart_write_data(RDP_value, 2);
 8000634:	89fb      	ldrh	r3, [r7, #14]
 8000636:	2102      	movs	r1, #2
 8000638:	4618      	mov	r0, r3
 800063a:	f000 f9f9 	bl	8000a30 <bootloader_uart_write_data>
    else
    {
        //printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
    }
}
 800063e:	e001      	b.n	8000644 <bootloader_handle_getrdp_cmd+0x54>
        bootloader_send_nack();
 8000640:	f000 f9a8 	bl	8000994 <bootloader_send_nack>
}
 8000644:	bf00      	nop
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000134 	.word	0x20000134

08000650 <verify_firmware_sha256>:


uint8_t verify_firmware_sha256(uint32_t firmwareAddr, uint32_t size) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b0a6      	sub	sp, #152	; 0x98
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
    if (size == 0 || size > 0x10000) {
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <verify_firmware_sha256+0x18>
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000666:	d901      	bls.n	800066c <verify_firmware_sha256+0x1c>
        return 0;
 8000668:	2300      	movs	r3, #0
 800066a:	e020      	b.n	80006ae <verify_firmware_sha256+0x5e>
    }

    SHA256_CTX ctx;
    uint8_t calculated_hash[32];

    sha256_init(&ctx);
 800066c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fc0f 	bl	8000e94 <sha256_init>
    sha256_update(&ctx, (uint8_t *)firmwareAddr, size);
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fc44 	bl	8000f0c <sha256_update>
    sha256_final(&ctx, calculated_hash);
 8000684:	f107 0208 	add.w	r2, r7, #8
 8000688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fc74 	bl	8000f7c <sha256_final>

    if (memcmp(calculated_hash, expected_sha256_hash, 32) == 0) {
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2220      	movs	r2, #32
 800069a:	4907      	ldr	r1, [pc, #28]	; (80006b8 <verify_firmware_sha256+0x68>)
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fb31 	bl	8002d04 <memcmp>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d101      	bne.n	80006ac <verify_firmware_sha256+0x5c>
        return 0; // Hash matches
 80006a8:	2300      	movs	r3, #0
 80006aa:	e000      	b.n	80006ae <verify_firmware_sha256+0x5e>
    } else {
        return 1; // Hash mismatch
 80006ac:	2301      	movs	r3, #1
    }
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3798      	adds	r7, #152	; 0x98
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000034 	.word	0x20000034

080006bc <bootloader_handle_go_cmd>:
void bootloader_handle_go_cmd(uint8_t *pBuffer) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	; 0x30
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 80006c4:	4b3e      	ldr	r3, [pc, #248]	; (80007c0 <bootloader_handle_go_cmd+0x104>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	3301      	adds	r3, #1
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        bootloader_send_ack(pBuffer[0], 1);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2101      	movs	r1, #1
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f944 	bl	8000960 <bootloader_send_ack>

        uint32_t goToAddress = *(uint32_t*)&pBuffer[2]; // Extract jump address
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
        uint32_t firmware_size = *(uint32_t*)&pBuffer[6]; // Extract firmware size (4 byte)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
        uint8_t *received_hash = &pBuffer[10]; // Extract SHA-256 (32 bytes)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	330a      	adds	r3, #10
 80006ec:	623b      	str	r3, [r7, #32]
        bootloader_store_sha256(received_hash);
 80006ee:	6a38      	ldr	r0, [r7, #32]
 80006f0:	f7ff fd34 	bl	800015c <bootloader_store_sha256>

        if (verify_address(goToAddress) == ADDR_VALID) {
 80006f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006f6:	f000 f9d5 	bl	8000aa4 <verify_address>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d15b      	bne.n	80007b8 <bootloader_handle_go_cmd+0xfc>
            uint8_t addr_status = ADDR_VALID;
 8000700:	2301      	movs	r3, #1
 8000702:	73fb      	strb	r3, [r7, #15]
            uint8_t sha256_status;
            HAL_UART_Transmit(&huart2, &addr_status, 1, HAL_MAX_DELAY);
 8000704:	f107 010f 	add.w	r1, r7, #15
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
 800070c:	2201      	movs	r2, #1
 800070e:	482d      	ldr	r0, [pc, #180]	; (80007c4 <bootloader_handle_go_cmd+0x108>)
 8000710:	f002 f868 	bl	80027e4 <HAL_UART_Transmit>

            // Verify SHA-256 before jumping
            if (verify_firmware_sha256(goToAddress, firmware_size)) {
 8000714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000718:	f7ff ff9a 	bl	8000650 <verify_firmware_sha256>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00a      	beq.n	8000738 <bootloader_handle_go_cmd+0x7c>
            	sha256_status = SHA256_FAIL;
 8000722:	2300      	movs	r3, #0
 8000724:	73bb      	strb	r3, [r7, #14]
                HAL_UART_Transmit(&huart2, &sha256_status, 1, HAL_MAX_DELAY);
 8000726:	f107 010e 	add.w	r1, r7, #14
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	2201      	movs	r2, #1
 8000730:	4824      	ldr	r0, [pc, #144]	; (80007c4 <bootloader_handle_go_cmd+0x108>)
 8000732:	f002 f857 	bl	80027e4 <HAL_UART_Transmit>
                return;
 8000736:	e03f      	b.n	80007b8 <bootloader_handle_go_cmd+0xfc>

            }
            else{
            sha256_status = SHA256_OK;
 8000738:	2301      	movs	r3, #1
 800073a:	73bb      	strb	r3, [r7, #14]
            HAL_UART_Transmit(&huart2, &sha256_status, 1, HAL_MAX_DELAY);
 800073c:	f107 010e 	add.w	r1, r7, #14
 8000740:	f04f 33ff 	mov.w	r3, #4294967295
 8000744:	2201      	movs	r2, #1
 8000746:	481f      	ldr	r0, [pc, #124]	; (80007c4 <bootloader_handle_go_cmd+0x108>)
 8000748:	f002 f84c 	bl	80027e4 <HAL_UART_Transmit>
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop

            __disable_irq();

            uint32_t app_msp = *(volatile uint32_t*)goToAddress;  // Stack Pointer
 8000750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	61fb      	str	r3, [r7, #28]
            uint32_t app_reset_handler = *(volatile uint32_t*)(goToAddress + 4);  // Reset Handler
 8000756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000758:	3304      	adds	r3, #4
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	61bb      	str	r3, [r7, #24]

            if (app_msp < 0x20000000 || app_msp > 0x2001FFFF) {
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000764:	d303      	bcc.n	800076e <bootloader_handle_go_cmd+0xb2>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <bootloader_handle_go_cmd+0x10c>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d907      	bls.n	800077e <bootloader_handle_go_cmd+0xc2>
                HAL_UART_Transmit(&huart2, (uint8_t*)"Invalid MSP\r\n", 15, HAL_MAX_DELAY);
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	220f      	movs	r2, #15
 8000774:	4915      	ldr	r1, [pc, #84]	; (80007cc <bootloader_handle_go_cmd+0x110>)
 8000776:	4813      	ldr	r0, [pc, #76]	; (80007c4 <bootloader_handle_go_cmd+0x108>)
 8000778:	f002 f834 	bl	80027e4 <HAL_UART_Transmit>
                return;
 800077c:	e01c      	b.n	80007b8 <bootloader_handle_go_cmd+0xfc>
            }

            if (app_reset_handler < 0x08000000 || app_reset_handler > 0x08010000) {
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000784:	d303      	bcc.n	800078e <bootloader_handle_go_cmd+0xd2>
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	4a11      	ldr	r2, [pc, #68]	; (80007d0 <bootloader_handle_go_cmd+0x114>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d907      	bls.n	800079e <bootloader_handle_go_cmd+0xe2>
                HAL_UART_Transmit(&huart2, (uint8_t*)"Invalid reset handler\r\n", 25, HAL_MAX_DELAY);
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	2219      	movs	r2, #25
 8000794:	490f      	ldr	r1, [pc, #60]	; (80007d4 <bootloader_handle_go_cmd+0x118>)
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <bootloader_handle_go_cmd+0x108>)
 8000798:	f002 f824 	bl	80027e4 <HAL_UART_Transmit>
                return;
 800079c:	e00c      	b.n	80007b8 <bootloader_handle_go_cmd+0xfc>
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	f383 8808 	msr	MSP, r3
}
 80007a8:	bf00      	nop
            }
            //HAL_UART_Transmit(&huart2, &addr_status, 1, HAL_MAX_DELAY);
            __set_MSP(app_msp);  // Set new stack pointer
            SCB->VTOR = goToAddress;  // Set new vector table
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <bootloader_handle_go_cmd+0x11c>)
 80007ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ae:	6093      	str	r3, [r2, #8]

            // Function pointer to application reset handler
            void (*Jump_To_APP)(void) = (void (*)(void))app_reset_handler;
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	617b      	str	r3, [r7, #20]

            Jump_To_APP();
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	4798      	blx	r3
        }
    }

}
 80007b8:	3730      	adds	r7, #48	; 0x30
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000134 	.word	0x20000134
 80007c4:	200000ec 	.word	0x200000ec
 80007c8:	2001ffff 	.word	0x2001ffff
 80007cc:	08002da4 	.word	0x08002da4
 80007d0:	08010000 	.word	0x08010000
 80007d4:	08002db4 	.word	0x08002db4
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <bootloader_handle_flash_erase_cmd>:
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    uint32_t command_packet_len = pBuffer[0] + 1;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
    uint32_t host_crc = *((uint32_t *)(pBuffer + command_packet_len - 4));
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	3b04      	subs	r3, #4
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4413      	add	r3, r2
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	613b      	str	r3, [r7, #16]

    if (!bootloader_verify_crc(pBuffer, command_packet_len - 4, host_crc)) {
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	3b04      	subs	r3, #4
 80007fc:	693a      	ldr	r2, [r7, #16]
 80007fe:	4619      	mov	r1, r3
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f000 f8d9 	bl	80009b8 <bootloader_verify_crc>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d11c      	bne.n	8000846 <bootloader_handle_flash_erase_cmd+0x6a>
        uint8_t page_number = pBuffer[2];  // Start page number
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	789b      	ldrb	r3, [r3, #2]
 8000810:	73fb      	strb	r3, [r7, #15]
        uint8_t num_pages = pBuffer[3];    // Number of pages to erase
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	78db      	ldrb	r3, [r3, #3]
 8000816:	73bb      	strb	r3, [r7, #14]

        bootloader_send_ack(pBuffer[0], 1);  // Send ACK first
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2101      	movs	r1, #1
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f89e 	bl	8000960 <bootloader_send_ack>
        uint8_t erase_status = erase_flash_page(page_number, num_pages);
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	7bba      	ldrb	r2, [r7, #14]
 8000828:	4611      	mov	r1, r2
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f968 	bl	8000b00 <erase_flash_page>
 8000830:	4603      	mov	r3, r0
 8000832:	737b      	strb	r3, [r7, #13]
        HAL_UART_Transmit(&huart2, &erase_status, 1, HAL_MAX_DELAY);
 8000834:	f107 010d 	add.w	r1, r7, #13
 8000838:	f04f 33ff 	mov.w	r3, #4294967295
 800083c:	2201      	movs	r2, #1
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <bootloader_handle_flash_erase_cmd+0x78>)
 8000840:	f001 ffd0 	bl	80027e4 <HAL_UART_Transmit>
    } else {
        bootloader_send_nack();
    }
}
 8000844:	e001      	b.n	800084a <bootloader_handle_flash_erase_cmd+0x6e>
        bootloader_send_nack();
 8000846:	f000 f8a5 	bl	8000994 <bootloader_send_nack>
}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000ec 	.word	0x200000ec

08000858 <bootloader_handle_mem_write_cmd>:
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 8000860:	2300      	movs	r3, #0
 8000862:	72fb      	strb	r3, [r7, #11]
    uint8_t Loc_u8Len = pBuffer[0];
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	75fb      	strb	r3, [r7, #23]
    uint8_t Loc_u8PayLoadLen = pBuffer[6];
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	799b      	ldrb	r3, [r3, #6]
 800086e:	75bb      	strb	r3, [r7, #22]
    uint32_t Loc_u32MemAddress = (*(uint32_t*)(&pBuffer[2]));
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000876:	613b      	str	r3, [r7, #16]

    // Length of the full command packet
    uint32_t Loc_u32CommandBacketLen = pBuffer[0] + 1;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	60fb      	str	r3, [r7, #12]

        bootloader_send_ack(pBuffer[0], 1);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2101      	movs	r1, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f86a 	bl	8000960 <bootloader_send_ack>

        if (verify_address(Loc_u32MemAddress) == ADDR_VALID)
 800088c:	6938      	ldr	r0, [r7, #16]
 800088e:	f000 f909 	bl	8000aa4 <verify_address>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	d111      	bne.n	80008bc <bootloader_handle_mem_write_cmd+0x64>
        {

        	status = execute_mem_write(&pBuffer[7], Loc_u32MemAddress, Loc_u8PayLoadLen);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3307      	adds	r3, #7
 800089c:	7dba      	ldrb	r2, [r7, #22]
 800089e:	6939      	ldr	r1, [r7, #16]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f81b 	bl	80008dc <execute_mem_write>
 80008a6:	4603      	mov	r3, r0
 80008a8:	72fb      	strb	r3, [r7, #11]
            HAL_UART_Transmit(&huart2, (uint8_t*)&status, 1, HAL_MAX_DELAY);
 80008aa:	f107 010b 	add.w	r1, r7, #11
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	2201      	movs	r2, #1
 80008b4:	4808      	ldr	r0, [pc, #32]	; (80008d8 <bootloader_handle_mem_write_cmd+0x80>)
 80008b6:	f001 ff95 	bl	80027e4 <HAL_UART_Transmit>
        {
            ///printmsg("DBMSG: Invalid Address..\n");
        	status = ADDR_INVALID;
            HAL_UART_Transmit(&huart2, (uint8_t*)&status, 1, HAL_MAX_DELAY);
        }
}
 80008ba:	e009      	b.n	80008d0 <bootloader_handle_mem_write_cmd+0x78>
        	status = ADDR_INVALID;
 80008bc:	2300      	movs	r3, #0
 80008be:	72fb      	strb	r3, [r7, #11]
            HAL_UART_Transmit(&huart2, (uint8_t*)&status, 1, HAL_MAX_DELAY);
 80008c0:	f107 010b 	add.w	r1, r7, #11
 80008c4:	f04f 33ff 	mov.w	r3, #4294967295
 80008c8:	2201      	movs	r2, #1
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <bootloader_handle_mem_write_cmd+0x80>)
 80008cc:	f001 ff8a 	bl	80027e4 <HAL_UART_Transmit>
}
 80008d0:	bf00      	nop
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000ec 	.word	0x200000ec

080008dc <execute_mem_write>:

/*
 * Helper functions
 */
uint8_t execute_mem_write(uint8_t *dBuffer, uint32_t Cpy_u32MemAddr, uint32_t Cpy_u32Len)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
    uint8_t Loc_u8Status = HAL_OK;
 80008e8:	2300      	movs	r3, #0
 80008ea:	77fb      	strb	r3, [r7, #31]
    HAL_FLASH_Unlock();
 80008ec:	f000 ffd8 	bl	80018a0 <HAL_FLASH_Unlock>

    // Ensure memory address is aligned to 16-bit (half-word)
    if (Cpy_u32MemAddr % 2 != 0) {
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <execute_mem_write+0x22>
        return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e02b      	b.n	8000956 <execute_mem_write+0x7a>
    }

    for (uint32_t i = 0; i < Cpy_u32Len; i += 2) // Write 2 bytes at a time
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	e01f      	b.n	8000944 <execute_mem_write+0x68>
    {
        uint16_t data = (dBuffer[i+1] << 8) | dBuffer[i];  // Combine 2 bytes
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	3301      	adds	r3, #1
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	4413      	add	r3, r2
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	021b      	lsls	r3, r3, #8
 8000910:	b21a      	sxth	r2, r3
 8000912:	68f9      	ldr	r1, [r7, #12]
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	440b      	add	r3, r1
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b21b      	sxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b21b      	sxth	r3, r3
 8000920:	82fb      	strh	r3, [r7, #22]
        Loc_u8Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Cpy_u32MemAddr + i, data);
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	18d1      	adds	r1, r2, r3
 8000928:	8afa      	ldrh	r2, [r7, #22]
 800092a:	f04f 0300 	mov.w	r3, #0
 800092e:	2001      	movs	r0, #1
 8000930:	f000 ff46 	bl	80017c0 <HAL_FLASH_Program>
 8000934:	4603      	mov	r3, r0
 8000936:	77fb      	strb	r3, [r7, #31]

        if (Loc_u8Status != HAL_OK) {
 8000938:	7ffb      	ldrb	r3, [r7, #31]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d107      	bne.n	800094e <execute_mem_write+0x72>
    for (uint32_t i = 0; i < Cpy_u32Len; i += 2) // Write 2 bytes at a time
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	3302      	adds	r3, #2
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	d3db      	bcc.n	8000904 <execute_mem_write+0x28>
 800094c:	e000      	b.n	8000950 <execute_mem_write+0x74>
            break; // Stop on error
 800094e:	bf00      	nop
        }
    }

    HAL_FLASH_Lock();
 8000950:	f000 ffcc 	bl	80018ec <HAL_FLASH_Lock>
    return Loc_u8Status;
 8000954:	7ffb      	ldrb	r3, [r7, #31]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3720      	adds	r7, #32
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <bootloader_send_ack>:

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	460a      	mov	r2, r1
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	4613      	mov	r3, r2
 800096e:	71bb      	strb	r3, [r7, #6]
	 //here we send 2 byte.. first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8000970:	23a5      	movs	r3, #165	; 0xa5
 8000972:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart2,ack_buf,2,HAL_MAX_DELAY);
 8000978:	f107 010c 	add.w	r1, r7, #12
 800097c:	f04f 33ff 	mov.w	r3, #4294967295
 8000980:	2202      	movs	r2, #2
 8000982:	4803      	ldr	r0, [pc, #12]	; (8000990 <bootloader_send_ack+0x30>)
 8000984:	f001 ff2e 	bl	80027e4 <HAL_UART_Transmit>

}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000ec 	.word	0x200000ec

08000994 <bootloader_send_nack>:
void bootloader_send_nack(void){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 800099a:	237f      	movs	r3, #127	; 0x7f
 800099c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2,&nack,1,HAL_MAX_DELAY);
 800099e:	1df9      	adds	r1, r7, #7
 80009a0:	f04f 33ff 	mov.w	r3, #4294967295
 80009a4:	2201      	movs	r2, #1
 80009a6:	4803      	ldr	r0, [pc, #12]	; (80009b4 <bootloader_send_nack+0x20>)
 80009a8:	f001 ff1c 	bl	80027e4 <HAL_UART_Transmit>
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200000ec 	.word	0x200000ec

080009b8 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
    uint32_t uwCRCValue=0xff;
 80009c4:	23ff      	movs	r3, #255	; 0xff
 80009c6:	61fb      	str	r3, [r7, #28]

    for (uint32_t i=0 ; i < len ; i++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	e00f      	b.n	80009ee <bootloader_verify_crc+0x36>
	{
        uint32_t i_data = pData[i];
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	4413      	add	r3, r2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	617b      	str	r3, [r7, #20]
        uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2201      	movs	r2, #1
 80009de:	4619      	mov	r1, r3
 80009e0:	480e      	ldr	r0, [pc, #56]	; (8000a1c <bootloader_verify_crc+0x64>)
 80009e2:	f000 fec2 	bl	800176a <HAL_CRC_Accumulate>
 80009e6:	61f8      	str	r0, [r7, #28]
    for (uint32_t i=0 ; i < len ; i++)
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	3301      	adds	r3, #1
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d3eb      	bcc.n	80009ce <bootloader_verify_crc+0x16>
	}

	 /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(&hcrc);
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <bootloader_verify_crc+0x64>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <bootloader_verify_crc+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f042 0201 	orr.w	r2, r2, #1
 8000a04:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 8000a06:	69fa      	ldr	r2, [r7, #28]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d101      	bne.n	8000a12 <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e000      	b.n	8000a14 <bootloader_verify_crc+0x5c>
	}

	return VERIFY_CRC_FAIL;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000009c 	.word	0x2000009c

08000a20 <get_bootloader_version>:
uint32_t get_bootloader_version(void){
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
	return (uint32_t)BL_VERSION;
 8000a24:	2310      	movs	r3, #16
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
	...

08000a30 <bootloader_uart_write_data>:
/* This function writes data in to C_UART */
void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
    //Function used to send data from bootloader to Host
	HAL_UART_Transmit(&huart2 ,pBuffer,len,HAL_MAX_DELAY);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <bootloader_uart_write_data+0x24>)
 8000a46:	f001 fecd 	bl	80027e4 <HAL_UART_Transmit>

}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000ec 	.word	0x200000ec

08000a58 <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(void){
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <get_mcu_chip_id+0x20>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a68:	80fb      	strh	r3, [r7, #6]
	return cid;
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e0042000 	.word	0xe0042000

08000a7c <get_flash_rdp_level>:
uint8_t get_flash_rdp_level(void){
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
	uint8_t RDP_Status = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	71fb      	strb	r3, [r7, #7]
	volatile uint32_t* POB = (uint32_t* ) 0x1FFFF800;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <get_flash_rdp_level+0x24>)
 8000a88:	603b      	str	r3, [r7, #0]

	RDP_Status = (uint8_t)(*POB >> 8);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	71fb      	strb	r3, [r7, #7]
	return RDP_Status;
 8000a92:	79fb      	ldrb	r3, [r7, #7]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	1ffff800 	.word	0x1ffff800

08000aa4 <verify_address>:
uint8_t verify_address(uint32_t go_address){
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	if(go_address >= FLASH_ADDR_START && go_address <= FLASH_ADDR_END){
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000ab2:	d305      	bcc.n	8000ac0 <verify_address+0x1c>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <verify_address+0x50>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d801      	bhi.n	8000ac0 <verify_address+0x1c>
		return ADDR_VALID;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e014      	b.n	8000aea <verify_address+0x46>
	}
	else if(go_address >= SYSMEM_ADDR_START && go_address <= SYSMEM_ADDR_END){
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <verify_address+0x54>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d905      	bls.n	8000ad4 <verify_address+0x30>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <verify_address+0x58>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d801      	bhi.n	8000ad4 <verify_address+0x30>
		return ADDR_VALID;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e00a      	b.n	8000aea <verify_address+0x46>

	}
	else if(go_address >= SRAM_ADDR_START && go_address <= SRAM_ADDR_END){
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ada:	d305      	bcc.n	8000ae8 <verify_address+0x44>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f1b3 2f20 	cmp.w	r3, #536879104	; 0x20002000
 8000ae2:	d201      	bcs.n	8000ae8 <verify_address+0x44>
		return ADDR_VALID;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e000      	b.n	8000aea <verify_address+0x46>
	}
	return ADDR_INVALID;
 8000ae8:	2300      	movs	r3, #0

}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	0801ffff 	.word	0x0801ffff
 8000af8:	1fffefff 	.word	0x1fffefff
 8000afc:	1ffff7ff 	.word	0x1ffff7ff

08000b00 <erase_flash_page>:
uint8_t erase_flash_page(uint32_t page_number, uint32_t num_pages) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef erase_init;
    uint32_t page_error;

    if ((page_number * FLASH_PAGE_SIZE) >= (USER_APP_ADDRESS - FLASH_BASE_ADDRESS)) {
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	029b      	lsls	r3, r3, #10
 8000b0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b12:	d31d      	bcc.n	8000b50 <erase_flash_page+0x50>
        HAL_FLASH_Unlock();  // Unlock flash memory for writing
 8000b14:	f000 fec4 	bl	80018a0 <HAL_FLASH_Unlock>

        erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
        erase_init.PageAddress = FLASH_BASE_ADDRESS + (page_number * FLASH_PAGE_SIZE);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b22:	029b      	lsls	r3, r3, #10
 8000b24:	61bb      	str	r3, [r7, #24]
        erase_init.NbPages = num_pages;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	61fb      	str	r3, [r7, #28]

        if (HAL_FLASHEx_Erase(&erase_init, &page_error) == HAL_OK) {
 8000b2a:	f107 020c 	add.w	r2, r7, #12
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 ff9b 	bl	8001a70 <HAL_FLASHEx_Erase>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d103      	bne.n	8000b48 <erase_flash_page+0x48>
            HAL_FLASH_Lock();  // Lock flash after operation
 8000b40:	f000 fed4 	bl	80018ec <HAL_FLASH_Lock>
            return FLASH_SUCCESS;
 8000b44:	2300      	movs	r3, #0
 8000b46:	e004      	b.n	8000b52 <erase_flash_page+0x52>
        } else {
            HAL_FLASH_Lock();
 8000b48:	f000 fed0 	bl	80018ec <HAL_FLASH_Lock>
            return FLASH_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e000      	b.n	8000b52 <erase_flash_page+0x52>
        }
    }
    return FLASH_INVALID_ADDR;
 8000b50:	2302      	movs	r3, #2
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3720      	adds	r7, #32
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5e:	b672      	cpsid	i
}
 8000b60:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <Error_Handler+0x8>

08000b64 <sha256_transform>:
	0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
};

/*********************** FUNCTION DEFINITIONS ***********************/
void sha256_transform(SHA256_CTX *ctx, const BYTE data[])
{
 8000b64:	b480      	push	{r7}
 8000b66:	b0cf      	sub	sp, #316	; 0x13c
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	6018      	str	r0, [r3, #0]
 8000b6e:	463b      	mov	r3, r7
 8000b70:	6019      	str	r1, [r3, #0]
	WORD a, b, c, d, e, f, g, h, i, j, t1, t2, m[64];

	for (i = 0, j = 0; i < 16; ++i, j += 4)
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000b7e:	e031      	b.n	8000be4 <sha256_transform+0x80>
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
 8000b80:	463b      	mov	r3, r7
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b88:	4413      	add	r3, r2
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	061a      	lsls	r2, r3, #24
 8000b8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b92:	3301      	adds	r3, #1
 8000b94:	4639      	mov	r1, r7
 8000b96:	6809      	ldr	r1, [r1, #0]
 8000b98:	440b      	add	r3, r1
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	041b      	lsls	r3, r3, #16
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000ba4:	3302      	adds	r3, #2
 8000ba6:	4639      	mov	r1, r7
 8000ba8:	6809      	ldr	r1, [r1, #0]
 8000baa:	440b      	add	r3, r1
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000bb6:	3203      	adds	r2, #3
 8000bb8:	4639      	mov	r1, r7
 8000bba:	6809      	ldr	r1, [r1, #0]
 8000bbc:	440a      	add	r2, r1
 8000bbe:	7812      	ldrb	r2, [r2, #0]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f107 0308 	add.w	r3, r7, #8
 8000bc8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0, j = 0; i < 16; ++i, j += 4)
 8000bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000bda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000bde:	3304      	adds	r3, #4
 8000be0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d9c9      	bls.n	8000b80 <sha256_transform+0x1c>
	for ( ; i < 64; ++i)
 8000bec:	e057      	b.n	8000c9e <sha256_transform+0x13a>
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];
 8000bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000bf2:	1e9a      	subs	r2, r3, #2
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfc:	ea4f 4273 	mov.w	r2, r3, ror #17
 8000c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c04:	1e99      	subs	r1, r3, #2
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c0e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000c12:	405a      	eors	r2, r3
 8000c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c18:	1e99      	subs	r1, r3, #2
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c22:	0a9b      	lsrs	r3, r3, #10
 8000c24:	405a      	eors	r2, r3
 8000c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c2a:	1fd9      	subs	r1, r3, #7
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c34:	441a      	add	r2, r3
 8000c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c3a:	f1a3 010f 	sub.w	r1, r3, #15
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c46:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8000c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c4e:	f1a3 000f 	sub.w	r0, r3, #15
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000c5a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000c5e:	4059      	eors	r1, r3
 8000c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c64:	f1a3 000f 	sub.w	r0, r3, #15
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000c70:	08db      	lsrs	r3, r3, #3
 8000c72:	404b      	eors	r3, r1
 8000c74:	441a      	add	r2, r3
 8000c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c7a:	f1a3 0110 	sub.w	r1, r3, #16
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c86:	18d1      	adds	r1, r2, r3
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for ( ; i < 64; ++i)
 8000c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c98:	3301      	adds	r3, #1
 8000c9a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ca2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ca4:	d9a3      	bls.n	8000bee <sha256_transform+0x8a>

	a = ctx->state[0];
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	b = ctx->state[1];
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cb6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	c = ctx->state[2];
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	d = ctx->state[3];
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	e = ctx->state[4];
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	f = ctx->state[5];
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cde:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	g = ctx->state[6];
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ce8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	h = ctx->state[7];
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000cf2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	for (i = 0; i < 64; ++i) {
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000cfc:	e076      	b.n	8000dec <sha256_transform+0x288>
		t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
 8000cfe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d02:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000d06:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d0a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000d0e:	405a      	eors	r2, r3
 8000d10:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d14:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000d18:	405a      	eors	r2, r3
 8000d1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000d1e:	441a      	add	r2, r3
 8000d20:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8000d24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000d28:	4019      	ands	r1, r3
 8000d2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d2e:	43d8      	mvns	r0, r3
 8000d30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000d34:	4003      	ands	r3, r0
 8000d36:	404b      	eors	r3, r1
 8000d38:	441a      	add	r2, r3
 8000d3a:	4955      	ldr	r1, [pc, #340]	; (8000e90 <sha256_transform+0x32c>)
 8000d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000d40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d44:	441a      	add	r2, r3
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000d4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d52:	4413      	add	r3, r2
 8000d54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		t2 = EP0(a) + MAJ(a,b,c);
 8000d58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d5c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8000d60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d64:	ea4f 3373 	mov.w	r3, r3, ror #13
 8000d68:	405a      	eors	r2, r3
 8000d6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d6e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000d72:	405a      	eors	r2, r3
 8000d74:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8000d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d7c:	4059      	eors	r1, r3
 8000d7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d82:	4019      	ands	r1, r3
 8000d84:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d8c:	4003      	ands	r3, r0
 8000d8e:	404b      	eors	r3, r1
 8000d90:	4413      	add	r3, r2
 8000d92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		h = g;
 8000d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000d9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		g = f;
 8000d9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000da2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		f = e;
 8000da6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000daa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		e = d + t1;
 8000dae:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000db6:	4413      	add	r3, r2
 8000db8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		d = c;
 8000dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000dc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		c = b;
 8000dc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000dc8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		b = a;
 8000dcc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000dd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		a = t1 + t2;
 8000dd4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000dd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000ddc:	4413      	add	r3, r2
 8000dde:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	for (i = 0; i < 64; ++i) {
 8000de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000de6:	3301      	adds	r3, #1
 8000de8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000df0:	2b3f      	cmp	r3, #63	; 0x3f
 8000df2:	d984      	bls.n	8000cfe <sha256_transform+0x19a>
	}

	ctx->state[0] += a;
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000dfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000dfe:	441a      	add	r2, r3
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	651a      	str	r2, [r3, #80]	; 0x50
	ctx->state[1] += b;
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000e0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000e10:	441a      	add	r2, r3
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	655a      	str	r2, [r3, #84]	; 0x54
	ctx->state[2] += c;
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e22:	441a      	add	r2, r3
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	659a      	str	r2, [r3, #88]	; 0x58
	ctx->state[3] += d;
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000e34:	441a      	add	r2, r3
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	65da      	str	r2, [r3, #92]	; 0x5c
	ctx->state[4] += e;
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e42:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000e46:	441a      	add	r2, r3
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	661a      	str	r2, [r3, #96]	; 0x60
	ctx->state[5] += f;
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000e54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000e58:	441a      	add	r2, r3
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	665a      	str	r2, [r3, #100]	; 0x64
	ctx->state[6] += g;
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000e6a:	441a      	add	r2, r3
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	669a      	str	r2, [r3, #104]	; 0x68
	ctx->state[7] += h;
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000e78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000e7c:	441a      	add	r2, r3
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8000e84:	bf00      	nop
 8000e86:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	08002dcc 	.word	0x08002dcc

08000e94 <sha256_init>:

void sha256_init(SHA256_CTX *ctx)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	ctx->datalen = 0;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	641a      	str	r2, [r3, #64]	; 0x40
	ctx->bitlen = 0;
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	ctx->state[0] = 0x6a09e667;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <sha256_init+0x58>)
 8000eb4:	651a      	str	r2, [r3, #80]	; 0x50
	ctx->state[1] = 0xbb67ae85;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <sha256_init+0x5c>)
 8000eba:	655a      	str	r2, [r3, #84]	; 0x54
	ctx->state[2] = 0x3c6ef372;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <sha256_init+0x60>)
 8000ec0:	659a      	str	r2, [r3, #88]	; 0x58
	ctx->state[3] = 0xa54ff53a;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <sha256_init+0x64>)
 8000ec6:	65da      	str	r2, [r3, #92]	; 0x5c
	ctx->state[4] = 0x510e527f;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <sha256_init+0x68>)
 8000ecc:	661a      	str	r2, [r3, #96]	; 0x60
	ctx->state[5] = 0x9b05688c;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <sha256_init+0x6c>)
 8000ed2:	665a      	str	r2, [r3, #100]	; 0x64
	ctx->state[6] = 0x1f83d9ab;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <sha256_init+0x70>)
 8000ed8:	669a      	str	r2, [r3, #104]	; 0x68
	ctx->state[7] = 0x5be0cd19;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <sha256_init+0x74>)
 8000ede:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	6a09e667 	.word	0x6a09e667
 8000ef0:	bb67ae85 	.word	0xbb67ae85
 8000ef4:	3c6ef372 	.word	0x3c6ef372
 8000ef8:	a54ff53a 	.word	0xa54ff53a
 8000efc:	510e527f 	.word	0x510e527f
 8000f00:	9b05688c 	.word	0x9b05688c
 8000f04:	1f83d9ab 	.word	0x1f83d9ab
 8000f08:	5be0cd19 	.word	0x5be0cd19

08000f0c <sha256_update>:

void sha256_update(SHA256_CTX *ctx, const BYTE data[], size_t len)
{
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	WORD i;

	for (i = 0; i < len; ++i) {
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	e025      	b.n	8000f6a <sha256_update+0x5e>
		ctx->data[ctx->datalen] = data[i];
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	441a      	add	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	7811      	ldrb	r1, [r2, #0]
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	54d1      	strb	r1, [r2, r3]
		ctx->datalen++;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	641a      	str	r2, [r3, #64]	; 0x40
		if (ctx->datalen == 64) {
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	2b40      	cmp	r3, #64	; 0x40
 8000f3e:	d111      	bne.n	8000f64 <sha256_update+0x58>
			sha256_transform(ctx, ctx->data);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4619      	mov	r1, r3
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f7ff fe0d 	bl	8000b64 <sha256_transform>
			ctx->bitlen += 512;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000f50:	f512 7400 	adds.w	r4, r2, #512	; 0x200
 8000f54:	f143 0500 	adc.w	r5, r3, #0
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	e9c3 4512 	strd	r4, r5, [r3, #72]	; 0x48
			ctx->datalen = 0;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2200      	movs	r2, #0
 8000f62:	641a      	str	r2, [r3, #64]	; 0x40
	for (i = 0; i < len; ++i) {
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3301      	adds	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d3d5      	bcc.n	8000f1e <sha256_update+0x12>
		}
	}
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bdb0      	pop	{r4, r5, r7, pc}

08000f7c <sha256_final>:

void sha256_final(SHA256_CTX *ctx, BYTE hash[])
{
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
	WORD i;

	i = ctx->datalen;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	60fb      	str	r3, [r7, #12]

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	2b37      	cmp	r3, #55	; 0x37
 8000f92:	d810      	bhi.n	8000fb6 <sha256_final+0x3a>
		ctx->data[i++] = 0x80;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60fa      	str	r2, [r7, #12]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	54d1      	strb	r1, [r2, r3]
		while (i < 56)
 8000fa0:	e005      	b.n	8000fae <sha256_final+0x32>
			ctx->data[i++] = 0x00;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	60fa      	str	r2, [r7, #12]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	2100      	movs	r1, #0
 8000fac:	54d1      	strb	r1, [r2, r3]
		while (i < 56)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b37      	cmp	r3, #55	; 0x37
 8000fb2:	d9f6      	bls.n	8000fa2 <sha256_final+0x26>
 8000fb4:	e01a      	b.n	8000fec <sha256_final+0x70>
	}
	else {
		ctx->data[i++] = 0x80;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	60fa      	str	r2, [r7, #12]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	2180      	movs	r1, #128	; 0x80
 8000fc0:	54d1      	strb	r1, [r2, r3]
		while (i < 64)
 8000fc2:	e005      	b.n	8000fd0 <sha256_final+0x54>
			ctx->data[i++] = 0x00;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60fa      	str	r2, [r7, #12]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	2100      	movs	r1, #0
 8000fce:	54d1      	strb	r1, [r2, r3]
		while (i < 64)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b3f      	cmp	r3, #63	; 0x3f
 8000fd4:	d9f6      	bls.n	8000fc4 <sha256_final+0x48>
		sha256_transform(ctx, ctx->data);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fdc2 	bl	8000b64 <sha256_transform>
		memset(ctx->data, 0, 56);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2238      	movs	r2, #56	; 0x38
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fe9a 	bl	8002d20 <memset>
	}

	// Append to the padding the total message's length in bits and transform.
	ctx->bitlen += ctx->datalen * 8;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	1884      	adds	r4, r0, r2
 8001000:	eb41 0503 	adc.w	r5, r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	e9c3 4512 	strd	r4, r5, [r3, #72]	; 0x48
	ctx->data[63] = ctx->bitlen;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	ctx->data[62] = ctx->bitlen >> 8;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	0a02      	lsrs	r2, r0, #8
 8001028:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800102c:	0a0b      	lsrs	r3, r1, #8
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	ctx->data[61] = ctx->bitlen >> 16;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	0c02      	lsrs	r2, r0, #16
 8001046:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800104a:	0c0b      	lsrs	r3, r1, #16
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	ctx->data[60] = ctx->bitlen >> 24;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	0e02      	lsrs	r2, r0, #24
 8001064:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001068:	0e0b      	lsrs	r3, r1, #24
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	ctx->data[59] = ctx->bitlen >> 32;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	000a      	movs	r2, r1
 8001082:	2300      	movs	r3, #0
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	ctx->data[58] = ctx->bitlen >> 40;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	0a0a      	lsrs	r2, r1, #8
 800109c:	2300      	movs	r3, #0
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	ctx->data[57] = ctx->bitlen >> 48;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	0c0a      	lsrs	r2, r1, #16
 80010b6:	2300      	movs	r3, #0
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	ctx->data[56] = ctx->bitlen >> 56;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	f04f 0300 	mov.w	r3, #0
 80010ce:	0e0a      	lsrs	r2, r1, #24
 80010d0:	2300      	movs	r3, #0
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	sha256_transform(ctx, ctx->data);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4619      	mov	r1, r3
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fd40 	bl	8000b64 <sha256_transform>

	// Since this implementation uses little endian byte ordering and SHA uses big endian,
	// reverse all the bytes when copying the final state to the output hash.
	for (i = 0; i < 4; ++i) {
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e071      	b.n	80011ce <sha256_final+0x252>
		hash[i]      = (ctx->state[0] >> (24 - i * 8)) & 0x000000ff;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1c3 0303 	rsb	r3, r3, #3
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	fa22 f103 	lsr.w	r1, r2, r3
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	b2ca      	uxtb	r2, r1
 8001102:	701a      	strb	r2, [r3, #0]
		hash[i + 4]  = (ctx->state[1] >> (24 - i * 8)) & 0x000000ff;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f1c3 0303 	rsb	r3, r3, #3
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	fa22 f103 	lsr.w	r1, r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3304      	adds	r3, #4
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	4413      	add	r3, r2
 800111c:	b2ca      	uxtb	r2, r1
 800111e:	701a      	strb	r2, [r3, #0]
		hash[i + 8]  = (ctx->state[2] >> (24 - i * 8)) & 0x000000ff;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f1c3 0303 	rsb	r3, r3, #3
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	fa22 f103 	lsr.w	r1, r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3308      	adds	r3, #8
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	4413      	add	r3, r2
 8001138:	b2ca      	uxtb	r2, r1
 800113a:	701a      	strb	r2, [r3, #0]
		hash[i + 12] = (ctx->state[3] >> (24 - i * 8)) & 0x000000ff;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f1c3 0303 	rsb	r3, r3, #3
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	fa22 f103 	lsr.w	r1, r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	330c      	adds	r3, #12
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	4413      	add	r3, r2
 8001154:	b2ca      	uxtb	r2, r1
 8001156:	701a      	strb	r2, [r3, #0]
		hash[i + 16] = (ctx->state[4] >> (24 - i * 8)) & 0x000000ff;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f1c3 0303 	rsb	r3, r3, #3
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	fa22 f103 	lsr.w	r1, r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3310      	adds	r3, #16
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	4413      	add	r3, r2
 8001170:	b2ca      	uxtb	r2, r1
 8001172:	701a      	strb	r2, [r3, #0]
		hash[i + 20] = (ctx->state[5] >> (24 - i * 8)) & 0x000000ff;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f1c3 0303 	rsb	r3, r3, #3
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	fa22 f103 	lsr.w	r1, r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3314      	adds	r3, #20
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	4413      	add	r3, r2
 800118c:	b2ca      	uxtb	r2, r1
 800118e:	701a      	strb	r2, [r3, #0]
		hash[i + 24] = (ctx->state[6] >> (24 - i * 8)) & 0x000000ff;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f1c3 0303 	rsb	r3, r3, #3
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	fa22 f103 	lsr.w	r1, r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3318      	adds	r3, #24
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	b2ca      	uxtb	r2, r1
 80011aa:	701a      	strb	r2, [r3, #0]
		hash[i + 28] = (ctx->state[7] >> (24 - i * 8)) & 0x000000ff;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f1c3 0303 	rsb	r3, r3, #3
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	fa22 f103 	lsr.w	r1, r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	331c      	adds	r3, #28
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	b2ca      	uxtb	r2, r1
 80011c6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; ++i) {
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3301      	adds	r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d98a      	bls.n	80010ea <sha256_final+0x16e>
	}
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080011e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_MspInit+0x5c>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	4a14      	ldr	r2, [pc, #80]	; (800123c <HAL_MspInit+0x5c>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6193      	str	r3, [r2, #24]
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_MspInit+0x5c>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_MspInit+0x5c>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_MspInit+0x5c>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_MspInit+0x5c>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_MspInit+0x60>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_MspInit+0x60>)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	40021000 	.word	0x40021000
 8001240:	40010000 	.word	0x40010000

08001244 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_CRC_MspInit+0x34>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10b      	bne.n	800126e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_CRC_MspInit+0x38>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <HAL_CRC_MspInit+0x38>)
 800125c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001260:	6153      	str	r3, [r2, #20]
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_CRC_MspInit+0x38>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	40023000 	.word	0x40023000
 800127c:	40021000 	.word	0x40021000

08001280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0320 	add.w	r3, r7, #32
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a53      	ldr	r2, [pc, #332]	; (80013e8 <HAL_UART_MspInit+0x168>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d132      	bne.n	8001306 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012a0:	4b52      	ldr	r3, [pc, #328]	; (80013ec <HAL_UART_MspInit+0x16c>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a51      	ldr	r2, [pc, #324]	; (80013ec <HAL_UART_MspInit+0x16c>)
 80012a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b4f      	ldr	r3, [pc, #316]	; (80013ec <HAL_UART_MspInit+0x16c>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <HAL_UART_MspInit+0x16c>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a4b      	ldr	r2, [pc, #300]	; (80013ec <HAL_UART_MspInit+0x16c>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b49      	ldr	r3, [pc, #292]	; (80013ec <HAL_UART_MspInit+0x16c>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	4619      	mov	r1, r3
 80012e4:	4842      	ldr	r0, [pc, #264]	; (80013f0 <HAL_UART_MspInit+0x170>)
 80012e6:	f000 fc6b 	bl	8001bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 0320 	add.w	r3, r7, #32
 80012fc:	4619      	mov	r1, r3
 80012fe:	483c      	ldr	r0, [pc, #240]	; (80013f0 <HAL_UART_MspInit+0x170>)
 8001300:	f000 fc5e 	bl	8001bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001304:	e06c      	b.n	80013e0 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a3a      	ldr	r2, [pc, #232]	; (80013f4 <HAL_UART_MspInit+0x174>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d130      	bne.n	8001372 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001310:	4b36      	ldr	r3, [pc, #216]	; (80013ec <HAL_UART_MspInit+0x16c>)
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	4a35      	ldr	r2, [pc, #212]	; (80013ec <HAL_UART_MspInit+0x16c>)
 8001316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131a:	61d3      	str	r3, [r2, #28]
 800131c:	4b33      	ldr	r3, [pc, #204]	; (80013ec <HAL_UART_MspInit+0x16c>)
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_UART_MspInit+0x16c>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a2f      	ldr	r2, [pc, #188]	; (80013ec <HAL_UART_MspInit+0x16c>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_UART_MspInit+0x16c>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001340:	2304      	movs	r3, #4
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	f107 0320 	add.w	r3, r7, #32
 8001350:	4619      	mov	r1, r3
 8001352:	4827      	ldr	r0, [pc, #156]	; (80013f0 <HAL_UART_MspInit+0x170>)
 8001354:	f000 fc34 	bl	8001bc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001358:	2308      	movs	r3, #8
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	4619      	mov	r1, r3
 800136a:	4821      	ldr	r0, [pc, #132]	; (80013f0 <HAL_UART_MspInit+0x170>)
 800136c:	f000 fc28 	bl	8001bc0 <HAL_GPIO_Init>
}
 8001370:	e036      	b.n	80013e0 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <HAL_UART_MspInit+0x178>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d131      	bne.n	80013e0 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_UART_MspInit+0x16c>)
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	4a1a      	ldr	r2, [pc, #104]	; (80013ec <HAL_UART_MspInit+0x16c>)
 8001382:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001386:	61d3      	str	r3, [r2, #28]
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_UART_MspInit+0x16c>)
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_UART_MspInit+0x16c>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <HAL_UART_MspInit+0x16c>)
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_UART_MspInit+0x16c>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	4619      	mov	r1, r3
 80013c0:	480e      	ldr	r0, [pc, #56]	; (80013fc <HAL_UART_MspInit+0x17c>)
 80013c2:	f000 fbfd 	bl	8001bc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 0320 	add.w	r3, r7, #32
 80013d8:	4619      	mov	r1, r3
 80013da:	4808      	ldr	r0, [pc, #32]	; (80013fc <HAL_UART_MspInit+0x17c>)
 80013dc:	f000 fbf0 	bl	8001bc0 <HAL_GPIO_Init>
}
 80013e0:	bf00      	nop
 80013e2:	3730      	adds	r7, #48	; 0x30
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40013800 	.word	0x40013800
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010800 	.word	0x40010800
 80013f4:	40004400 	.word	0x40004400
 80013f8:	40004800 	.word	0x40004800
 80013fc:	40010c00 	.word	0x40010c00

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001446:	f000 f875 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}

0800144e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
	...

0800145c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800145c:	f7ff fff7 	bl	800144e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001460:	480b      	ldr	r0, [pc, #44]	; (8001490 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001462:	490c      	ldr	r1, [pc, #48]	; (8001494 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001464:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001468:	e002      	b.n	8001470 <LoopCopyDataInit>

0800146a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146e:	3304      	adds	r3, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001474:	d3f9      	bcc.n	800146a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001476:	4a09      	ldr	r2, [pc, #36]	; (800149c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001478:	4c09      	ldr	r4, [pc, #36]	; (80014a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800147c:	e001      	b.n	8001482 <LoopFillZerobss>

0800147e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001480:	3204      	adds	r2, #4

08001482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001484:	d3fb      	bcc.n	800147e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001486:	f001 fc19 	bl	8002cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800148a:	f7fe ff27 	bl	80002dc <main>
  bx lr
 800148e:	4770      	bx	lr
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001498:	08002f00 	.word	0x08002f00
  ldr r2, =_sbss
 800149c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80014a0:	20000220 	.word	0x20000220

080014a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC1_2_IRQHandler>
	...

080014a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_Init+0x28>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_Init+0x28>)
 80014b2:	f043 0310 	orr.w	r3, r3, #16
 80014b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f907 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	200f      	movs	r0, #15
 80014c0:	f000 f808 	bl	80014d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f7ff fe8c 	bl	80011e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40022000 	.word	0x40022000

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_InitTick+0x54>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_InitTick+0x58>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f911 	bl	800171a <HAL_SYSTICK_Config>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e00e      	b.n	8001520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d80a      	bhi.n	800151e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f000 f8e7 	bl	80016e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001514:	4a06      	ldr	r2, [pc, #24]	; (8001530 <HAL_InitTick+0x5c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	2000000c 	.word	0x2000000c
 800152c:	20000014 	.word	0x20000014
 8001530:	20000010 	.word	0x20000010

08001534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_IncTick+0x1c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_IncTick+0x20>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <HAL_IncTick+0x20>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	20000014 	.word	0x20000014
 8001554:	200001fc 	.word	0x200001fc

08001558 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b02      	ldr	r3, [pc, #8]	; (8001568 <HAL_GetTick+0x10>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	200001fc 	.word	0x200001fc

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	; (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
         );
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001698:	d301      	bcc.n	800169e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169a:	2301      	movs	r3, #1
 800169c:	e00f      	b.n	80016be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <SysTick_Config+0x40>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a6:	210f      	movs	r1, #15
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f7ff ff90 	bl	80015d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <SysTick_Config+0x40>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SysTick_Config+0x40>)
 80016b8:	2207      	movs	r2, #7
 80016ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff49 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f4:	f7ff ff5e 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 80016f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	6978      	ldr	r0, [r7, #20]
 8001700:	f7ff ff90 	bl	8001624 <NVIC_EncodePriority>
 8001704:	4602      	mov	r2, r0
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff5f 	bl	80015d0 <__NVIC_SetPriority>
}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffb0 	bl	8001688 <SysTick_Config>
 8001728:	4603      	mov	r3, r0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e00e      	b.n	8001762 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	795b      	ldrb	r3, [r3, #5]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d105      	bne.n	800175a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fd75 	bl	8001244 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800176a:	b480      	push	{r7}
 800176c:	b087      	sub	sp, #28
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2202      	movs	r2, #2
 800177e:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e00a      	b.n	800179c <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	441a      	add	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d3f0      	bcc.n	8001786 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2201      	movs	r2, #1
 80017b0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80017b2:	693b      	ldr	r3, [r7, #16]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
	...

080017c0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80017c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_FLASH_Program+0xd8>)
 80017dc:	7e1b      	ldrb	r3, [r3, #24]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d101      	bne.n	80017e6 <HAL_FLASH_Program+0x26>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e054      	b.n	8001890 <HAL_FLASH_Program+0xd0>
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <HAL_FLASH_Program+0xd8>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80017ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017f0:	f000 f8a8 	bl	8001944 <FLASH_WaitForLastOperation>
 80017f4:	4603      	mov	r3, r0
 80017f6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d144      	bne.n	8001888 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d102      	bne.n	800180a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001804:	2301      	movs	r3, #1
 8001806:	757b      	strb	r3, [r7, #21]
 8001808:	e007      	b.n	800181a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d102      	bne.n	8001816 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001810:	2302      	movs	r3, #2
 8001812:	757b      	strb	r3, [r7, #21]
 8001814:	e001      	b.n	800181a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001816:	2304      	movs	r3, #4
 8001818:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800181a:	2300      	movs	r3, #0
 800181c:	75bb      	strb	r3, [r7, #22]
 800181e:	e02d      	b.n	800187c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001820:	7dbb      	ldrb	r3, [r7, #22]
 8001822:	005a      	lsls	r2, r3, #1
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	eb02 0c03 	add.w	ip, r2, r3
 800182a:	7dbb      	ldrb	r3, [r7, #22]
 800182c:	0119      	lsls	r1, r3, #4
 800182e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001832:	f1c1 0620 	rsb	r6, r1, #32
 8001836:	f1a1 0020 	sub.w	r0, r1, #32
 800183a:	fa22 f401 	lsr.w	r4, r2, r1
 800183e:	fa03 f606 	lsl.w	r6, r3, r6
 8001842:	4334      	orrs	r4, r6
 8001844:	fa23 f000 	lsr.w	r0, r3, r0
 8001848:	4304      	orrs	r4, r0
 800184a:	fa23 f501 	lsr.w	r5, r3, r1
 800184e:	b2a3      	uxth	r3, r4
 8001850:	4619      	mov	r1, r3
 8001852:	4660      	mov	r0, ip
 8001854:	f000 f85a 	bl	800190c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001858:	f24c 3050 	movw	r0, #50000	; 0xc350
 800185c:	f000 f872 	bl	8001944 <FLASH_WaitForLastOperation>
 8001860:	4603      	mov	r3, r0
 8001862:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_FLASH_Program+0xdc>)
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	4a0c      	ldr	r2, [pc, #48]	; (800189c <HAL_FLASH_Program+0xdc>)
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d107      	bne.n	8001886 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001876:	7dbb      	ldrb	r3, [r7, #22]
 8001878:	3301      	adds	r3, #1
 800187a:	75bb      	strb	r3, [r7, #22]
 800187c:	7dba      	ldrb	r2, [r7, #22]
 800187e:	7d7b      	ldrb	r3, [r7, #21]
 8001880:	429a      	cmp	r2, r3
 8001882:	d3cd      	bcc.n	8001820 <HAL_FLASH_Program+0x60>
 8001884:	e000      	b.n	8001888 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001886:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <HAL_FLASH_Program+0xd8>)
 800188a:	2200      	movs	r2, #0
 800188c:	761a      	strb	r2, [r3, #24]

  return status;
 800188e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001890:	4618      	mov	r0, r3
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001898:	20000200 	.word	0x20000200
 800189c:	40022000 	.word	0x40022000

080018a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_FLASH_Unlock+0x40>)
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00d      	beq.n	80018d2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_FLASH_Unlock+0x40>)
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_FLASH_Unlock+0x44>)
 80018ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_FLASH_Unlock+0x40>)
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <HAL_FLASH_Unlock+0x48>)
 80018c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <HAL_FLASH_Unlock+0x40>)
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80018d2:	79fb      	ldrb	r3, [r7, #7]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40022000 	.word	0x40022000
 80018e4:	45670123 	.word	0x45670123
 80018e8:	cdef89ab 	.word	0xcdef89ab

080018ec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_FLASH_Lock+0x1c>)
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_FLASH_Lock+0x1c>)
 80018f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40022000 	.word	0x40022000

0800190c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <FLASH_Program_HalfWord+0x30>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <FLASH_Program_HalfWord+0x34>)
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	4a07      	ldr	r2, [pc, #28]	; (8001940 <FLASH_Program_HalfWord+0x34>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	887a      	ldrh	r2, [r7, #2]
 800192e:	801a      	strh	r2, [r3, #0]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000200 	.word	0x20000200
 8001940:	40022000 	.word	0x40022000

08001944 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff fe04 	bl	8001558 <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001952:	e010      	b.n	8001976 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195a:	d00c      	beq.n	8001976 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d007      	beq.n	8001972 <FLASH_WaitForLastOperation+0x2e>
 8001962:	f7ff fdf9 	bl	8001558 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	429a      	cmp	r2, r3
 8001970:	d201      	bcs.n	8001976 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e025      	b.n	80019c2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <FLASH_WaitForLastOperation+0x88>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1e8      	bne.n	8001954 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <FLASH_WaitForLastOperation+0x88>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <FLASH_WaitForLastOperation+0x88>)
 8001990:	2220      	movs	r2, #32
 8001992:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <FLASH_WaitForLastOperation+0x88>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10b      	bne.n	80019b8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <FLASH_WaitForLastOperation+0x88>)
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d105      	bne.n	80019b8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <FLASH_WaitForLastOperation+0x88>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80019b8:	f000 f80a 	bl	80019d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40022000 	.word	0x40022000

080019d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <FLASH_SetErrorCode+0x98>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <FLASH_SetErrorCode+0x9c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	4a1f      	ldr	r2, [pc, #124]	; (8001a6c <FLASH_SetErrorCode+0x9c>)
 80019f0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f043 0310 	orr.w	r3, r3, #16
 80019f8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80019fa:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <FLASH_SetErrorCode+0x98>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <FLASH_SetErrorCode+0x9c>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <FLASH_SetErrorCode+0x9c>)
 8001a10:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <FLASH_SetErrorCode+0x98>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00b      	beq.n	8001a3e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <FLASH_SetErrorCode+0x9c>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <FLASH_SetErrorCode+0x9c>)
 8001a30:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <FLASH_SetErrorCode+0x98>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <FLASH_SetErrorCode+0x98>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f240 1201 	movw	r2, #257	; 0x101
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d106      	bne.n	8001a56 <FLASH_SetErrorCode+0x86>
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <FLASH_SetErrorCode+0x98>)
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	4a06      	ldr	r2, [pc, #24]	; (8001a68 <FLASH_SetErrorCode+0x98>)
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	61d3      	str	r3, [r2, #28]
}  
 8001a54:	e002      	b.n	8001a5c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <FLASH_SetErrorCode+0x98>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	60d3      	str	r3, [r2, #12]
}  
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40022000 	.word	0x40022000
 8001a6c:	20000200 	.word	0x20000200

08001a70 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <HAL_FLASHEx_Erase+0xd0>)
 8001a84:	7e1b      	ldrb	r3, [r3, #24]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_FLASHEx_Erase+0x1e>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e053      	b.n	8001b36 <HAL_FLASHEx_Erase+0xc6>
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <HAL_FLASHEx_Erase+0xd0>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d116      	bne.n	8001aca <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001a9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001aa0:	f7ff ff50 	bl	8001944 <FLASH_WaitForLastOperation>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d141      	bne.n	8001b2e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f000 f84c 	bl	8001b48 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ab0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ab4:	f7ff ff46 	bl	8001944 <FLASH_WaitForLastOperation>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001abc:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <HAL_FLASHEx_Erase+0xd4>)
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	4a20      	ldr	r2, [pc, #128]	; (8001b44 <HAL_FLASHEx_Erase+0xd4>)
 8001ac2:	f023 0304 	bic.w	r3, r3, #4
 8001ac6:	6113      	str	r3, [r2, #16]
 8001ac8:	e031      	b.n	8001b2e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001aca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ace:	f7ff ff39 	bl	8001944 <FLASH_WaitForLastOperation>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d12a      	bne.n	8001b2e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	f04f 32ff 	mov.w	r2, #4294967295
 8001ade:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	e019      	b.n	8001b1c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001ae8:	68b8      	ldr	r0, [r7, #8]
 8001aea:	f000 f849 	bl	8001b80 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001aee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001af2:	f7ff ff27 	bl	8001944 <FLASH_WaitForLastOperation>
 8001af6:	4603      	mov	r3, r0
 8001af8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_FLASHEx_Erase+0xd4>)
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	4a11      	ldr	r2, [pc, #68]	; (8001b44 <HAL_FLASHEx_Erase+0xd4>)
 8001b00:	f023 0302 	bic.w	r3, r3, #2
 8001b04:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	601a      	str	r2, [r3, #0]
            break;
 8001b12:	e00c      	b.n	8001b2e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b1a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	029a      	lsls	r2, r3, #10
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d3dc      	bcc.n	8001ae8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <HAL_FLASHEx_Erase+0xd0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	761a      	strb	r2, [r3, #24]

  return status;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000200 	.word	0x20000200
 8001b44:	40022000 	.word	0x40022000

08001b48 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <FLASH_MassErase+0x30>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <FLASH_MassErase+0x34>)
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	4a08      	ldr	r2, [pc, #32]	; (8001b7c <FLASH_MassErase+0x34>)
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <FLASH_MassErase+0x34>)
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <FLASH_MassErase+0x34>)
 8001b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b6c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	20000200 	.word	0x20000200
 8001b7c:	40022000 	.word	0x40022000

08001b80 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <FLASH_PageErase+0x38>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <FLASH_PageErase+0x3c>)
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <FLASH_PageErase+0x3c>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001b9a:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <FLASH_PageErase+0x3c>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <FLASH_PageErase+0x3c>)
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <FLASH_PageErase+0x3c>)
 8001ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001baa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000200 	.word	0x20000200
 8001bbc:	40022000 	.word	0x40022000

08001bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b08b      	sub	sp, #44	; 0x2c
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd2:	e169      	b.n	8001ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	f040 8158 	bne.w	8001ea2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a9a      	ldr	r2, [pc, #616]	; (8001e60 <HAL_GPIO_Init+0x2a0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d05e      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001bfc:	4a98      	ldr	r2, [pc, #608]	; (8001e60 <HAL_GPIO_Init+0x2a0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d875      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c02:	4a98      	ldr	r2, [pc, #608]	; (8001e64 <HAL_GPIO_Init+0x2a4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d058      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c08:	4a96      	ldr	r2, [pc, #600]	; (8001e64 <HAL_GPIO_Init+0x2a4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d86f      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c0e:	4a96      	ldr	r2, [pc, #600]	; (8001e68 <HAL_GPIO_Init+0x2a8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d052      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c14:	4a94      	ldr	r2, [pc, #592]	; (8001e68 <HAL_GPIO_Init+0x2a8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d869      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c1a:	4a94      	ldr	r2, [pc, #592]	; (8001e6c <HAL_GPIO_Init+0x2ac>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d04c      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c20:	4a92      	ldr	r2, [pc, #584]	; (8001e6c <HAL_GPIO_Init+0x2ac>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d863      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c26:	4a92      	ldr	r2, [pc, #584]	; (8001e70 <HAL_GPIO_Init+0x2b0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d046      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c2c:	4a90      	ldr	r2, [pc, #576]	; (8001e70 <HAL_GPIO_Init+0x2b0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d85d      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c32:	2b12      	cmp	r3, #18
 8001c34:	d82a      	bhi.n	8001c8c <HAL_GPIO_Init+0xcc>
 8001c36:	2b12      	cmp	r3, #18
 8001c38:	d859      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c3a:	a201      	add	r2, pc, #4	; (adr r2, 8001c40 <HAL_GPIO_Init+0x80>)
 8001c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c40:	08001cbb 	.word	0x08001cbb
 8001c44:	08001c95 	.word	0x08001c95
 8001c48:	08001ca7 	.word	0x08001ca7
 8001c4c:	08001ce9 	.word	0x08001ce9
 8001c50:	08001cef 	.word	0x08001cef
 8001c54:	08001cef 	.word	0x08001cef
 8001c58:	08001cef 	.word	0x08001cef
 8001c5c:	08001cef 	.word	0x08001cef
 8001c60:	08001cef 	.word	0x08001cef
 8001c64:	08001cef 	.word	0x08001cef
 8001c68:	08001cef 	.word	0x08001cef
 8001c6c:	08001cef 	.word	0x08001cef
 8001c70:	08001cef 	.word	0x08001cef
 8001c74:	08001cef 	.word	0x08001cef
 8001c78:	08001cef 	.word	0x08001cef
 8001c7c:	08001cef 	.word	0x08001cef
 8001c80:	08001cef 	.word	0x08001cef
 8001c84:	08001c9d 	.word	0x08001c9d
 8001c88:	08001cb1 	.word	0x08001cb1
 8001c8c:	4a79      	ldr	r2, [pc, #484]	; (8001e74 <HAL_GPIO_Init+0x2b4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c92:	e02c      	b.n	8001cee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e029      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	623b      	str	r3, [r7, #32]
          break;
 8001ca4:	e024      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	3308      	adds	r3, #8
 8001cac:	623b      	str	r3, [r7, #32]
          break;
 8001cae:	e01f      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	330c      	adds	r3, #12
 8001cb6:	623b      	str	r3, [r7, #32]
          break;
 8001cb8:	e01a      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	623b      	str	r3, [r7, #32]
          break;
 8001cc6:	e013      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d105      	bne.n	8001cdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	611a      	str	r2, [r3, #16]
          break;
 8001cda:	e009      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cdc:	2308      	movs	r3, #8
 8001cde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	615a      	str	r2, [r3, #20]
          break;
 8001ce6:	e003      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
          break;
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          break;
 8001cee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2bff      	cmp	r3, #255	; 0xff
 8001cf4:	d801      	bhi.n	8001cfa <HAL_GPIO_Init+0x13a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	e001      	b.n	8001cfe <HAL_GPIO_Init+0x13e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2bff      	cmp	r3, #255	; 0xff
 8001d04:	d802      	bhi.n	8001d0c <HAL_GPIO_Init+0x14c>
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	e002      	b.n	8001d12 <HAL_GPIO_Init+0x152>
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	3b08      	subs	r3, #8
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	210f      	movs	r1, #15
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	401a      	ands	r2, r3
 8001d24:	6a39      	ldr	r1, [r7, #32]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 80b1 	beq.w	8001ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d40:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <HAL_GPIO_Init+0x2b8>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a4c      	ldr	r2, [pc, #304]	; (8001e78 <HAL_GPIO_Init+0x2b8>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <HAL_GPIO_Init+0x2b8>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d58:	4a48      	ldr	r2, [pc, #288]	; (8001e7c <HAL_GPIO_Init+0x2bc>)
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	220f      	movs	r2, #15
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a40      	ldr	r2, [pc, #256]	; (8001e80 <HAL_GPIO_Init+0x2c0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d013      	beq.n	8001dac <HAL_GPIO_Init+0x1ec>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3f      	ldr	r2, [pc, #252]	; (8001e84 <HAL_GPIO_Init+0x2c4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00d      	beq.n	8001da8 <HAL_GPIO_Init+0x1e8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3e      	ldr	r2, [pc, #248]	; (8001e88 <HAL_GPIO_Init+0x2c8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d007      	beq.n	8001da4 <HAL_GPIO_Init+0x1e4>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3d      	ldr	r2, [pc, #244]	; (8001e8c <HAL_GPIO_Init+0x2cc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_GPIO_Init+0x1e0>
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e006      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da0:	2304      	movs	r3, #4
 8001da2:	e004      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e002      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001dac:	2300      	movs	r3, #0
 8001dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db0:	f002 0203 	and.w	r2, r2, #3
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	4093      	lsls	r3, r2
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dbe:	492f      	ldr	r1, [pc, #188]	; (8001e7c <HAL_GPIO_Init+0x2bc>)
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	492c      	ldr	r1, [pc, #176]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001de6:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	4928      	ldr	r1, [pc, #160]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	4922      	ldr	r1, [pc, #136]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60cb      	str	r3, [r1, #12]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	491e      	ldr	r1, [pc, #120]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e28:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4918      	ldr	r1, [pc, #96]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	4914      	ldr	r1, [pc, #80]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d021      	beq.n	8001e94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	490e      	ldr	r1, [pc, #56]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
 8001e5c:	e021      	b.n	8001ea2 <HAL_GPIO_Init+0x2e2>
 8001e5e:	bf00      	nop
 8001e60:	10320000 	.word	0x10320000
 8001e64:	10310000 	.word	0x10310000
 8001e68:	10220000 	.word	0x10220000
 8001e6c:	10210000 	.word	0x10210000
 8001e70:	10120000 	.word	0x10120000
 8001e74:	10110000 	.word	0x10110000
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	40010800 	.word	0x40010800
 8001e84:	40010c00 	.word	0x40010c00
 8001e88:	40011000 	.word	0x40011000
 8001e8c:	40011400 	.word	0x40011400
 8001e90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_GPIO_Init+0x304>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	4909      	ldr	r1, [pc, #36]	; (8001ec4 <HAL_GPIO_Init+0x304>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f47f ae8e 	bne.w	8001bd4 <HAL_GPIO_Init+0x14>
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	372c      	adds	r7, #44	; 0x2c
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	887b      	ldrh	r3, [r7, #2]
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	e001      	b.n	8001eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	807b      	strh	r3, [r7, #2]
 8001f02:	4613      	mov	r3, r2
 8001f04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f06:	787b      	ldrb	r3, [r7, #1]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0c:	887a      	ldrh	r2, [r7, #2]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f12:	e003      	b.n	8001f1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	041a      	lsls	r2, r3, #16
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	611a      	str	r2, [r3, #16]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e26c      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8087 	beq.w	8002056 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f48:	4b92      	ldr	r3, [pc, #584]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d00c      	beq.n	8001f6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f54:	4b8f      	ldr	r3, [pc, #572]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d112      	bne.n	8001f86 <HAL_RCC_OscConfig+0x5e>
 8001f60:	4b8c      	ldr	r3, [pc, #560]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6c:	d10b      	bne.n	8001f86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6e:	4b89      	ldr	r3, [pc, #548]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d06c      	beq.n	8002054 <HAL_RCC_OscConfig+0x12c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d168      	bne.n	8002054 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e246      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x76>
 8001f90:	4b80      	ldr	r3, [pc, #512]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a7f      	ldr	r2, [pc, #508]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	e02e      	b.n	8001ffc <HAL_RCC_OscConfig+0xd4>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x98>
 8001fa6:	4b7b      	ldr	r3, [pc, #492]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a7a      	ldr	r2, [pc, #488]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b78      	ldr	r3, [pc, #480]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a77      	ldr	r2, [pc, #476]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e01d      	b.n	8001ffc <HAL_RCC_OscConfig+0xd4>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0xbc>
 8001fca:	4b72      	ldr	r3, [pc, #456]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a71      	ldr	r2, [pc, #452]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b6f      	ldr	r3, [pc, #444]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a6e      	ldr	r2, [pc, #440]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0xd4>
 8001fe4:	4b6b      	ldr	r3, [pc, #428]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a6a      	ldr	r2, [pc, #424]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b68      	ldr	r3, [pc, #416]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a67      	ldr	r2, [pc, #412]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d013      	beq.n	800202c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff faa8 	bl	8001558 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200c:	f7ff faa4 	bl	8001558 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	; 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e1fa      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	4b5d      	ldr	r3, [pc, #372]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0xe4>
 800202a:	e014      	b.n	8002056 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fa94 	bl	8001558 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff fa90 	bl	8001558 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e1e6      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	4b53      	ldr	r3, [pc, #332]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x10c>
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d063      	beq.n	800212a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002062:	4b4c      	ldr	r3, [pc, #304]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00b      	beq.n	8002086 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800206e:	4b49      	ldr	r3, [pc, #292]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b08      	cmp	r3, #8
 8002078:	d11c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x18c>
 800207a:	4b46      	ldr	r3, [pc, #280]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d116      	bne.n	80020b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002086:	4b43      	ldr	r3, [pc, #268]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <HAL_RCC_OscConfig+0x176>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e1ba      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209e:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4939      	ldr	r1, [pc, #228]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b2:	e03a      	b.n	800212a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020bc:	4b36      	ldr	r3, [pc, #216]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7ff fa49 	bl	8001558 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ca:	f7ff fa45 	bl	8001558 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e19b      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e8:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4927      	ldr	r1, [pc, #156]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]
 80020fc:	e015      	b.n	800212a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff fa28 	bl	8001558 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210c:	f7ff fa24 	bl	8001558 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e17a      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211e:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d03a      	beq.n	80021ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d019      	beq.n	8002172 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213e:	4b17      	ldr	r3, [pc, #92]	; (800219c <HAL_RCC_OscConfig+0x274>)
 8002140:	2201      	movs	r2, #1
 8002142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002144:	f7ff fa08 	bl	8001558 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214c:	f7ff fa04 	bl	8001558 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e15a      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800216a:	2001      	movs	r0, #1
 800216c:	f000 facc 	bl	8002708 <RCC_Delay>
 8002170:	e01c      	b.n	80021ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_RCC_OscConfig+0x274>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002178:	f7ff f9ee 	bl	8001558 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800217e:	e00f      	b.n	80021a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002180:	f7ff f9ea 	bl	8001558 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d908      	bls.n	80021a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e140      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
 8002198:	42420000 	.word	0x42420000
 800219c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	4b9e      	ldr	r3, [pc, #632]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1e9      	bne.n	8002180 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80a6 	beq.w	8002306 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021be:	4b97      	ldr	r3, [pc, #604]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10d      	bne.n	80021e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	4b94      	ldr	r3, [pc, #592]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	4a93      	ldr	r2, [pc, #588]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	61d3      	str	r3, [r2, #28]
 80021d6:	4b91      	ldr	r3, [pc, #580]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e6:	4b8e      	ldr	r3, [pc, #568]	; (8002420 <HAL_RCC_OscConfig+0x4f8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d118      	bne.n	8002224 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f2:	4b8b      	ldr	r3, [pc, #556]	; (8002420 <HAL_RCC_OscConfig+0x4f8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a8a      	ldr	r2, [pc, #552]	; (8002420 <HAL_RCC_OscConfig+0x4f8>)
 80021f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fe:	f7ff f9ab 	bl	8001558 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002206:	f7ff f9a7 	bl	8001558 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b64      	cmp	r3, #100	; 0x64
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e0fd      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	4b81      	ldr	r3, [pc, #516]	; (8002420 <HAL_RCC_OscConfig+0x4f8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x312>
 800222c:	4b7b      	ldr	r3, [pc, #492]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4a7a      	ldr	r2, [pc, #488]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6213      	str	r3, [r2, #32]
 8002238:	e02d      	b.n	8002296 <HAL_RCC_OscConfig+0x36e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x334>
 8002242:	4b76      	ldr	r3, [pc, #472]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	4a75      	ldr	r2, [pc, #468]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6213      	str	r3, [r2, #32]
 800224e:	4b73      	ldr	r3, [pc, #460]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4a72      	ldr	r2, [pc, #456]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002254:	f023 0304 	bic.w	r3, r3, #4
 8002258:	6213      	str	r3, [r2, #32]
 800225a:	e01c      	b.n	8002296 <HAL_RCC_OscConfig+0x36e>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b05      	cmp	r3, #5
 8002262:	d10c      	bne.n	800227e <HAL_RCC_OscConfig+0x356>
 8002264:	4b6d      	ldr	r3, [pc, #436]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4a6c      	ldr	r2, [pc, #432]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6213      	str	r3, [r2, #32]
 8002270:	4b6a      	ldr	r3, [pc, #424]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4a69      	ldr	r2, [pc, #420]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6213      	str	r3, [r2, #32]
 800227c:	e00b      	b.n	8002296 <HAL_RCC_OscConfig+0x36e>
 800227e:	4b67      	ldr	r3, [pc, #412]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a66      	ldr	r2, [pc, #408]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6213      	str	r3, [r2, #32]
 800228a:	4b64      	ldr	r3, [pc, #400]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4a63      	ldr	r2, [pc, #396]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002290:	f023 0304 	bic.w	r3, r3, #4
 8002294:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d015      	beq.n	80022ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229e:	f7ff f95b 	bl	8001558 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a4:	e00a      	b.n	80022bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7ff f957 	bl	8001558 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e0ab      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	4b57      	ldr	r3, [pc, #348]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0ee      	beq.n	80022a6 <HAL_RCC_OscConfig+0x37e>
 80022c8:	e014      	b.n	80022f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ca:	f7ff f945 	bl	8001558 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7ff f941 	bl	8001558 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e095      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e8:	4b4c      	ldr	r3, [pc, #304]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1ee      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d105      	bne.n	8002306 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fa:	4b48      	ldr	r3, [pc, #288]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	4a47      	ldr	r2, [pc, #284]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002304:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8081 	beq.w	8002412 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002310:	4b42      	ldr	r3, [pc, #264]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b08      	cmp	r3, #8
 800231a:	d061      	beq.n	80023e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d146      	bne.n	80023b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002324:	4b3f      	ldr	r3, [pc, #252]	; (8002424 <HAL_RCC_OscConfig+0x4fc>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7ff f915 	bl	8001558 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7ff f911 	bl	8001558 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e067      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002344:	4b35      	ldr	r3, [pc, #212]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002358:	d108      	bne.n	800236c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800235a:	4b30      	ldr	r3, [pc, #192]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	492d      	ldr	r1, [pc, #180]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a19      	ldr	r1, [r3, #32]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	430b      	orrs	r3, r1
 800237e:	4927      	ldr	r1, [pc, #156]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <HAL_RCC_OscConfig+0x4fc>)
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7ff f8e5 	bl	8001558 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002392:	f7ff f8e1 	bl	8001558 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e037      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x46a>
 80023b0:	e02f      	b.n	8002412 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b2:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <HAL_RCC_OscConfig+0x4fc>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7ff f8ce 	bl	8001558 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7ff f8ca 	bl	8001558 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e020      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x498>
 80023de:	e018      	b.n	8002412 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e013      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d106      	bne.n	800240e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	40007000 	.word	0x40007000
 8002424:	42420060 	.word	0x42420060

08002428 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0d0      	b.n	80025de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800243c:	4b6a      	ldr	r3, [pc, #424]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d910      	bls.n	800246c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b67      	ldr	r3, [pc, #412]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 0207 	bic.w	r2, r3, #7
 8002452:	4965      	ldr	r1, [pc, #404]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b63      	ldr	r3, [pc, #396]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0b8      	b.n	80025de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d020      	beq.n	80024ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002484:	4b59      	ldr	r3, [pc, #356]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a58      	ldr	r2, [pc, #352]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800248e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800249c:	4b53      	ldr	r3, [pc, #332]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a52      	ldr	r2, [pc, #328]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a8:	4b50      	ldr	r3, [pc, #320]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	494d      	ldr	r1, [pc, #308]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d040      	beq.n	8002548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d107      	bne.n	80024de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d115      	bne.n	8002506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e07f      	b.n	80025de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e073      	b.n	80025de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f6:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e06b      	b.n	80025de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002506:	4b39      	ldr	r3, [pc, #228]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f023 0203 	bic.w	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4936      	ldr	r1, [pc, #216]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002518:	f7ff f81e 	bl	8001558 <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	e00a      	b.n	8002536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002520:	f7ff f81a 	bl	8001558 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	; 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e053      	b.n	80025de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 020c 	and.w	r2, r3, #12
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	429a      	cmp	r2, r3
 8002546:	d1eb      	bne.n	8002520 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d210      	bcs.n	8002578 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 0207 	bic.w	r2, r3, #7
 800255e:	4922      	ldr	r1, [pc, #136]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002566:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d001      	beq.n	8002578 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e032      	b.n	80025de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4916      	ldr	r1, [pc, #88]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	4313      	orrs	r3, r2
 8002594:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d009      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	490e      	ldr	r1, [pc, #56]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025b6:	f000 f821 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 80025ba:	4602      	mov	r2, r0
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	490a      	ldr	r1, [pc, #40]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 80025c8:	5ccb      	ldrb	r3, [r1, r3]
 80025ca:	fa22 f303 	lsr.w	r3, r2, r3
 80025ce:	4a09      	ldr	r2, [pc, #36]	; (80025f4 <HAL_RCC_ClockConfig+0x1cc>)
 80025d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_RCC_ClockConfig+0x1d0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe ff7c 	bl	80014d4 <HAL_InitTick>

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40022000 	.word	0x40022000
 80025ec:	40021000 	.word	0x40021000
 80025f0:	08002ecc 	.word	0x08002ecc
 80025f4:	2000000c 	.word	0x2000000c
 80025f8:	20000010 	.word	0x20000010

080025fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002616:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <HAL_RCC_GetSysClockFreq+0x94>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b04      	cmp	r3, #4
 8002624:	d002      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x30>
 8002626:	2b08      	cmp	r3, #8
 8002628:	d003      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x36>
 800262a:	e027      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_RCC_GetSysClockFreq+0x98>)
 800262e:	613b      	str	r3, [r7, #16]
      break;
 8002630:	e027      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	0c9b      	lsrs	r3, r3, #18
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	4a17      	ldr	r2, [pc, #92]	; (8002698 <HAL_RCC_GetSysClockFreq+0x9c>)
 800263c:	5cd3      	ldrb	r3, [r2, r3]
 800263e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d010      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_RCC_GetSysClockFreq+0x94>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	0c5b      	lsrs	r3, r3, #17
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	4a11      	ldr	r2, [pc, #68]	; (800269c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a0d      	ldr	r2, [pc, #52]	; (8002694 <HAL_RCC_GetSysClockFreq+0x98>)
 800265e:	fb02 f203 	mul.w	r2, r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	e004      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002670:	fb02 f303 	mul.w	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	613b      	str	r3, [r7, #16]
      break;
 800267a:	e002      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RCC_GetSysClockFreq+0x98>)
 800267e:	613b      	str	r3, [r7, #16]
      break;
 8002680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002682:	693b      	ldr	r3, [r7, #16]
}
 8002684:	4618      	mov	r0, r3
 8002686:	371c      	adds	r7, #28
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	007a1200 	.word	0x007a1200
 8002698:	08002ee4 	.word	0x08002ee4
 800269c:	08002ef4 	.word	0x08002ef4
 80026a0:	003d0900 	.word	0x003d0900

080026a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a8:	4b02      	ldr	r3, [pc, #8]	; (80026b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	2000000c 	.word	0x2000000c

080026b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026bc:	f7ff fff2 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026c0:	4602      	mov	r2, r0
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	0a1b      	lsrs	r3, r3, #8
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	4903      	ldr	r1, [pc, #12]	; (80026dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ce:	5ccb      	ldrb	r3, [r1, r3]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000
 80026dc:	08002edc 	.word	0x08002edc

080026e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026e4:	f7ff ffde 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	0adb      	lsrs	r3, r3, #11
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4903      	ldr	r1, [pc, #12]	; (8002704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000
 8002704:	08002edc 	.word	0x08002edc

08002708 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002710:	4b0a      	ldr	r3, [pc, #40]	; (800273c <RCC_Delay+0x34>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <RCC_Delay+0x38>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	0a5b      	lsrs	r3, r3, #9
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002724:	bf00      	nop
  }
  while (Delay --);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1e5a      	subs	r2, r3, #1
 800272a:	60fa      	str	r2, [r7, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f9      	bne.n	8002724 <RCC_Delay+0x1c>
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	2000000c 	.word	0x2000000c
 8002740:	10624dd3 	.word	0x10624dd3

08002744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e042      	b.n	80027dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7fe fd88 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	; 0x24
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fa09 	bl	8002ba0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800279c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	; 0x28
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	4613      	mov	r3, r2
 80027f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b20      	cmp	r3, #32
 8002802:	d175      	bne.n	80028f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_UART_Transmit+0x2c>
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e06e      	b.n	80028f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2221      	movs	r2, #33	; 0x21
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002822:	f7fe fe99 	bl	8001558 <HAL_GetTick>
 8002826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	88fa      	ldrh	r2, [r7, #6]
 800282c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283c:	d108      	bne.n	8002850 <HAL_UART_Transmit+0x6c>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d104      	bne.n	8002850 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	e003      	b.n	8002858 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002858:	e02e      	b.n	80028b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2200      	movs	r2, #0
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f8df 	bl	8002a28 <UART_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e03a      	b.n	80028f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10b      	bne.n	800289a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002890:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	3302      	adds	r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	e007      	b.n	80028aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	3301      	adds	r3, #1
 80028a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1cb      	bne.n	800285a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2140      	movs	r1, #64	; 0x40
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f8ab 	bl	8002a28 <UART_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e006      	b.n	80028f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b08a      	sub	sp, #40	; 0x28
 80028fe:	af02      	add	r7, sp, #8
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	4613      	mov	r3, r2
 8002908:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b20      	cmp	r3, #32
 8002918:	f040 8081 	bne.w	8002a1e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_UART_Receive+0x2e>
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e079      	b.n	8002a20 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2222      	movs	r2, #34	; 0x22
 8002936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002940:	f7fe fe0a 	bl	8001558 <HAL_GetTick>
 8002944:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	88fa      	ldrh	r2, [r7, #6]
 800294a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	88fa      	ldrh	r2, [r7, #6]
 8002950:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295a:	d108      	bne.n	800296e <HAL_UART_Receive+0x74>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d104      	bne.n	800296e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	e003      	b.n	8002976 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002976:	e047      	b.n	8002a08 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2200      	movs	r2, #0
 8002980:	2120      	movs	r1, #32
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f850 	bl	8002a28 <UART_WaitOnFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e042      	b.n	8002a20 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10c      	bne.n	80029ba <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	3302      	adds	r3, #2
 80029b6:	61bb      	str	r3, [r7, #24]
 80029b8:	e01f      	b.n	80029fa <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c2:	d007      	beq.n	80029d4 <HAL_UART_Receive+0xda>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10a      	bne.n	80029e2 <HAL_UART_Receive+0xe8>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d106      	bne.n	80029e2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e008      	b.n	80029f4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	3301      	adds	r3, #1
 80029f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1b2      	bne.n	8002978 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e000      	b.n	8002a20 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
  }
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a38:	e03b      	b.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d037      	beq.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7fe fd89 	bl	8001558 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	6a3a      	ldr	r2, [r7, #32]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e03a      	b.n	8002ad2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d023      	beq.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b80      	cmp	r3, #128	; 0x80
 8002a6e:	d020      	beq.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b40      	cmp	r3, #64	; 0x40
 8002a74:	d01d      	beq.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d116      	bne.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f81d 	bl	8002ada <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00f      	b.n	8002ad2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4013      	ands	r3, r2
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d0b4      	beq.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b095      	sub	sp, #84	; 0x54
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	330c      	adds	r3, #12
 8002ae8:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aec:	e853 3f00 	ldrex	r3, [r3]
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002af8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	330c      	adds	r3, #12
 8002b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b02:	643a      	str	r2, [r7, #64]	; 0x40
 8002b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b0a:	e841 2300 	strex	r3, r2, [r1]
 8002b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1e5      	bne.n	8002ae2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3314      	adds	r3, #20
 8002b1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	e853 3f00 	ldrex	r3, [r3]
 8002b24:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f023 0301 	bic.w	r3, r3, #1
 8002b2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3314      	adds	r3, #20
 8002b34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3e:	e841 2300 	strex	r3, r2, [r1]
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1e5      	bne.n	8002b16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d119      	bne.n	8002b86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	330c      	adds	r3, #12
 8002b58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
 8002b60:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f023 0310 	bic.w	r3, r3, #16
 8002b68:	647b      	str	r3, [r7, #68]	; 0x44
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b72:	61ba      	str	r2, [r7, #24]
 8002b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b76:	6979      	ldr	r1, [r7, #20]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1e5      	bne.n	8002b52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b94:	bf00      	nop
 8002b96:	3754      	adds	r7, #84	; 0x54
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
	...

08002ba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002bda:	f023 030c 	bic.w	r3, r3, #12
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	430b      	orrs	r3, r1
 8002be6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a2c      	ldr	r2, [pc, #176]	; (8002cb4 <UART_SetConfig+0x114>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d103      	bne.n	8002c10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c08:	f7ff fd6a 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	e002      	b.n	8002c16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c10:	f7ff fd52 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 8002c14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009a      	lsls	r2, r3, #2
 8002c20:	441a      	add	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <UART_SetConfig+0x118>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	0119      	lsls	r1, r3, #4
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009a      	lsls	r2, r3, #2
 8002c40:	441a      	add	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <UART_SetConfig+0x118>)
 8002c4e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	2064      	movs	r0, #100	; 0x64
 8002c56:	fb00 f303 	mul.w	r3, r0, r3
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	3332      	adds	r3, #50	; 0x32
 8002c60:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <UART_SetConfig+0x118>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c6c:	4419      	add	r1, r3
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009a      	lsls	r2, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <UART_SetConfig+0x118>)
 8002c86:	fba3 0302 	umull	r0, r3, r3, r2
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	2064      	movs	r0, #100	; 0x64
 8002c8e:	fb00 f303 	mul.w	r3, r0, r3
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	3332      	adds	r3, #50	; 0x32
 8002c98:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <UART_SetConfig+0x118>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	f003 020f 	and.w	r2, r3, #15
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	440a      	add	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40013800 	.word	0x40013800
 8002cb8:	51eb851f 	.word	0x51eb851f

08002cbc <__libc_init_array>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	2600      	movs	r6, #0
 8002cc0:	4d0c      	ldr	r5, [pc, #48]	; (8002cf4 <__libc_init_array+0x38>)
 8002cc2:	4c0d      	ldr	r4, [pc, #52]	; (8002cf8 <__libc_init_array+0x3c>)
 8002cc4:	1b64      	subs	r4, r4, r5
 8002cc6:	10a4      	asrs	r4, r4, #2
 8002cc8:	42a6      	cmp	r6, r4
 8002cca:	d109      	bne.n	8002ce0 <__libc_init_array+0x24>
 8002ccc:	f000 f830 	bl	8002d30 <_init>
 8002cd0:	2600      	movs	r6, #0
 8002cd2:	4d0a      	ldr	r5, [pc, #40]	; (8002cfc <__libc_init_array+0x40>)
 8002cd4:	4c0a      	ldr	r4, [pc, #40]	; (8002d00 <__libc_init_array+0x44>)
 8002cd6:	1b64      	subs	r4, r4, r5
 8002cd8:	10a4      	asrs	r4, r4, #2
 8002cda:	42a6      	cmp	r6, r4
 8002cdc:	d105      	bne.n	8002cea <__libc_init_array+0x2e>
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
 8002ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce4:	4798      	blx	r3
 8002ce6:	3601      	adds	r6, #1
 8002ce8:	e7ee      	b.n	8002cc8 <__libc_init_array+0xc>
 8002cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cee:	4798      	blx	r3
 8002cf0:	3601      	adds	r6, #1
 8002cf2:	e7f2      	b.n	8002cda <__libc_init_array+0x1e>
 8002cf4:	08002ef8 	.word	0x08002ef8
 8002cf8:	08002ef8 	.word	0x08002ef8
 8002cfc:	08002ef8 	.word	0x08002ef8
 8002d00:	08002efc 	.word	0x08002efc

08002d04 <memcmp>:
 8002d04:	b530      	push	{r4, r5, lr}
 8002d06:	2400      	movs	r4, #0
 8002d08:	3901      	subs	r1, #1
 8002d0a:	42a2      	cmp	r2, r4
 8002d0c:	d101      	bne.n	8002d12 <memcmp+0xe>
 8002d0e:	2000      	movs	r0, #0
 8002d10:	e005      	b.n	8002d1e <memcmp+0x1a>
 8002d12:	5d03      	ldrb	r3, [r0, r4]
 8002d14:	3401      	adds	r4, #1
 8002d16:	5d0d      	ldrb	r5, [r1, r4]
 8002d18:	42ab      	cmp	r3, r5
 8002d1a:	d0f6      	beq.n	8002d0a <memcmp+0x6>
 8002d1c:	1b58      	subs	r0, r3, r5
 8002d1e:	bd30      	pop	{r4, r5, pc}

08002d20 <memset>:
 8002d20:	4603      	mov	r3, r0
 8002d22:	4402      	add	r2, r0
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d100      	bne.n	8002d2a <memset+0xa>
 8002d28:	4770      	bx	lr
 8002d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d2e:	e7f9      	b.n	8002d24 <memset+0x4>

08002d30 <_init>:
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	bf00      	nop
 8002d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d36:	bc08      	pop	{r3}
 8002d38:	469e      	mov	lr, r3
 8002d3a:	4770      	bx	lr

08002d3c <_fini>:
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	bf00      	nop
 8002d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d42:	bc08      	pop	{r3}
 8002d44:	469e      	mov	lr, r3
 8002d46:	4770      	bx	lr
