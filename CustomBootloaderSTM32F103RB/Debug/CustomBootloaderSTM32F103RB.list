
CustomBootloaderSTM32F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002440  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800254c  0800254c  0001254c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025fc  080025fc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080025fc  080025fc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025fc  080025fc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025fc  080025fc  000125fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002600  08002600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000018  0800261c  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  0800261c  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094a2  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a9a  00000000  00000000  000294e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0002af80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c10  00000000  00000000  0002bf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092cd  00000000  00000000  00042b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082409  00000000  00000000  0004be3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce246  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ff4  00000000  00000000  000ce29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002534 	.word	0x08002534

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002534 	.word	0x08002534

0800014c <bootloader_uart_read_data>:
}
void printmsg(const char *msg) {
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void bootloader_uart_read_data(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
      // Allocates at runtime
	uint8_t rcv_len = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
	while(1){
		memset(bl_rx_buffer, 0, 200);
 8000156:	22c8      	movs	r2, #200	; 0xc8
 8000158:	2100      	movs	r1, #0
 800015a:	4824      	ldr	r0, [pc, #144]	; (80001ec <bootloader_uart_read_data+0xa0>)
 800015c:	f002 f9e2 	bl	8002524 <memset>
		HAL_UART_Receive(&huart2, bl_rx_buffer, 1, HAL_MAX_DELAY);
 8000160:	f04f 33ff 	mov.w	r3, #4294967295
 8000164:	2201      	movs	r2, #1
 8000166:	4921      	ldr	r1, [pc, #132]	; (80001ec <bootloader_uart_read_data+0xa0>)
 8000168:	4821      	ldr	r0, [pc, #132]	; (80001f0 <bootloader_uart_read_data+0xa4>)
 800016a:	f001 ffd6 	bl	800211a <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0]; // extract the first byte as the length of message
 800016e:	4b1f      	ldr	r3, [pc, #124]	; (80001ec <bootloader_uart_read_data+0xa0>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(&huart2, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY); // then read the remaining of the command
 8000174:	79fb      	ldrb	r3, [r7, #7]
 8000176:	b29a      	uxth	r2, r3
 8000178:	f04f 33ff 	mov.w	r3, #4294967295
 800017c:	491d      	ldr	r1, [pc, #116]	; (80001f4 <bootloader_uart_read_data+0xa8>)
 800017e:	481c      	ldr	r0, [pc, #112]	; (80001f0 <bootloader_uart_read_data+0xa4>)
 8000180:	f001 ffcb 	bl	800211a <HAL_UART_Receive>
		switch(bl_rx_buffer[1]){ //the second byte here is the command code,
 8000184:	4b19      	ldr	r3, [pc, #100]	; (80001ec <bootloader_uart_read_data+0xa0>)
 8000186:	785b      	ldrb	r3, [r3, #1]
 8000188:	3b51      	subs	r3, #81	; 0x51
 800018a:	2b06      	cmp	r3, #6
 800018c:	d8e3      	bhi.n	8000156 <bootloader_uart_read_data+0xa>
 800018e:	a201      	add	r2, pc, #4	; (adr r2, 8000194 <bootloader_uart_read_data+0x48>)
 8000190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000194:	080001b1 	.word	0x080001b1
 8000198:	080001b9 	.word	0x080001b9
 800019c:	080001c1 	.word	0x080001c1
 80001a0:	080001c9 	.word	0x080001c9
 80001a4:	080001d1 	.word	0x080001d1
 80001a8:	080001d9 	.word	0x080001d9
 80001ac:	080001e1 	.word	0x080001e1
		case BL_GET_VER:
			bootloader_handle_getver_cmd(bl_rx_buffer);
 80001b0:	480e      	ldr	r0, [pc, #56]	; (80001ec <bootloader_uart_read_data+0xa0>)
 80001b2:	f000 f919 	bl	80003e8 <bootloader_handle_getver_cmd>
			break;
 80001b6:	e017      	b.n	80001e8 <bootloader_uart_read_data+0x9c>
		case BL_GET_HELP:
			bootloader_handle_gethelp_cmd(bl_rx_buffer);
 80001b8:	480c      	ldr	r0, [pc, #48]	; (80001ec <bootloader_uart_read_data+0xa0>)
 80001ba:	f000 f945 	bl	8000448 <bootloader_handle_gethelp_cmd>
			break;
 80001be:	e013      	b.n	80001e8 <bootloader_uart_read_data+0x9c>
		case BL_GET_CID:
			bootloader_handle_getcid_cmd(bl_rx_buffer);
 80001c0:	480a      	ldr	r0, [pc, #40]	; (80001ec <bootloader_uart_read_data+0xa0>)
 80001c2:	f000 f96f 	bl	80004a4 <bootloader_handle_getcid_cmd>
			break;
 80001c6:	e00f      	b.n	80001e8 <bootloader_uart_read_data+0x9c>
		case BL_GET_RDP_STATUS:
			bootloader_handle_getrdp_cmd(bl_rx_buffer);
 80001c8:	4808      	ldr	r0, [pc, #32]	; (80001ec <bootloader_uart_read_data+0xa0>)
 80001ca:	f000 f99d 	bl	8000508 <bootloader_handle_getrdp_cmd>
			break;
 80001ce:	e00b      	b.n	80001e8 <bootloader_uart_read_data+0x9c>
		case BL_GO_TO_ADDR:
			bootloader_handle_go_cmd(bl_rx_buffer);
 80001d0:	4806      	ldr	r0, [pc, #24]	; (80001ec <bootloader_uart_read_data+0xa0>)
 80001d2:	f000 f9c9 	bl	8000568 <bootloader_handle_go_cmd>
			break;
 80001d6:	e007      	b.n	80001e8 <bootloader_uart_read_data+0x9c>
		case BL_FLASH_ERASE:
			bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <bootloader_uart_read_data+0xa0>)
 80001da:	f000 fa4d 	bl	8000678 <bootloader_handle_flash_erase_cmd>
			break;
 80001de:	e003      	b.n	80001e8 <bootloader_uart_read_data+0x9c>
		case BL_MEM_WRITE:
			bootloader_handle_mem_write_cmd(bl_rx_buffer);
 80001e0:	4802      	ldr	r0, [pc, #8]	; (80001ec <bootloader_uart_read_data+0xa0>)
 80001e2:	f000 fa87 	bl	80006f4 <bootloader_handle_mem_write_cmd>
			break;
 80001e6:	bf00      	nop
		memset(bl_rx_buffer, 0, 200);
 80001e8:	e7b5      	b.n	8000156 <bootloader_uart_read_data+0xa>
 80001ea:	bf00      	nop
 80001ec:	20000114 	.word	0x20000114
 80001f0:	200000cc 	.word	0x200000cc
 80001f4:	20000115 	.word	0x20000115

080001f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fc:	f000 fd64 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000200:	f000 f814 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000204:	f000 f88c 	bl	8000320 <MX_GPIO_Init>
  //MX_USART1_UART_Init();
  MX_USART2_UART_Init();
 8000208:	f000 f860 	bl	80002cc <MX_USART2_UART_Init>
  //MX_USART3_UART_Init();
  MX_CRC_Init();
 800020c:	f000 f84a 	bl	80002a4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
  /* USER CODE END 2 */
  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
 8000210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <main+0x30>)
 8000216:	f001 fa67 	bl	80016e8 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d101      	bne.n	8000224 <main+0x2c>
	  //printmsg("Enter bootloader mode\n");
	  bootloader_uart_read_data();
 8000220:	f7ff ff94 	bl	800014c <bootloader_uart_read_data>

  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000224:	e7fe      	b.n	8000224 <main+0x2c>
 8000226:	bf00      	nop
 8000228:	40011000 	.word	0x40011000

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b090      	sub	sp, #64	; 0x40
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0318 	add.w	r3, r7, #24
 8000236:	2228      	movs	r2, #40	; 0x28
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f002 f972 	bl	8002524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024e:	2302      	movs	r3, #2
 8000250:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000256:	2310      	movs	r3, #16
 8000258:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025a:	2300      	movs	r3, #0
 800025c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fa70 	bl	8001748 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800026e:	f000 fbc2 	bl	80009f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000276:	2300      	movs	r3, #0
 8000278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fcdc 	bl	8001c48 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000296:	f000 fbae 	bl	80009f6 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	; 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <MX_CRC_Init+0x20>)
 80002aa:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <MX_CRC_Init+0x24>)
 80002ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80002ae:	4805      	ldr	r0, [pc, #20]	; (80002c4 <MX_CRC_Init+0x20>)
 80002b0:	f000 fe4f 	bl	8000f52 <HAL_CRC_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80002ba:	f000 fb9c 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	2000007c 	.word	0x2000007c
 80002c8:	40023000 	.word	0x40023000

080002cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002d2:	4a12      	ldr	r2, [pc, #72]	; (800031c <MX_USART2_UART_Init+0x50>)
 80002d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002d6:	4b10      	ldr	r3, [pc, #64]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002f2:	220c      	movs	r2, #12
 80002f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f6:	4b08      	ldr	r3, [pc, #32]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <MX_USART2_UART_Init+0x4c>)
 8000304:	f001 fe2e 	bl	8001f64 <HAL_UART_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800030e:	f000 fb72 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	200000cc 	.word	0x200000cc
 800031c:	40004400 	.word	0x40004400

08000320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000334:	4b29      	ldr	r3, [pc, #164]	; (80003dc <MX_GPIO_Init+0xbc>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a28      	ldr	r2, [pc, #160]	; (80003dc <MX_GPIO_Init+0xbc>)
 800033a:	f043 0310 	orr.w	r3, r3, #16
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b26      	ldr	r3, [pc, #152]	; (80003dc <MX_GPIO_Init+0xbc>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0310 	and.w	r3, r3, #16
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034c:	4b23      	ldr	r3, [pc, #140]	; (80003dc <MX_GPIO_Init+0xbc>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a22      	ldr	r2, [pc, #136]	; (80003dc <MX_GPIO_Init+0xbc>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b20      	ldr	r3, [pc, #128]	; (80003dc <MX_GPIO_Init+0xbc>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0304 	and.w	r3, r3, #4
 8000360:	60bb      	str	r3, [r7, #8]
 8000362:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000364:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <MX_GPIO_Init+0xbc>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a1c      	ldr	r2, [pc, #112]	; (80003dc <MX_GPIO_Init+0xbc>)
 800036a:	f043 0308 	orr.w	r3, r3, #8
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <MX_GPIO_Init+0xbc>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0308 	and.w	r3, r3, #8
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	2120      	movs	r1, #32
 8000380:	4817      	ldr	r0, [pc, #92]	; (80003e0 <MX_GPIO_Init+0xc0>)
 8000382:	f001 f9c8 	bl	8001716 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800038a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000390:	2301      	movs	r3, #1
 8000392:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	4619      	mov	r1, r3
 800039a:	4812      	ldr	r0, [pc, #72]	; (80003e4 <MX_GPIO_Init+0xc4>)
 800039c:	f001 f820 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003a0:	2301      	movs	r3, #1
 80003a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003a8:	2301      	movs	r3, #1
 80003aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ac:	f107 0310 	add.w	r3, r7, #16
 80003b0:	4619      	mov	r1, r3
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <MX_GPIO_Init+0xc0>)
 80003b4:	f001 f814 	bl	80013e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003b8:	2320      	movs	r3, #32
 80003ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	2301      	movs	r3, #1
 80003be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c4:	2302      	movs	r3, #2
 80003c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	4619      	mov	r1, r3
 80003ce:	4804      	ldr	r0, [pc, #16]	; (80003e0 <MX_GPIO_Init+0xc0>)
 80003d0:	f001 f806 	bl	80013e0 <HAL_GPIO_Init>

}
 80003d4:	bf00      	nop
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010800 	.word	0x40010800
 80003e4:	40011000 	.word	0x40011000

080003e8 <bootloader_handle_getver_cmd>:
/* USER CODE BEGIN 4 */
void  bootloader_uart_read_data(void);
void bootloader_jump_to_user_app(void);

void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
    uint8_t bl_version;

    //printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\n");

    uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	3301      	adds	r3, #1
 80003f6:	617b      	str	r3, [r7, #20]
    uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len - 4));
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	3b04      	subs	r3, #4
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	4413      	add	r3, r2
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	613b      	str	r3, [r7, #16]

    if (!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	3b04      	subs	r3, #4
 8000408:	693a      	ldr	r2, [r7, #16]
 800040a:	4619      	mov	r1, r3
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f000 fa21 	bl	8000854 <bootloader_verify_crc>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <bootloader_handle_getver_cmd+0x54>
    {
        //printmsg("BL_DEBUG_MSG:checksum success !!\n");

        // Send ACK first
        bootloader_send_ack(bl_rx_buffer[0], 1);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2101      	movs	r1, #1
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f9ec 	bl	80007fc <bootloader_send_ack>

        // Retrieve bootloader version
        bl_version = get_bootloader_version();
 8000424:	f000 fa4a 	bl	80008bc <get_bootloader_version>
 8000428:	4603      	mov	r3, r0
 800042a:	b2db      	uxtb	r3, r3
 800042c:	73fb      	strb	r3, [r7, #15]
        // Send the version
        bootloader_uart_write_data(&bl_version, 1);
 800042e:	f107 030f 	add.w	r3, r7, #15
 8000432:	2101      	movs	r1, #1
 8000434:	4618      	mov	r0, r3
 8000436:	f000 fa49 	bl	80008cc <bootloader_uart_write_data>
    else
    {
        //printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
    }
}
 800043a:	e001      	b.n	8000440 <bootloader_handle_getver_cmd+0x58>
        bootloader_send_nack();
 800043c:	f000 f9f8 	bl	8000830 <bootloader_send_nack>
}
 8000440:	bf00      	nop
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <bootloader_handle_gethelp_cmd>:

void bootloader_handle_gethelp_cmd(uint8_t *pBuffer){
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
    uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <bootloader_handle_gethelp_cmd+0x54>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	3301      	adds	r3, #1
 8000456:	60fb      	str	r3, [r7, #12]
    uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len - 4));
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	3b04      	subs	r3, #4
 800045c:	4a0f      	ldr	r2, [pc, #60]	; (800049c <bootloader_handle_gethelp_cmd+0x54>)
 800045e:	4413      	add	r3, r2
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	60bb      	str	r3, [r7, #8]

    if (!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3b04      	subs	r3, #4
 8000468:	68ba      	ldr	r2, [r7, #8]
 800046a:	4619      	mov	r1, r3
 800046c:	480b      	ldr	r0, [pc, #44]	; (800049c <bootloader_handle_gethelp_cmd+0x54>)
 800046e:	f000 f9f1 	bl	8000854 <bootloader_verify_crc>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d10a      	bne.n	800048e <bootloader_handle_gethelp_cmd+0x46>
    {
        // Send ACK first
        bootloader_send_ack(pBuffer[0], sizeof(help_command));
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	210c      	movs	r1, #12
 800047e:	4618      	mov	r0, r3
 8000480:	f000 f9bc 	bl	80007fc <bootloader_send_ack>
        // Send the version
        bootloader_uart_write_data(help_command, sizeof(help_command));
 8000484:	210c      	movs	r1, #12
 8000486:	4806      	ldr	r0, [pc, #24]	; (80004a0 <bootloader_handle_gethelp_cmd+0x58>)
 8000488:	f000 fa20 	bl	80008cc <bootloader_uart_write_data>
    else
    {
        //printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
    }
}
 800048c:	e001      	b.n	8000492 <bootloader_handle_gethelp_cmd+0x4a>
        bootloader_send_nack();
 800048e:	f000 f9cf 	bl	8000830 <bootloader_send_nack>
}
 8000492:	bf00      	nop
 8000494:	3710      	adds	r7, #16
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000114 	.word	0x20000114
 80004a0:	20000000 	.word	0x20000000

080004a4 <bootloader_handle_getcid_cmd>:
void bootloader_handle_getcid_cmd(uint8_t *pBuffer){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
    uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <bootloader_handle_getcid_cmd+0x60>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	3301      	adds	r3, #1
 80004b2:	617b      	str	r3, [r7, #20]
    uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len - 4));
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	3b04      	subs	r3, #4
 80004b8:	4a12      	ldr	r2, [pc, #72]	; (8000504 <bootloader_handle_getcid_cmd+0x60>)
 80004ba:	4413      	add	r3, r2
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	613b      	str	r3, [r7, #16]
    uint16_t cid = get_mcu_chip_id();
 80004c0:	f000 fa18 	bl	80008f4 <get_mcu_chip_id>
 80004c4:	4603      	mov	r3, r0
 80004c6:	81fb      	strh	r3, [r7, #14]
    if (!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	3b04      	subs	r3, #4
 80004cc:	693a      	ldr	r2, [r7, #16]
 80004ce:	4619      	mov	r1, r3
 80004d0:	480c      	ldr	r0, [pc, #48]	; (8000504 <bootloader_handle_getcid_cmd+0x60>)
 80004d2:	f000 f9bf 	bl	8000854 <bootloader_verify_crc>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d10c      	bne.n	80004f6 <bootloader_handle_getcid_cmd+0x52>
    {
        // Send ACK first
        bootloader_send_ack(pBuffer[0], 2);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2102      	movs	r1, #2
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f98a 	bl	80007fc <bootloader_send_ack>
        // Send the version
        bootloader_uart_write_data((uint8_t*)&cid, 2);
 80004e8:	f107 030e 	add.w	r3, r7, #14
 80004ec:	2102      	movs	r1, #2
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f9ec 	bl	80008cc <bootloader_uart_write_data>
    else
    {
        //printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
    }
}
 80004f4:	e001      	b.n	80004fa <bootloader_handle_getcid_cmd+0x56>
        bootloader_send_nack();
 80004f6:	f000 f99b 	bl	8000830 <bootloader_send_nack>
}
 80004fa:	bf00      	nop
 80004fc:	3718      	adds	r7, #24
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000114 	.word	0x20000114

08000508 <bootloader_handle_getrdp_cmd>:
void bootloader_handle_getrdp_cmd(uint8_t *pBuffer){
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]

    uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <bootloader_handle_getrdp_cmd+0x5c>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	3301      	adds	r3, #1
 8000516:	617b      	str	r3, [r7, #20]
    uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len - 4));
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	3b04      	subs	r3, #4
 800051c:	4a11      	ldr	r2, [pc, #68]	; (8000564 <bootloader_handle_getrdp_cmd+0x5c>)
 800051e:	4413      	add	r3, r2
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	613b      	str	r3, [r7, #16]
    uint16_t RDP_value = get_flash_rdp_level();
 8000524:	f000 f9f8 	bl	8000918 <get_flash_rdp_level>
 8000528:	4603      	mov	r3, r0
 800052a:	81fb      	strh	r3, [r7, #14]
    if (!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc))
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	3b04      	subs	r3, #4
 8000530:	693a      	ldr	r2, [r7, #16]
 8000532:	4619      	mov	r1, r3
 8000534:	480b      	ldr	r0, [pc, #44]	; (8000564 <bootloader_handle_getrdp_cmd+0x5c>)
 8000536:	f000 f98d 	bl	8000854 <bootloader_verify_crc>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d10b      	bne.n	8000558 <bootloader_handle_getrdp_cmd+0x50>
    {
        // Send ACK first
    	//printmsg("BL_DEBUG_MSG:checksum success !!\n");
        bootloader_send_ack(pBuffer[0], 2);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2102      	movs	r1, #2
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f958 	bl	80007fc <bootloader_send_ack>
        // Send the version
        bootloader_uart_write_data(RDP_value, 2);
 800054c:	89fb      	ldrh	r3, [r7, #14]
 800054e:	2102      	movs	r1, #2
 8000550:	4618      	mov	r0, r3
 8000552:	f000 f9bb 	bl	80008cc <bootloader_uart_write_data>
    else
    {
        //printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
    }
}
 8000556:	e001      	b.n	800055c <bootloader_handle_getrdp_cmd+0x54>
        bootloader_send_nack();
 8000558:	f000 f96a 	bl	8000830 <bootloader_send_nack>
}
 800055c:	bf00      	nop
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000114 	.word	0x20000114

08000568 <bootloader_handle_go_cmd>:
//	}
//	else{
//		bootloader_send_nack();
//	}
//}
void bootloader_handle_go_cmd(uint8_t *pBuffer) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
    uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000570:	4b3a      	ldr	r3, [pc, #232]	; (800065c <bootloader_handle_go_cmd+0xf4>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t host_crc = *((uint32_t*)(bl_rx_buffer + command_packet_len - 4));
 8000578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057a:	3b04      	subs	r3, #4
 800057c:	4a37      	ldr	r2, [pc, #220]	; (800065c <bootloader_handle_go_cmd+0xf4>)
 800057e:	4413      	add	r3, r2
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	623b      	str	r3, [r7, #32]

    if (!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc)) {
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	3b04      	subs	r3, #4
 8000588:	6a3a      	ldr	r2, [r7, #32]
 800058a:	4619      	mov	r1, r3
 800058c:	4833      	ldr	r0, [pc, #204]	; (800065c <bootloader_handle_go_cmd+0xf4>)
 800058e:	f000 f961 	bl	8000854 <bootloader_verify_crc>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d15b      	bne.n	8000650 <bootloader_handle_go_cmd+0xe8>
        bootloader_send_ack(pBuffer[0], 1);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2101      	movs	r1, #1
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f92c 	bl	80007fc <bootloader_send_ack>

        uint32_t goToAddress = *(uint32_t*)&pBuffer[2]; // Extract jump address
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80005aa:	61fb      	str	r3, [r7, #28]

        if (verify_address(goToAddress) == ADDR_VALID) {
 80005ac:	69f8      	ldr	r0, [r7, #28]
 80005ae:	f000 f9c7 	bl	8000940 <verify_address>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d140      	bne.n	800063a <bootloader_handle_go_cmd+0xd2>
            uint8_t addr_status = ADDR_VALID;
 80005b8:	2301      	movs	r3, #1
 80005ba:	72fb      	strb	r3, [r7, #11]
            HAL_UART_Transmit(&huart2, &addr_status, 1, HAL_MAX_DELAY);
 80005bc:	f107 010b 	add.w	r1, r7, #11
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	2201      	movs	r2, #1
 80005c6:	4826      	ldr	r0, [pc, #152]	; (8000660 <bootloader_handle_go_cmd+0xf8>)
 80005c8:	f001 fd1c 	bl	8002004 <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	bf00      	nop

            __disable_irq();

            uint32_t app_msp = *(volatile uint32_t*)goToAddress;  // Stack Pointer
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	61bb      	str	r3, [r7, #24]
            uint32_t app_reset_handler = *(volatile uint32_t*)(goToAddress + 4);  // Reset Handler
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	3304      	adds	r3, #4
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	617b      	str	r3, [r7, #20]

            if (app_msp < 0x20000000 || app_msp > 0x2001FFFF) {
 80005de:	69bb      	ldr	r3, [r7, #24]
 80005e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005e4:	d303      	bcc.n	80005ee <bootloader_handle_go_cmd+0x86>
 80005e6:	69bb      	ldr	r3, [r7, #24]
 80005e8:	4a1e      	ldr	r2, [pc, #120]	; (8000664 <bootloader_handle_go_cmd+0xfc>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d907      	bls.n	80005fe <bootloader_handle_go_cmd+0x96>
                HAL_UART_Transmit(&huart2, (uint8_t*)"Invalid MSP\r\n", 15, HAL_MAX_DELAY);
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	220f      	movs	r2, #15
 80005f4:	491c      	ldr	r1, [pc, #112]	; (8000668 <bootloader_handle_go_cmd+0x100>)
 80005f6:	481a      	ldr	r0, [pc, #104]	; (8000660 <bootloader_handle_go_cmd+0xf8>)
 80005f8:	f001 fd04 	bl	8002004 <HAL_UART_Transmit>
                return;
 80005fc:	e02a      	b.n	8000654 <bootloader_handle_go_cmd+0xec>
            }

            if (app_reset_handler < 0x08000000 || app_reset_handler > 0x08010000) {
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000604:	d303      	bcc.n	800060e <bootloader_handle_go_cmd+0xa6>
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	4a18      	ldr	r2, [pc, #96]	; (800066c <bootloader_handle_go_cmd+0x104>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d907      	bls.n	800061e <bootloader_handle_go_cmd+0xb6>
                HAL_UART_Transmit(&huart2, (uint8_t*)"Invalid reset handler\r\n", 25, HAL_MAX_DELAY);
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	2219      	movs	r2, #25
 8000614:	4916      	ldr	r1, [pc, #88]	; (8000670 <bootloader_handle_go_cmd+0x108>)
 8000616:	4812      	ldr	r0, [pc, #72]	; (8000660 <bootloader_handle_go_cmd+0xf8>)
 8000618:	f001 fcf4 	bl	8002004 <HAL_UART_Transmit>
                return;
 800061c:	e01a      	b.n	8000654 <bootloader_handle_go_cmd+0xec>
 800061e:	69bb      	ldr	r3, [r7, #24]
 8000620:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	f383 8808 	msr	MSP, r3
}
 8000628:	bf00      	nop
            }
            __set_MSP(app_msp);  // Set new stack pointer
            SCB->VTOR = goToAddress;  // Set new vector table
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <bootloader_handle_go_cmd+0x10c>)
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	6093      	str	r3, [r2, #8]

            // Function pointer to application reset handler
            void (*Jump_To_APP)(void) = (void (*)(void))app_reset_handler;
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	613b      	str	r3, [r7, #16]

            Jump_To_APP();  // Jump to application
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	4798      	blx	r3
 8000638:	e00c      	b.n	8000654 <bootloader_handle_go_cmd+0xec>
        } else {
            uint8_t addr_status = ADDR_INVALID;
 800063a:	2300      	movs	r3, #0
 800063c:	72bb      	strb	r3, [r7, #10]
            HAL_UART_Transmit(&huart2, &addr_status, 1, HAL_MAX_DELAY);
 800063e:	f107 010a 	add.w	r1, r7, #10
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	2201      	movs	r2, #1
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <bootloader_handle_go_cmd+0xf8>)
 800064a:	f001 fcdb 	bl	8002004 <HAL_UART_Transmit>
 800064e:	e001      	b.n	8000654 <bootloader_handle_go_cmd+0xec>
        }
    } else {
        bootloader_send_nack();
 8000650:	f000 f8ee 	bl	8000830 <bootloader_send_nack>
    }
}
 8000654:	3728      	adds	r7, #40	; 0x28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000114 	.word	0x20000114
 8000660:	200000cc 	.word	0x200000cc
 8000664:	2001ffff 	.word	0x2001ffff
 8000668:	080025a8 	.word	0x080025a8
 800066c:	08010000 	.word	0x08010000
 8000670:	080025b8 	.word	0x080025b8
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <bootloader_handle_flash_erase_cmd>:
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    uint32_t command_packet_len = pBuffer[0] + 1;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
    uint32_t host_crc = *((uint32_t *)(pBuffer + command_packet_len - 4));
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	3b04      	subs	r3, #4
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	613b      	str	r3, [r7, #16]

    if (!bootloader_verify_crc(pBuffer, command_packet_len - 4, host_crc)) {
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3b04      	subs	r3, #4
 8000698:	693a      	ldr	r2, [r7, #16]
 800069a:	4619      	mov	r1, r3
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 f8d9 	bl	8000854 <bootloader_verify_crc>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d11c      	bne.n	80006e2 <bootloader_handle_flash_erase_cmd+0x6a>
        uint8_t page_number = pBuffer[2];  // Start page number
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	789b      	ldrb	r3, [r3, #2]
 80006ac:	73fb      	strb	r3, [r7, #15]
        uint8_t num_pages = pBuffer[3];    // Number of pages to erase
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78db      	ldrb	r3, [r3, #3]
 80006b2:	73bb      	strb	r3, [r7, #14]

        bootloader_send_ack(pBuffer[0], 1);  // Send ACK first
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2101      	movs	r1, #1
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f89e 	bl	80007fc <bootloader_send_ack>
        uint8_t erase_status = erase_flash_page(page_number, num_pages);
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f968 	bl	800099c <erase_flash_page>
 80006cc:	4603      	mov	r3, r0
 80006ce:	737b      	strb	r3, [r7, #13]
        HAL_UART_Transmit(&huart2, &erase_status, 1, HAL_MAX_DELAY);
 80006d0:	f107 010d 	add.w	r1, r7, #13
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	2201      	movs	r2, #1
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <bootloader_handle_flash_erase_cmd+0x78>)
 80006dc:	f001 fc92 	bl	8002004 <HAL_UART_Transmit>
    } else {
        bootloader_send_nack();
    }
}
 80006e0:	e001      	b.n	80006e6 <bootloader_handle_flash_erase_cmd+0x6e>
        bootloader_send_nack();
 80006e2:	f000 f8a5 	bl	8000830 <bootloader_send_nack>
}
 80006e6:	bf00      	nop
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000cc 	.word	0x200000cc

080006f4 <bootloader_handle_mem_write_cmd>:
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 80006fc:	2300      	movs	r3, #0
 80006fe:	72fb      	strb	r3, [r7, #11]
    uint8_t Loc_u8Len = pBuffer[0];
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	75fb      	strb	r3, [r7, #23]
    uint8_t Loc_u8PayLoadLen = pBuffer[6];
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	799b      	ldrb	r3, [r3, #6]
 800070a:	75bb      	strb	r3, [r7, #22]
    uint32_t Loc_u32MemAddress = (*(uint32_t*)(&pBuffer[2]));
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000712:	613b      	str	r3, [r7, #16]

    // Length of the full command packet
    uint32_t Loc_u32CommandBacketLen = pBuffer[0] + 1;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	60fb      	str	r3, [r7, #12]

        bootloader_send_ack(pBuffer[0], 1);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2101      	movs	r1, #1
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f86a 	bl	80007fc <bootloader_send_ack>

        if (verify_address(Loc_u32MemAddress) == ADDR_VALID)
 8000728:	6938      	ldr	r0, [r7, #16]
 800072a:	f000 f909 	bl	8000940 <verify_address>
 800072e:	4603      	mov	r3, r0
 8000730:	2b01      	cmp	r3, #1
 8000732:	d111      	bne.n	8000758 <bootloader_handle_mem_write_cmd+0x64>
        {

        	status = execute_mem_write(&pBuffer[7], Loc_u32MemAddress, Loc_u8PayLoadLen);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3307      	adds	r3, #7
 8000738:	7dba      	ldrb	r2, [r7, #22]
 800073a:	6939      	ldr	r1, [r7, #16]
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f81b 	bl	8000778 <execute_mem_write>
 8000742:	4603      	mov	r3, r0
 8000744:	72fb      	strb	r3, [r7, #11]
            HAL_UART_Transmit(&huart2, (uint8_t*)&status, 1, HAL_MAX_DELAY);
 8000746:	f107 010b 	add.w	r1, r7, #11
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	2201      	movs	r2, #1
 8000750:	4808      	ldr	r0, [pc, #32]	; (8000774 <bootloader_handle_mem_write_cmd+0x80>)
 8000752:	f001 fc57 	bl	8002004 <HAL_UART_Transmit>
        	status = ADDR_INVALID;
            HAL_UART_Transmit(&huart2, (uint8_t*)&status, 1, HAL_MAX_DELAY);
        }


}
 8000756:	e009      	b.n	800076c <bootloader_handle_mem_write_cmd+0x78>
        	status = ADDR_INVALID;
 8000758:	2300      	movs	r3, #0
 800075a:	72fb      	strb	r3, [r7, #11]
            HAL_UART_Transmit(&huart2, (uint8_t*)&status, 1, HAL_MAX_DELAY);
 800075c:	f107 010b 	add.w	r1, r7, #11
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	2201      	movs	r2, #1
 8000766:	4803      	ldr	r0, [pc, #12]	; (8000774 <bootloader_handle_mem_write_cmd+0x80>)
 8000768:	f001 fc4c 	bl	8002004 <HAL_UART_Transmit>
}
 800076c:	bf00      	nop
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000cc 	.word	0x200000cc

08000778 <execute_mem_write>:

/*
 * Helper functions
 */
uint8_t execute_mem_write(uint8_t *dBuffer, uint32_t Cpy_u32MemAddr, uint32_t Cpy_u32Len)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
    uint8_t Loc_u8Status = HAL_OK;
 8000784:	2300      	movs	r3, #0
 8000786:	77fb      	strb	r3, [r7, #31]
    HAL_FLASH_Unlock();
 8000788:	f000 fc9a 	bl	80010c0 <HAL_FLASH_Unlock>

    // Ensure memory address is aligned to 16-bit (half-word)
    if (Cpy_u32MemAddr % 2 != 0) {
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <execute_mem_write+0x22>
        return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e02b      	b.n	80007f2 <execute_mem_write+0x7a>
    }

    for (uint32_t i = 0; i < Cpy_u32Len; i += 2) // Write 2 bytes at a time
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	e01f      	b.n	80007e0 <execute_mem_write+0x68>
    {
        uint16_t data = (dBuffer[i+1] << 8) | dBuffer[i];  // Combine 2 bytes
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	3301      	adds	r3, #1
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	021b      	lsls	r3, r3, #8
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	68f9      	ldr	r1, [r7, #12]
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	440b      	add	r3, r1
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	82fb      	strh	r3, [r7, #22]
        Loc_u8Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Cpy_u32MemAddr + i, data);
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	18d1      	adds	r1, r2, r3
 80007c4:	8afa      	ldrh	r2, [r7, #22]
 80007c6:	f04f 0300 	mov.w	r3, #0
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 fc08 	bl	8000fe0 <HAL_FLASH_Program>
 80007d0:	4603      	mov	r3, r0
 80007d2:	77fb      	strb	r3, [r7, #31]

        if (Loc_u8Status != HAL_OK) {
 80007d4:	7ffb      	ldrb	r3, [r7, #31]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d107      	bne.n	80007ea <execute_mem_write+0x72>
    for (uint32_t i = 0; i < Cpy_u32Len; i += 2) // Write 2 bytes at a time
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	3302      	adds	r3, #2
 80007de:	61bb      	str	r3, [r7, #24]
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d3db      	bcc.n	80007a0 <execute_mem_write+0x28>
 80007e8:	e000      	b.n	80007ec <execute_mem_write+0x74>
            break; // Stop on error
 80007ea:	bf00      	nop
        }
    }

    HAL_FLASH_Lock();
 80007ec:	f000 fc8e 	bl	800110c <HAL_FLASH_Lock>
    return Loc_u8Status;
 80007f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <bootloader_send_ack>:

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	460a      	mov	r2, r1
 8000806:	71fb      	strb	r3, [r7, #7]
 8000808:	4613      	mov	r3, r2
 800080a:	71bb      	strb	r3, [r7, #6]
	 //here we send 2 byte.. first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 800080c:	23a5      	movs	r3, #165	; 0xa5
 800080e:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart2,ack_buf,2,HAL_MAX_DELAY);
 8000814:	f107 010c 	add.w	r1, r7, #12
 8000818:	f04f 33ff 	mov.w	r3, #4294967295
 800081c:	2202      	movs	r2, #2
 800081e:	4803      	ldr	r0, [pc, #12]	; (800082c <bootloader_send_ack+0x30>)
 8000820:	f001 fbf0 	bl	8002004 <HAL_UART_Transmit>

}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000cc 	.word	0x200000cc

08000830 <bootloader_send_nack>:
void bootloader_send_nack(void){
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000836:	237f      	movs	r3, #127	; 0x7f
 8000838:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2,&nack,1,HAL_MAX_DELAY);
 800083a:	1df9      	adds	r1, r7, #7
 800083c:	f04f 33ff 	mov.w	r3, #4294967295
 8000840:	2201      	movs	r2, #1
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <bootloader_send_nack+0x20>)
 8000844:	f001 fbde 	bl	8002004 <HAL_UART_Transmit>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000cc 	.word	0x200000cc

08000854 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
    uint32_t uwCRCValue=0xff;
 8000860:	23ff      	movs	r3, #255	; 0xff
 8000862:	61fb      	str	r3, [r7, #28]

    for (uint32_t i=0 ; i < len ; i++)
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	e00f      	b.n	800088a <bootloader_verify_crc+0x36>
	{
        uint32_t i_data = pData[i];
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	617b      	str	r3, [r7, #20]
        uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2201      	movs	r2, #1
 800087a:	4619      	mov	r1, r3
 800087c:	480e      	ldr	r0, [pc, #56]	; (80008b8 <bootloader_verify_crc+0x64>)
 800087e:	f000 fb84 	bl	8000f8a <HAL_CRC_Accumulate>
 8000882:	61f8      	str	r0, [r7, #28]
    for (uint32_t i=0 ; i < len ; i++)
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	3301      	adds	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3eb      	bcc.n	800086a <bootloader_verify_crc+0x16>
	}

	 /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(&hcrc);
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <bootloader_verify_crc+0x64>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	689a      	ldr	r2, [r3, #8]
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <bootloader_verify_crc+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f042 0201 	orr.w	r2, r2, #1
 80008a0:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 80008a2:	69fa      	ldr	r2, [r7, #28]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d101      	bne.n	80008ae <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e000      	b.n	80008b0 <bootloader_verify_crc+0x5c>
	}

	return VERIFY_CRC_FAIL;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000007c 	.word	0x2000007c

080008bc <get_bootloader_version>:
uint32_t get_bootloader_version(void){
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
	return (uint32_t)BL_VERSION;
 80008c0:	2310      	movs	r3, #16
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
	...

080008cc <bootloader_uart_write_data>:
/* This function writes data in to C_UART */
void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
    //Function used to send data from bootloader to Host
	HAL_UART_Transmit(&huart2 ,pBuffer,len,HAL_MAX_DELAY);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	b29a      	uxth	r2, r3
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <bootloader_uart_write_data+0x24>)
 80008e2:	f001 fb8f 	bl	8002004 <HAL_UART_Transmit>

}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000cc 	.word	0x200000cc

080008f4 <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(void){
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <get_mcu_chip_id+0x20>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000904:	80fb      	strh	r3, [r7, #6]
	return cid;
 8000906:	88fb      	ldrh	r3, [r7, #6]
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e0042000 	.word	0xe0042000

08000918 <get_flash_rdp_level>:
uint8_t get_flash_rdp_level(void){
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
	uint8_t RDP_Status = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	71fb      	strb	r3, [r7, #7]
	volatile uint32_t* POB = (uint32_t* ) 0x1FFFF800;
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <get_flash_rdp_level+0x24>)
 8000924:	603b      	str	r3, [r7, #0]

	RDP_Status = (uint8_t)(*POB >> 8);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	0a1b      	lsrs	r3, r3, #8
 800092c:	71fb      	strb	r3, [r7, #7]
	return RDP_Status;
 800092e:	79fb      	ldrb	r3, [r7, #7]
}
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	1ffff800 	.word	0x1ffff800

08000940 <verify_address>:
uint8_t verify_address(uint32_t go_address){
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	if(go_address >= FLASH_ADDR_START && go_address <= FLASH_ADDR_END){
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800094e:	d305      	bcc.n	800095c <verify_address+0x1c>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <verify_address+0x50>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d801      	bhi.n	800095c <verify_address+0x1c>
		return ADDR_VALID;
 8000958:	2301      	movs	r3, #1
 800095a:	e014      	b.n	8000986 <verify_address+0x46>
	}
	else if(go_address >= SYSMEM_ADDR_START && go_address <= SYSMEM_ADDR_END){
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <verify_address+0x54>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d905      	bls.n	8000970 <verify_address+0x30>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <verify_address+0x58>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d801      	bhi.n	8000970 <verify_address+0x30>
		return ADDR_VALID;
 800096c:	2301      	movs	r3, #1
 800096e:	e00a      	b.n	8000986 <verify_address+0x46>

	}
	else if(go_address >= SRAM_ADDR_START && go_address <= SRAM_ADDR_END){
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000976:	d305      	bcc.n	8000984 <verify_address+0x44>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f1b3 2f20 	cmp.w	r3, #536879104	; 0x20002000
 800097e:	d201      	bcs.n	8000984 <verify_address+0x44>
		return ADDR_VALID;
 8000980:	2301      	movs	r3, #1
 8000982:	e000      	b.n	8000986 <verify_address+0x46>
	}
	return ADDR_INVALID;
 8000984:	2300      	movs	r3, #0

}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	0801ffff 	.word	0x0801ffff
 8000994:	1fffefff 	.word	0x1fffefff
 8000998:	1ffff7ff 	.word	0x1ffff7ff

0800099c <erase_flash_page>:
uint8_t erase_flash_page(uint32_t page_number, uint32_t num_pages) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef erase_init;
    uint32_t page_error;

    if ((page_number * FLASH_PAGE_SIZE) >= (USER_APP_ADDRESS - FLASH_BASE_ADDRESS)) {
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	029b      	lsls	r3, r3, #10
 80009aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009ae:	d31d      	bcc.n	80009ec <erase_flash_page+0x50>
        HAL_FLASH_Unlock();  // Unlock flash memory for writing
 80009b0:	f000 fb86 	bl	80010c0 <HAL_FLASH_Unlock>

        erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
        erase_init.PageAddress = FLASH_BASE_ADDRESS + (page_number * FLASH_PAGE_SIZE);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80009be:	029b      	lsls	r3, r3, #10
 80009c0:	61bb      	str	r3, [r7, #24]
        erase_init.NbPages = num_pages;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	61fb      	str	r3, [r7, #28]

        if (HAL_FLASHEx_Erase(&erase_init, &page_error) == HAL_OK) {
 80009c6:	f107 020c 	add.w	r2, r7, #12
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fc5d 	bl	8001290 <HAL_FLASHEx_Erase>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d103      	bne.n	80009e4 <erase_flash_page+0x48>
            HAL_FLASH_Lock();  // Lock flash after operation
 80009dc:	f000 fb96 	bl	800110c <HAL_FLASH_Lock>
            return FLASH_SUCCESS;
 80009e0:	2300      	movs	r3, #0
 80009e2:	e004      	b.n	80009ee <erase_flash_page+0x52>
        } else {
            HAL_FLASH_Lock();
 80009e4:	f000 fb92 	bl	800110c <HAL_FLASH_Lock>
            return FLASH_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e000      	b.n	80009ee <erase_flash_page+0x52>
        }
    }
    return FLASH_INVALID_ADDR;
 80009ec:	2302      	movs	r3, #2
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3720      	adds	r7, #32
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009fa:	b672      	cpsid	i
}
 80009fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fe:	e7fe      	b.n	80009fe <Error_Handler+0x8>

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_MspInit+0x5c>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <HAL_MspInit+0x5c>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6193      	str	r3, [r2, #24]
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_MspInit+0x5c>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_MspInit+0x5c>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_MspInit+0x5c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	61d3      	str	r3, [r2, #28]
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_MspInit+0x5c>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_MspInit+0x60>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <HAL_MspInit+0x60>)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40010000 	.word	0x40010000

08000a64 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <HAL_CRC_MspInit+0x34>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d10b      	bne.n	8000a8e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_CRC_MspInit+0x38>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_CRC_MspInit+0x38>)
 8000a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a80:	6153      	str	r3, [r2, #20]
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_CRC_MspInit+0x38>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	40023000 	.word	0x40023000
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0320 	add.w	r3, r7, #32
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a53      	ldr	r2, [pc, #332]	; (8000c08 <HAL_UART_MspInit+0x168>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d132      	bne.n	8000b26 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac0:	4b52      	ldr	r3, [pc, #328]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a51      	ldr	r2, [pc, #324]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b4f      	ldr	r3, [pc, #316]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad4:	61fb      	str	r3, [r7, #28]
 8000ad6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b4c      	ldr	r3, [pc, #304]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a4b      	ldr	r2, [pc, #300]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b49      	ldr	r3, [pc, #292]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	61bb      	str	r3, [r7, #24]
 8000aee:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	4619      	mov	r1, r3
 8000b04:	4842      	ldr	r0, [pc, #264]	; (8000c10 <HAL_UART_MspInit+0x170>)
 8000b06:	f000 fc6b 	bl	80013e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 0320 	add.w	r3, r7, #32
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	483c      	ldr	r0, [pc, #240]	; (8000c10 <HAL_UART_MspInit+0x170>)
 8000b20:	f000 fc5e 	bl	80013e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b24:	e06c      	b.n	8000c00 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a3a      	ldr	r2, [pc, #232]	; (8000c14 <HAL_UART_MspInit+0x174>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d130      	bne.n	8000b92 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b30:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000b32:	69db      	ldr	r3, [r3, #28]
 8000b34:	4a35      	ldr	r2, [pc, #212]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3a:	61d3      	str	r3, [r2, #28]
 8000b3c:	4b33      	ldr	r3, [pc, #204]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000b3e:	69db      	ldr	r3, [r3, #28]
 8000b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b48:	4b30      	ldr	r3, [pc, #192]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a2f      	ldr	r2, [pc, #188]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b60:	2304      	movs	r3, #4
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0320 	add.w	r3, r7, #32
 8000b70:	4619      	mov	r1, r3
 8000b72:	4827      	ldr	r0, [pc, #156]	; (8000c10 <HAL_UART_MspInit+0x170>)
 8000b74:	f000 fc34 	bl	80013e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b78:	2308      	movs	r3, #8
 8000b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0320 	add.w	r3, r7, #32
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4821      	ldr	r0, [pc, #132]	; (8000c10 <HAL_UART_MspInit+0x170>)
 8000b8c:	f000 fc28 	bl	80013e0 <HAL_GPIO_Init>
}
 8000b90:	e036      	b.n	8000c00 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a20      	ldr	r2, [pc, #128]	; (8000c18 <HAL_UART_MspInit+0x178>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d131      	bne.n	8000c00 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	4a1a      	ldr	r2, [pc, #104]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000ba2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba6:	61d3      	str	r3, [r2, #28]
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000bba:	f043 0308 	orr.w	r3, r3, #8
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_UART_MspInit+0x16c>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0308 	and.w	r3, r3, #8
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 0320 	add.w	r3, r7, #32
 8000bde:	4619      	mov	r1, r3
 8000be0:	480e      	ldr	r0, [pc, #56]	; (8000c1c <HAL_UART_MspInit+0x17c>)
 8000be2:	f000 fbfd 	bl	80013e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000be6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0320 	add.w	r3, r7, #32
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4808      	ldr	r0, [pc, #32]	; (8000c1c <HAL_UART_MspInit+0x17c>)
 8000bfc:	f000 fbf0 	bl	80013e0 <HAL_GPIO_Init>
}
 8000c00:	bf00      	nop
 8000c02:	3730      	adds	r7, #48	; 0x30
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40013800 	.word	0x40013800
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010800 	.word	0x40010800
 8000c14:	40004400 	.word	0x40004400
 8000c18:	40004800 	.word	0x40004800
 8000c1c:	40010c00 	.word	0x40010c00

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c66:	f000 f875 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
	...

08000c7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c7c:	f7ff fff7 	bl	8000c6e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c80:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c82:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c84:	4a0c      	ldr	r2, [pc, #48]	; (8000cb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c98:	4c09      	ldr	r4, [pc, #36]	; (8000cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f001 fc19 	bl	80024dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000caa:	f7ff faa5 	bl	80001f8 <main>
  bx lr
 8000cae:	4770      	bx	lr
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000cb8:	08002604 	.word	0x08002604
  ldr r2, =_sbss
 8000cbc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000cc0:	20000200 	.word	0x20000200

08000cc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC1_2_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x28>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x28>)
 8000cd2:	f043 0310 	orr.w	r3, r3, #16
 8000cd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f907 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	200f      	movs	r0, #15
 8000ce0:	f000 f808 	bl	8000cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff fe8c 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40022000 	.word	0x40022000

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x54>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x58>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f911 	bl	8000f3a <HAL_SYSTICK_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00e      	b.n	8000d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d80a      	bhi.n	8000d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f000 f8e7 	bl	8000f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <HAL_InitTick+0x5c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000000c 	.word	0x2000000c
 8000d4c:	20000014 	.word	0x20000014
 8000d50:	20000010 	.word	0x20000010

08000d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_IncTick+0x1c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_IncTick+0x20>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a03      	ldr	r2, [pc, #12]	; (8000d74 <HAL_IncTick+0x20>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	20000014 	.word	0x20000014
 8000d74:	200001dc 	.word	0x200001dc

08000d78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b02      	ldr	r3, [pc, #8]	; (8000d88 <HAL_GetTick+0x10>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	200001dc 	.word	0x200001dc

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f7ff ff90 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff49 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f14:	f7ff ff5e 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f7ff ff90 	bl	8000e44 <NVIC_EncodePriority>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff5f 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffb0 	bl	8000ea8 <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e00e      	b.n	8000f82 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	795b      	ldrb	r3, [r3, #5]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d105      	bne.n	8000f7a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff fd75 	bl	8000a64 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b087      	sub	sp, #28
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	e00a      	b.n	8000fbc <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	441a      	add	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d3f0      	bcc.n	8000fa6 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000fd2:	693b      	ldr	r3, [r7, #16]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <HAL_FLASH_Program+0xd8>)
 8000ffc:	7e1b      	ldrb	r3, [r3, #24]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d101      	bne.n	8001006 <HAL_FLASH_Program+0x26>
 8001002:	2302      	movs	r3, #2
 8001004:	e054      	b.n	80010b0 <HAL_FLASH_Program+0xd0>
 8001006:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <HAL_FLASH_Program+0xd8>)
 8001008:	2201      	movs	r2, #1
 800100a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800100c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001010:	f000 f8a8 	bl	8001164 <FLASH_WaitForLastOperation>
 8001014:	4603      	mov	r3, r0
 8001016:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001018:	7dfb      	ldrb	r3, [r7, #23]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d144      	bne.n	80010a8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d102      	bne.n	800102a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001024:	2301      	movs	r3, #1
 8001026:	757b      	strb	r3, [r7, #21]
 8001028:	e007      	b.n	800103a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d102      	bne.n	8001036 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001030:	2302      	movs	r3, #2
 8001032:	757b      	strb	r3, [r7, #21]
 8001034:	e001      	b.n	800103a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001036:	2304      	movs	r3, #4
 8001038:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800103a:	2300      	movs	r3, #0
 800103c:	75bb      	strb	r3, [r7, #22]
 800103e:	e02d      	b.n	800109c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001040:	7dbb      	ldrb	r3, [r7, #22]
 8001042:	005a      	lsls	r2, r3, #1
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	eb02 0c03 	add.w	ip, r2, r3
 800104a:	7dbb      	ldrb	r3, [r7, #22]
 800104c:	0119      	lsls	r1, r3, #4
 800104e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001052:	f1c1 0620 	rsb	r6, r1, #32
 8001056:	f1a1 0020 	sub.w	r0, r1, #32
 800105a:	fa22 f401 	lsr.w	r4, r2, r1
 800105e:	fa03 f606 	lsl.w	r6, r3, r6
 8001062:	4334      	orrs	r4, r6
 8001064:	fa23 f000 	lsr.w	r0, r3, r0
 8001068:	4304      	orrs	r4, r0
 800106a:	fa23 f501 	lsr.w	r5, r3, r1
 800106e:	b2a3      	uxth	r3, r4
 8001070:	4619      	mov	r1, r3
 8001072:	4660      	mov	r0, ip
 8001074:	f000 f85a 	bl	800112c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001078:	f24c 3050 	movw	r0, #50000	; 0xc350
 800107c:	f000 f872 	bl	8001164 <FLASH_WaitForLastOperation>
 8001080:	4603      	mov	r3, r0
 8001082:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_FLASH_Program+0xdc>)
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_FLASH_Program+0xdc>)
 800108a:	f023 0301 	bic.w	r3, r3, #1
 800108e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d107      	bne.n	80010a6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001096:	7dbb      	ldrb	r3, [r7, #22]
 8001098:	3301      	adds	r3, #1
 800109a:	75bb      	strb	r3, [r7, #22]
 800109c:	7dba      	ldrb	r2, [r7, #22]
 800109e:	7d7b      	ldrb	r3, [r7, #21]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d3cd      	bcc.n	8001040 <HAL_FLASH_Program+0x60>
 80010a4:	e000      	b.n	80010a8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80010a6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_FLASH_Program+0xd8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	761a      	strb	r2, [r3, #24]

  return status;
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	371c      	adds	r7, #28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b8:	200001e0 	.word	0x200001e0
 80010bc:	40022000 	.word	0x40022000

080010c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_FLASH_Unlock+0x40>)
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00d      	beq.n	80010f2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_FLASH_Unlock+0x40>)
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_FLASH_Unlock+0x44>)
 80010da:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_FLASH_Unlock+0x40>)
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_FLASH_Unlock+0x48>)
 80010e0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <HAL_FLASH_Unlock+0x40>)
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80010f2:	79fb      	ldrb	r3, [r7, #7]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40022000 	.word	0x40022000
 8001104:	45670123 	.word	0x45670123
 8001108:	cdef89ab 	.word	0xcdef89ab

0800110c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_FLASH_Lock+0x1c>)
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_FLASH_Lock+0x1c>)
 8001116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40022000 	.word	0x40022000

0800112c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <FLASH_Program_HalfWord+0x30>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <FLASH_Program_HalfWord+0x34>)
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	4a07      	ldr	r2, [pc, #28]	; (8001160 <FLASH_Program_HalfWord+0x34>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	887a      	ldrh	r2, [r7, #2]
 800114e:	801a      	strh	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200001e0 	.word	0x200001e0
 8001160:	40022000 	.word	0x40022000

08001164 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff fe04 	bl	8000d78 <HAL_GetTick>
 8001170:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001172:	e010      	b.n	8001196 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117a:	d00c      	beq.n	8001196 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d007      	beq.n	8001192 <FLASH_WaitForLastOperation+0x2e>
 8001182:	f7ff fdf9 	bl	8000d78 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	429a      	cmp	r2, r3
 8001190:	d201      	bcs.n	8001196 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e025      	b.n	80011e2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <FLASH_WaitForLastOperation+0x88>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1e8      	bne.n	8001174 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <FLASH_WaitForLastOperation+0x88>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f003 0320 	and.w	r3, r3, #32
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <FLASH_WaitForLastOperation+0x88>)
 80011b0:	2220      	movs	r2, #32
 80011b2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <FLASH_WaitForLastOperation+0x88>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10b      	bne.n	80011d8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <FLASH_WaitForLastOperation+0x88>)
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d105      	bne.n	80011d8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <FLASH_WaitForLastOperation+0x88>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80011d8:	f000 f80a 	bl	80011f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40022000 	.word	0x40022000

080011f0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <FLASH_SetErrorCode+0x98>)
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	f003 0310 	and.w	r3, r3, #16
 8001202:	2b00      	cmp	r3, #0
 8001204:	d009      	beq.n	800121a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <FLASH_SetErrorCode+0x9c>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	4a1f      	ldr	r2, [pc, #124]	; (800128c <FLASH_SetErrorCode+0x9c>)
 8001210:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f043 0310 	orr.w	r3, r3, #16
 8001218:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <FLASH_SetErrorCode+0x98>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <FLASH_SetErrorCode+0x9c>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <FLASH_SetErrorCode+0x9c>)
 8001230:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <FLASH_SetErrorCode+0x98>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00b      	beq.n	800125e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <FLASH_SetErrorCode+0x9c>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	4a0f      	ldr	r2, [pc, #60]	; (800128c <FLASH_SetErrorCode+0x9c>)
 8001250:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <FLASH_SetErrorCode+0x98>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <FLASH_SetErrorCode+0x98>)
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f240 1201 	movw	r2, #257	; 0x101
 8001264:	4293      	cmp	r3, r2
 8001266:	d106      	bne.n	8001276 <FLASH_SetErrorCode+0x86>
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <FLASH_SetErrorCode+0x98>)
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <FLASH_SetErrorCode+0x98>)
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	61d3      	str	r3, [r2, #28]
}  
 8001274:	e002      	b.n	800127c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <FLASH_SetErrorCode+0x98>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	60d3      	str	r3, [r2, #12]
}  
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40022000 	.word	0x40022000
 800128c:	200001e0 	.word	0x200001e0

08001290 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <HAL_FLASHEx_Erase+0xd0>)
 80012a4:	7e1b      	ldrb	r3, [r3, #24]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <HAL_FLASHEx_Erase+0x1e>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e053      	b.n	8001356 <HAL_FLASHEx_Erase+0xc6>
 80012ae:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <HAL_FLASHEx_Erase+0xd0>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d116      	bne.n	80012ea <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80012bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012c0:	f7ff ff50 	bl	8001164 <FLASH_WaitForLastOperation>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d141      	bne.n	800134e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f000 f84c 	bl	8001368 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012d4:	f7ff ff46 	bl	8001164 <FLASH_WaitForLastOperation>
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <HAL_FLASHEx_Erase+0xd4>)
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	4a20      	ldr	r2, [pc, #128]	; (8001364 <HAL_FLASHEx_Erase+0xd4>)
 80012e2:	f023 0304 	bic.w	r3, r3, #4
 80012e6:	6113      	str	r3, [r2, #16]
 80012e8:	e031      	b.n	800134e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80012ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012ee:	f7ff ff39 	bl	8001164 <FLASH_WaitForLastOperation>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d12a      	bne.n	800134e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f04f 32ff 	mov.w	r2, #4294967295
 80012fe:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	e019      	b.n	800133c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	f000 f849 	bl	80013a0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800130e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001312:	f7ff ff27 	bl	8001164 <FLASH_WaitForLastOperation>
 8001316:	4603      	mov	r3, r0
 8001318:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_FLASHEx_Erase+0xd4>)
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	4a11      	ldr	r2, [pc, #68]	; (8001364 <HAL_FLASHEx_Erase+0xd4>)
 8001320:	f023 0302 	bic.w	r3, r3, #2
 8001324:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	601a      	str	r2, [r3, #0]
            break;
 8001332:	e00c      	b.n	800134e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800133a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	029a      	lsls	r2, r3, #10
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	429a      	cmp	r2, r3
 800134c:	d3dc      	bcc.n	8001308 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <HAL_FLASHEx_Erase+0xd0>)
 8001350:	2200      	movs	r2, #0
 8001352:	761a      	strb	r2, [r3, #24]

  return status;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200001e0 	.word	0x200001e0
 8001364:	40022000 	.word	0x40022000

08001368 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <FLASH_MassErase+0x30>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <FLASH_MassErase+0x34>)
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <FLASH_MassErase+0x34>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <FLASH_MassErase+0x34>)
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <FLASH_MassErase+0x34>)
 8001388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800138c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	200001e0 	.word	0x200001e0
 800139c:	40022000 	.word	0x40022000

080013a0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <FLASH_PageErase+0x38>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <FLASH_PageErase+0x3c>)
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <FLASH_PageErase+0x3c>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80013ba:	4a08      	ldr	r2, [pc, #32]	; (80013dc <FLASH_PageErase+0x3c>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <FLASH_PageErase+0x3c>)
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	4a05      	ldr	r2, [pc, #20]	; (80013dc <FLASH_PageErase+0x3c>)
 80013c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ca:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	200001e0 	.word	0x200001e0
 80013dc:	40022000 	.word	0x40022000

080013e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b08b      	sub	sp, #44	; 0x2c
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f2:	e169      	b.n	80016c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013f4:	2201      	movs	r2, #1
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	429a      	cmp	r2, r3
 800140e:	f040 8158 	bne.w	80016c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a9a      	ldr	r2, [pc, #616]	; (8001680 <HAL_GPIO_Init+0x2a0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d05e      	beq.n	80014da <HAL_GPIO_Init+0xfa>
 800141c:	4a98      	ldr	r2, [pc, #608]	; (8001680 <HAL_GPIO_Init+0x2a0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d875      	bhi.n	800150e <HAL_GPIO_Init+0x12e>
 8001422:	4a98      	ldr	r2, [pc, #608]	; (8001684 <HAL_GPIO_Init+0x2a4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d058      	beq.n	80014da <HAL_GPIO_Init+0xfa>
 8001428:	4a96      	ldr	r2, [pc, #600]	; (8001684 <HAL_GPIO_Init+0x2a4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d86f      	bhi.n	800150e <HAL_GPIO_Init+0x12e>
 800142e:	4a96      	ldr	r2, [pc, #600]	; (8001688 <HAL_GPIO_Init+0x2a8>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d052      	beq.n	80014da <HAL_GPIO_Init+0xfa>
 8001434:	4a94      	ldr	r2, [pc, #592]	; (8001688 <HAL_GPIO_Init+0x2a8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d869      	bhi.n	800150e <HAL_GPIO_Init+0x12e>
 800143a:	4a94      	ldr	r2, [pc, #592]	; (800168c <HAL_GPIO_Init+0x2ac>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d04c      	beq.n	80014da <HAL_GPIO_Init+0xfa>
 8001440:	4a92      	ldr	r2, [pc, #584]	; (800168c <HAL_GPIO_Init+0x2ac>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d863      	bhi.n	800150e <HAL_GPIO_Init+0x12e>
 8001446:	4a92      	ldr	r2, [pc, #584]	; (8001690 <HAL_GPIO_Init+0x2b0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d046      	beq.n	80014da <HAL_GPIO_Init+0xfa>
 800144c:	4a90      	ldr	r2, [pc, #576]	; (8001690 <HAL_GPIO_Init+0x2b0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d85d      	bhi.n	800150e <HAL_GPIO_Init+0x12e>
 8001452:	2b12      	cmp	r3, #18
 8001454:	d82a      	bhi.n	80014ac <HAL_GPIO_Init+0xcc>
 8001456:	2b12      	cmp	r3, #18
 8001458:	d859      	bhi.n	800150e <HAL_GPIO_Init+0x12e>
 800145a:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <HAL_GPIO_Init+0x80>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	080014db 	.word	0x080014db
 8001464:	080014b5 	.word	0x080014b5
 8001468:	080014c7 	.word	0x080014c7
 800146c:	08001509 	.word	0x08001509
 8001470:	0800150f 	.word	0x0800150f
 8001474:	0800150f 	.word	0x0800150f
 8001478:	0800150f 	.word	0x0800150f
 800147c:	0800150f 	.word	0x0800150f
 8001480:	0800150f 	.word	0x0800150f
 8001484:	0800150f 	.word	0x0800150f
 8001488:	0800150f 	.word	0x0800150f
 800148c:	0800150f 	.word	0x0800150f
 8001490:	0800150f 	.word	0x0800150f
 8001494:	0800150f 	.word	0x0800150f
 8001498:	0800150f 	.word	0x0800150f
 800149c:	0800150f 	.word	0x0800150f
 80014a0:	0800150f 	.word	0x0800150f
 80014a4:	080014bd 	.word	0x080014bd
 80014a8:	080014d1 	.word	0x080014d1
 80014ac:	4a79      	ldr	r2, [pc, #484]	; (8001694 <HAL_GPIO_Init+0x2b4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014b2:	e02c      	b.n	800150e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	623b      	str	r3, [r7, #32]
          break;
 80014ba:	e029      	b.n	8001510 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	3304      	adds	r3, #4
 80014c2:	623b      	str	r3, [r7, #32]
          break;
 80014c4:	e024      	b.n	8001510 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	3308      	adds	r3, #8
 80014cc:	623b      	str	r3, [r7, #32]
          break;
 80014ce:	e01f      	b.n	8001510 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	330c      	adds	r3, #12
 80014d6:	623b      	str	r3, [r7, #32]
          break;
 80014d8:	e01a      	b.n	8001510 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014e2:	2304      	movs	r3, #4
 80014e4:	623b      	str	r3, [r7, #32]
          break;
 80014e6:	e013      	b.n	8001510 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d105      	bne.n	80014fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f0:	2308      	movs	r3, #8
 80014f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	611a      	str	r2, [r3, #16]
          break;
 80014fa:	e009      	b.n	8001510 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014fc:	2308      	movs	r3, #8
 80014fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	615a      	str	r2, [r3, #20]
          break;
 8001506:	e003      	b.n	8001510 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
          break;
 800150c:	e000      	b.n	8001510 <HAL_GPIO_Init+0x130>
          break;
 800150e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2bff      	cmp	r3, #255	; 0xff
 8001514:	d801      	bhi.n	800151a <HAL_GPIO_Init+0x13a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	e001      	b.n	800151e <HAL_GPIO_Init+0x13e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3304      	adds	r3, #4
 800151e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	2bff      	cmp	r3, #255	; 0xff
 8001524:	d802      	bhi.n	800152c <HAL_GPIO_Init+0x14c>
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	e002      	b.n	8001532 <HAL_GPIO_Init+0x152>
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	3b08      	subs	r3, #8
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	210f      	movs	r1, #15
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	401a      	ands	r2, r3
 8001544:	6a39      	ldr	r1, [r7, #32]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	431a      	orrs	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 80b1 	beq.w	80016c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001560:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <HAL_GPIO_Init+0x2b8>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a4c      	ldr	r2, [pc, #304]	; (8001698 <HAL_GPIO_Init+0x2b8>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b4a      	ldr	r3, [pc, #296]	; (8001698 <HAL_GPIO_Init+0x2b8>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001578:	4a48      	ldr	r2, [pc, #288]	; (800169c <HAL_GPIO_Init+0x2bc>)
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	3302      	adds	r3, #2
 8001580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001584:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	220f      	movs	r2, #15
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	4013      	ands	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a40      	ldr	r2, [pc, #256]	; (80016a0 <HAL_GPIO_Init+0x2c0>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d013      	beq.n	80015cc <HAL_GPIO_Init+0x1ec>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a3f      	ldr	r2, [pc, #252]	; (80016a4 <HAL_GPIO_Init+0x2c4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d00d      	beq.n	80015c8 <HAL_GPIO_Init+0x1e8>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a3e      	ldr	r2, [pc, #248]	; (80016a8 <HAL_GPIO_Init+0x2c8>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d007      	beq.n	80015c4 <HAL_GPIO_Init+0x1e4>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a3d      	ldr	r2, [pc, #244]	; (80016ac <HAL_GPIO_Init+0x2cc>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d101      	bne.n	80015c0 <HAL_GPIO_Init+0x1e0>
 80015bc:	2303      	movs	r3, #3
 80015be:	e006      	b.n	80015ce <HAL_GPIO_Init+0x1ee>
 80015c0:	2304      	movs	r3, #4
 80015c2:	e004      	b.n	80015ce <HAL_GPIO_Init+0x1ee>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e002      	b.n	80015ce <HAL_GPIO_Init+0x1ee>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <HAL_GPIO_Init+0x1ee>
 80015cc:	2300      	movs	r3, #0
 80015ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d0:	f002 0203 	and.w	r2, r2, #3
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	4093      	lsls	r3, r2
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015de:	492f      	ldr	r1, [pc, #188]	; (800169c <HAL_GPIO_Init+0x2bc>)
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	3302      	adds	r3, #2
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	492c      	ldr	r1, [pc, #176]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	608b      	str	r3, [r1, #8]
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001606:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	43db      	mvns	r3, r3
 800160e:	4928      	ldr	r1, [pc, #160]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001610:	4013      	ands	r3, r2
 8001612:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001620:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	4922      	ldr	r1, [pc, #136]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	60cb      	str	r3, [r1, #12]
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	43db      	mvns	r3, r3
 8001636:	491e      	ldr	r1, [pc, #120]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001638:	4013      	ands	r3, r2
 800163a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	4918      	ldr	r1, [pc, #96]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	43db      	mvns	r3, r3
 800165e:	4914      	ldr	r1, [pc, #80]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001660:	4013      	ands	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d021      	beq.n	80016b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	490e      	ldr	r1, [pc, #56]	; (80016b0 <HAL_GPIO_Init+0x2d0>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e021      	b.n	80016c2 <HAL_GPIO_Init+0x2e2>
 800167e:	bf00      	nop
 8001680:	10320000 	.word	0x10320000
 8001684:	10310000 	.word	0x10310000
 8001688:	10220000 	.word	0x10220000
 800168c:	10210000 	.word	0x10210000
 8001690:	10120000 	.word	0x10120000
 8001694:	10110000 	.word	0x10110000
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000
 80016a0:	40010800 	.word	0x40010800
 80016a4:	40010c00 	.word	0x40010c00
 80016a8:	40011000 	.word	0x40011000
 80016ac:	40011400 	.word	0x40011400
 80016b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_GPIO_Init+0x304>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	4909      	ldr	r1, [pc, #36]	; (80016e4 <HAL_GPIO_Init+0x304>)
 80016be:	4013      	ands	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	3301      	adds	r3, #1
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	fa22 f303 	lsr.w	r3, r2, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f47f ae8e 	bne.w	80013f4 <HAL_GPIO_Init+0x14>
  }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	372c      	adds	r7, #44	; 0x2c
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	40010400 	.word	0x40010400

080016e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	e001      	b.n	800170a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	807b      	strh	r3, [r7, #2]
 8001722:	4613      	mov	r3, r2
 8001724:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001726:	787b      	ldrb	r3, [r7, #1]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800172c:	887a      	ldrh	r2, [r7, #2]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001732:	e003      	b.n	800173c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	041a      	lsls	r2, r3, #16
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	611a      	str	r2, [r3, #16]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
	...

08001748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e26c      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8087 	beq.w	8001876 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001768:	4b92      	ldr	r3, [pc, #584]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b04      	cmp	r3, #4
 8001772:	d00c      	beq.n	800178e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001774:	4b8f      	ldr	r3, [pc, #572]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b08      	cmp	r3, #8
 800177e:	d112      	bne.n	80017a6 <HAL_RCC_OscConfig+0x5e>
 8001780:	4b8c      	ldr	r3, [pc, #560]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178c:	d10b      	bne.n	80017a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178e:	4b89      	ldr	r3, [pc, #548]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d06c      	beq.n	8001874 <HAL_RCC_OscConfig+0x12c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d168      	bne.n	8001874 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e246      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x76>
 80017b0:	4b80      	ldr	r3, [pc, #512]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a7f      	ldr	r2, [pc, #508]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	e02e      	b.n	800181c <HAL_RCC_OscConfig+0xd4>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x98>
 80017c6:	4b7b      	ldr	r3, [pc, #492]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a7a      	ldr	r2, [pc, #488]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b78      	ldr	r3, [pc, #480]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a77      	ldr	r2, [pc, #476]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e01d      	b.n	800181c <HAL_RCC_OscConfig+0xd4>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e8:	d10c      	bne.n	8001804 <HAL_RCC_OscConfig+0xbc>
 80017ea:	4b72      	ldr	r3, [pc, #456]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a71      	ldr	r2, [pc, #452]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	4b6f      	ldr	r3, [pc, #444]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a6e      	ldr	r2, [pc, #440]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e00b      	b.n	800181c <HAL_RCC_OscConfig+0xd4>
 8001804:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a6a      	ldr	r2, [pc, #424]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 800180a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b68      	ldr	r3, [pc, #416]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a67      	ldr	r2, [pc, #412]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d013      	beq.n	800184c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff faa8 	bl	8000d78 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff faa4 	bl	8000d78 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1fa      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183e:	4b5d      	ldr	r3, [pc, #372]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0xe4>
 800184a:	e014      	b.n	8001876 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff fa94 	bl	8000d78 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff fa90 	bl	8000d78 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e1e6      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001866:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x10c>
 8001872:	e000      	b.n	8001876 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d063      	beq.n	800194a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001882:	4b4c      	ldr	r3, [pc, #304]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 030c 	and.w	r3, r3, #12
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00b      	beq.n	80018a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800188e:	4b49      	ldr	r3, [pc, #292]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b08      	cmp	r3, #8
 8001898:	d11c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x18c>
 800189a:	4b46      	ldr	r3, [pc, #280]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d116      	bne.n	80018d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a6:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <HAL_RCC_OscConfig+0x176>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d001      	beq.n	80018be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e1ba      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018be:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	4939      	ldr	r1, [pc, #228]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d2:	e03a      	b.n	800194a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d020      	beq.n	800191e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018dc:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff fa49 	bl	8000d78 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ea:	f7ff fa45 	bl	8000d78 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e19b      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fc:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001908:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4927      	ldr	r1, [pc, #156]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001918:	4313      	orrs	r3, r2
 800191a:	600b      	str	r3, [r1, #0]
 800191c:	e015      	b.n	800194a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fa28 	bl	8000d78 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192c:	f7ff fa24 	bl	8000d78 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e17a      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193e:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d03a      	beq.n	80019cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d019      	beq.n	8001992 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195e:	4b17      	ldr	r3, [pc, #92]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 8001960:	2201      	movs	r2, #1
 8001962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7ff fa08 	bl	8000d78 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196c:	f7ff fa04 	bl	8000d78 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e15a      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_RCC_OscConfig+0x26c>)
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800198a:	2001      	movs	r0, #1
 800198c:	f000 facc 	bl	8001f28 <RCC_Delay>
 8001990:	e01c      	b.n	80019cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001998:	f7ff f9ee 	bl	8000d78 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199e:	e00f      	b.n	80019c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a0:	f7ff f9ea 	bl	8000d78 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d908      	bls.n	80019c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e140      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
 80019b8:	42420000 	.word	0x42420000
 80019bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c0:	4b9e      	ldr	r3, [pc, #632]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1e9      	bne.n	80019a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80a6 	beq.w	8001b26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019de:	4b97      	ldr	r3, [pc, #604]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10d      	bne.n	8001a06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b94      	ldr	r3, [pc, #592]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4a93      	ldr	r2, [pc, #588]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	61d3      	str	r3, [r2, #28]
 80019f6:	4b91      	ldr	r3, [pc, #580]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a02:	2301      	movs	r3, #1
 8001a04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a06:	4b8e      	ldr	r3, [pc, #568]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d118      	bne.n	8001a44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a12:	4b8b      	ldr	r3, [pc, #556]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a8a      	ldr	r2, [pc, #552]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff f9ab 	bl	8000d78 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a26:	f7ff f9a7 	bl	8000d78 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b64      	cmp	r3, #100	; 0x64
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e0fd      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	4b81      	ldr	r3, [pc, #516]	; (8001c40 <HAL_RCC_OscConfig+0x4f8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d106      	bne.n	8001a5a <HAL_RCC_OscConfig+0x312>
 8001a4c:	4b7b      	ldr	r3, [pc, #492]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	4a7a      	ldr	r2, [pc, #488]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6213      	str	r3, [r2, #32]
 8001a58:	e02d      	b.n	8001ab6 <HAL_RCC_OscConfig+0x36e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x334>
 8001a62:	4b76      	ldr	r3, [pc, #472]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	4a75      	ldr	r2, [pc, #468]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	6213      	str	r3, [r2, #32]
 8001a6e:	4b73      	ldr	r3, [pc, #460]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	4a72      	ldr	r2, [pc, #456]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	f023 0304 	bic.w	r3, r3, #4
 8001a78:	6213      	str	r3, [r2, #32]
 8001a7a:	e01c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x36e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d10c      	bne.n	8001a9e <HAL_RCC_OscConfig+0x356>
 8001a84:	4b6d      	ldr	r3, [pc, #436]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	4a6c      	ldr	r2, [pc, #432]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6213      	str	r3, [r2, #32]
 8001a90:	4b6a      	ldr	r3, [pc, #424]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4a69      	ldr	r2, [pc, #420]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6213      	str	r3, [r2, #32]
 8001a9c:	e00b      	b.n	8001ab6 <HAL_RCC_OscConfig+0x36e>
 8001a9e:	4b67      	ldr	r3, [pc, #412]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4a66      	ldr	r2, [pc, #408]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6213      	str	r3, [r2, #32]
 8001aaa:	4b64      	ldr	r3, [pc, #400]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4a63      	ldr	r2, [pc, #396]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d015      	beq.n	8001aea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7ff f95b 	bl	8000d78 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac4:	e00a      	b.n	8001adc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac6:	f7ff f957 	bl	8000d78 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e0ab      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001adc:	4b57      	ldr	r3, [pc, #348]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0ee      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x37e>
 8001ae8:	e014      	b.n	8001b14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aea:	f7ff f945 	bl	8000d78 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af2:	f7ff f941 	bl	8000d78 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e095      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b08:	4b4c      	ldr	r3, [pc, #304]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1ee      	bne.n	8001af2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d105      	bne.n	8001b26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1a:	4b48      	ldr	r3, [pc, #288]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4a47      	ldr	r2, [pc, #284]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 8081 	beq.w	8001c32 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b30:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d061      	beq.n	8001c00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d146      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b44:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <HAL_RCC_OscConfig+0x4fc>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff f915 	bl	8000d78 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b52:	f7ff f911 	bl	8000d78 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e067      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f0      	bne.n	8001b52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b78:	d108      	bne.n	8001b8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b7a:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	492d      	ldr	r1, [pc, #180]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a19      	ldr	r1, [r3, #32]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	4927      	ldr	r1, [pc, #156]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <HAL_RCC_OscConfig+0x4fc>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7ff f8e5 	bl	8000d78 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7ff f8e1 	bl	8000d78 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e037      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x46a>
 8001bd0:	e02f      	b.n	8001c32 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <HAL_RCC_OscConfig+0x4fc>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f8ce 	bl	8000d78 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff f8ca 	bl	8000d78 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e020      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x498>
 8001bfe:	e018      	b.n	8001c32 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e013      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d106      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40007000 	.word	0x40007000
 8001c44:	42420060 	.word	0x42420060

08001c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0d0      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d910      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 0207 	bic.w	r2, r3, #7
 8001c72:	4965      	ldr	r1, [pc, #404]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0b8      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca4:	4b59      	ldr	r3, [pc, #356]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a58      	ldr	r2, [pc, #352]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cbc:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc8:	4b50      	ldr	r3, [pc, #320]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	494d      	ldr	r1, [pc, #308]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d040      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d115      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e07f      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e073      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06b      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4936      	ldr	r1, [pc, #216]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7ff f81e 	bl	8000d78 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff f81a 	bl	8000d78 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e053      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d210      	bcs.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	4922      	ldr	r1, [pc, #136]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e032      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4916      	ldr	r1, [pc, #88]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	490e      	ldr	r1, [pc, #56]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dd6:	f000 f821 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	490a      	ldr	r1, [pc, #40]	; (8001e10 <HAL_RCC_ClockConfig+0x1c8>)
 8001de8:	5ccb      	ldrb	r3, [r1, r3]
 8001dea:	fa22 f303 	lsr.w	r3, r2, r3
 8001dee:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <HAL_RCC_ClockConfig+0x1cc>)
 8001df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x1d0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe ff7c 	bl	8000cf4 <HAL_InitTick>

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40022000 	.word	0x40022000
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	080025d0 	.word	0x080025d0
 8001e14:	2000000c 	.word	0x2000000c
 8001e18:	20000010 	.word	0x20000010

08001e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d002      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x30>
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d003      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0x36>
 8001e4a:	e027      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e4c:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e4e:	613b      	str	r3, [r7, #16]
      break;
 8001e50:	e027      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	0c9b      	lsrs	r3, r3, #18
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	4a17      	ldr	r2, [pc, #92]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d010      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	0c5b      	lsrs	r3, r3, #17
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e7e:	fb02 f203 	mul.w	r2, r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	e004      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e90:	fb02 f303 	mul.w	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	613b      	str	r3, [r7, #16]
      break;
 8001e9a:	e002      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e9e:	613b      	str	r3, [r7, #16]
      break;
 8001ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea2:	693b      	ldr	r3, [r7, #16]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	007a1200 	.word	0x007a1200
 8001eb8:	080025e8 	.word	0x080025e8
 8001ebc:	080025f8 	.word	0x080025f8
 8001ec0:	003d0900 	.word	0x003d0900

08001ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec8:	4b02      	ldr	r3, [pc, #8]	; (8001ed4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	2000000c 	.word	0x2000000c

08001ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001edc:	f7ff fff2 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4903      	ldr	r1, [pc, #12]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	080025e0 	.word	0x080025e0

08001f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f04:	f7ff ffde 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	0adb      	lsrs	r3, r3, #11
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4903      	ldr	r1, [pc, #12]	; (8001f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	080025e0 	.word	0x080025e0

08001f28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <RCC_Delay+0x34>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <RCC_Delay+0x38>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0a5b      	lsrs	r3, r3, #9
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f44:	bf00      	nop
  }
  while (Delay --);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	60fa      	str	r2, [r7, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f9      	bne.n	8001f44 <RCC_Delay+0x1c>
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	2000000c 	.word	0x2000000c
 8001f60:	10624dd3 	.word	0x10624dd3

08001f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e042      	b.n	8001ffc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe fd88 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2224      	movs	r2, #36	; 0x24
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fa09 	bl	80023c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af02      	add	r7, sp, #8
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b20      	cmp	r3, #32
 8002022:	d175      	bne.n	8002110 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <HAL_UART_Transmit+0x2c>
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e06e      	b.n	8002112 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2221      	movs	r2, #33	; 0x21
 800203e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002042:	f7fe fe99 	bl	8000d78 <HAL_GetTick>
 8002046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	88fa      	ldrh	r2, [r7, #6]
 800204c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	88fa      	ldrh	r2, [r7, #6]
 8002052:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205c:	d108      	bne.n	8002070 <HAL_UART_Transmit+0x6c>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d104      	bne.n	8002070 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	e003      	b.n	8002078 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002078:	e02e      	b.n	80020d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2200      	movs	r2, #0
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f8df 	bl	8002248 <UART_WaitOnFlagUntilTimeout>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e03a      	b.n	8002112 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10b      	bne.n	80020ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	3302      	adds	r3, #2
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	e007      	b.n	80020ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	3301      	adds	r3, #1
 80020c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1cb      	bne.n	800207a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2200      	movs	r2, #0
 80020ea:	2140      	movs	r1, #64	; 0x40
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f8ab 	bl	8002248 <UART_WaitOnFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e006      	b.n	8002112 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	e000      	b.n	8002112 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002110:	2302      	movs	r3, #2
  }
}
 8002112:	4618      	mov	r0, r3
 8002114:	3720      	adds	r7, #32
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b08a      	sub	sp, #40	; 0x28
 800211e:	af02      	add	r7, sp, #8
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	4613      	mov	r3, r2
 8002128:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b20      	cmp	r3, #32
 8002138:	f040 8081 	bne.w	800223e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <HAL_UART_Receive+0x2e>
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e079      	b.n	8002240 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2222      	movs	r2, #34	; 0x22
 8002156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002160:	f7fe fe0a 	bl	8000d78 <HAL_GetTick>
 8002164:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	88fa      	ldrh	r2, [r7, #6]
 800216a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	88fa      	ldrh	r2, [r7, #6]
 8002170:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217a:	d108      	bne.n	800218e <HAL_UART_Receive+0x74>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d104      	bne.n	800218e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	61bb      	str	r3, [r7, #24]
 800218c:	e003      	b.n	8002196 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002196:	e047      	b.n	8002228 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2200      	movs	r2, #0
 80021a0:	2120      	movs	r1, #32
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f850 	bl	8002248 <UART_WaitOnFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2220      	movs	r2, #32
 80021b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e042      	b.n	8002240 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10c      	bne.n	80021da <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	3302      	adds	r3, #2
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	e01f      	b.n	800221a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e2:	d007      	beq.n	80021f4 <HAL_UART_Receive+0xda>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <HAL_UART_Receive+0xe8>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d106      	bne.n	8002202 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	e008      	b.n	8002214 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800220e:	b2da      	uxtb	r2, r3
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	3301      	adds	r3, #1
 8002218:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1b2      	bne.n	8002198 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e000      	b.n	8002240 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800223e:	2302      	movs	r3, #2
  }
}
 8002240:	4618      	mov	r0, r3
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002258:	e03b      	b.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d037      	beq.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002262:	f7fe fd89 	bl	8000d78 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	6a3a      	ldr	r2, [r7, #32]
 800226e:	429a      	cmp	r2, r3
 8002270:	d302      	bcc.n	8002278 <UART_WaitOnFlagUntilTimeout+0x30>
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e03a      	b.n	80022f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d023      	beq.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b80      	cmp	r3, #128	; 0x80
 800228e:	d020      	beq.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b40      	cmp	r3, #64	; 0x40
 8002294:	d01d      	beq.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d116      	bne.n	80022d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f81d 	bl	80022fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2208      	movs	r2, #8
 80022c4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00f      	b.n	80022f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4013      	ands	r3, r2
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	429a      	cmp	r2, r3
 80022e0:	bf0c      	ite	eq
 80022e2:	2301      	moveq	r3, #1
 80022e4:	2300      	movne	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d0b4      	beq.n	800225a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b095      	sub	sp, #84	; 0x54
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	330c      	adds	r3, #12
 8002308:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230c:	e853 3f00 	ldrex	r3, [r3]
 8002310:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	330c      	adds	r3, #12
 8002320:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002322:	643a      	str	r2, [r7, #64]	; 0x40
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002326:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002328:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800232a:	e841 2300 	strex	r3, r2, [r1]
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1e5      	bne.n	8002302 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	3314      	adds	r3, #20
 800233c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	e853 3f00 	ldrex	r3, [r3]
 8002344:	61fb      	str	r3, [r7, #28]
   return(result);
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	64bb      	str	r3, [r7, #72]	; 0x48
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3314      	adds	r3, #20
 8002354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002356:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800235c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800235e:	e841 2300 	strex	r3, r2, [r1]
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1e5      	bne.n	8002336 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	2b01      	cmp	r3, #1
 8002370:	d119      	bne.n	80023a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	330c      	adds	r3, #12
 8002378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	e853 3f00 	ldrex	r3, [r3]
 8002380:	60bb      	str	r3, [r7, #8]
   return(result);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f023 0310 	bic.w	r3, r3, #16
 8002388:	647b      	str	r3, [r7, #68]	; 0x44
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	330c      	adds	r3, #12
 8002390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002392:	61ba      	str	r2, [r7, #24]
 8002394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002396:	6979      	ldr	r1, [r7, #20]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	e841 2300 	strex	r3, r2, [r1]
 800239e:	613b      	str	r3, [r7, #16]
   return(result);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1e5      	bne.n	8002372 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80023b4:	bf00      	nop
 80023b6:	3754      	adds	r7, #84	; 0x54
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
	...

080023c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023fa:	f023 030c 	bic.w	r3, r3, #12
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	430b      	orrs	r3, r1
 8002406:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2c      	ldr	r2, [pc, #176]	; (80024d4 <UART_SetConfig+0x114>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d103      	bne.n	8002430 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002428:	f7ff fd6a 	bl	8001f00 <HAL_RCC_GetPCLK2Freq>
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	e002      	b.n	8002436 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002430:	f7ff fd52 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002434:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	009a      	lsls	r2, r3, #2
 8002440:	441a      	add	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <UART_SetConfig+0x118>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	0119      	lsls	r1, r3, #4
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	009a      	lsls	r2, r3, #2
 8002460:	441a      	add	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	fbb2 f2f3 	udiv	r2, r2, r3
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <UART_SetConfig+0x118>)
 800246e:	fba3 0302 	umull	r0, r3, r3, r2
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	2064      	movs	r0, #100	; 0x64
 8002476:	fb00 f303 	mul.w	r3, r0, r3
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	3332      	adds	r3, #50	; 0x32
 8002480:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <UART_SetConfig+0x118>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800248c:	4419      	add	r1, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	009a      	lsls	r2, r3, #2
 8002498:	441a      	add	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <UART_SetConfig+0x118>)
 80024a6:	fba3 0302 	umull	r0, r3, r3, r2
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2064      	movs	r0, #100	; 0x64
 80024ae:	fb00 f303 	mul.w	r3, r0, r3
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	3332      	adds	r3, #50	; 0x32
 80024b8:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <UART_SetConfig+0x118>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	f003 020f 	and.w	r2, r3, #15
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	440a      	add	r2, r1
 80024ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40013800 	.word	0x40013800
 80024d8:	51eb851f 	.word	0x51eb851f

080024dc <__libc_init_array>:
 80024dc:	b570      	push	{r4, r5, r6, lr}
 80024de:	2600      	movs	r6, #0
 80024e0:	4d0c      	ldr	r5, [pc, #48]	; (8002514 <__libc_init_array+0x38>)
 80024e2:	4c0d      	ldr	r4, [pc, #52]	; (8002518 <__libc_init_array+0x3c>)
 80024e4:	1b64      	subs	r4, r4, r5
 80024e6:	10a4      	asrs	r4, r4, #2
 80024e8:	42a6      	cmp	r6, r4
 80024ea:	d109      	bne.n	8002500 <__libc_init_array+0x24>
 80024ec:	f000 f822 	bl	8002534 <_init>
 80024f0:	2600      	movs	r6, #0
 80024f2:	4d0a      	ldr	r5, [pc, #40]	; (800251c <__libc_init_array+0x40>)
 80024f4:	4c0a      	ldr	r4, [pc, #40]	; (8002520 <__libc_init_array+0x44>)
 80024f6:	1b64      	subs	r4, r4, r5
 80024f8:	10a4      	asrs	r4, r4, #2
 80024fa:	42a6      	cmp	r6, r4
 80024fc:	d105      	bne.n	800250a <__libc_init_array+0x2e>
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
 8002500:	f855 3b04 	ldr.w	r3, [r5], #4
 8002504:	4798      	blx	r3
 8002506:	3601      	adds	r6, #1
 8002508:	e7ee      	b.n	80024e8 <__libc_init_array+0xc>
 800250a:	f855 3b04 	ldr.w	r3, [r5], #4
 800250e:	4798      	blx	r3
 8002510:	3601      	adds	r6, #1
 8002512:	e7f2      	b.n	80024fa <__libc_init_array+0x1e>
 8002514:	080025fc 	.word	0x080025fc
 8002518:	080025fc 	.word	0x080025fc
 800251c:	080025fc 	.word	0x080025fc
 8002520:	08002600 	.word	0x08002600

08002524 <memset>:
 8002524:	4603      	mov	r3, r0
 8002526:	4402      	add	r2, r0
 8002528:	4293      	cmp	r3, r2
 800252a:	d100      	bne.n	800252e <memset+0xa>
 800252c:	4770      	bx	lr
 800252e:	f803 1b01 	strb.w	r1, [r3], #1
 8002532:	e7f9      	b.n	8002528 <memset+0x4>

08002534 <_init>:
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	bf00      	nop
 8002538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253a:	bc08      	pop	{r3}
 800253c:	469e      	mov	lr, r3
 800253e:	4770      	bx	lr

08002540 <_fini>:
 8002540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002542:	bf00      	nop
 8002544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002546:	bc08      	pop	{r3}
 8002548:	469e      	mov	lr, r3
 800254a:	4770      	bx	lr
