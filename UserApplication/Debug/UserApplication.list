
UserApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015e8  0800410c  0800410c  0000410c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080056f4  080056f4  000056f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005730  08005730  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005730  08005730  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005730  08005730  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005730  08005730  00005730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005734  08005734  00005734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005738  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08005744  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08005744  00010074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007395  00000000  00000000  00010035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012a7  00000000  00000000  000173ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  00018678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000588  00000000  00000000  00018c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016577  00000000  00000000  000191f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f9b  00000000  00000000  0002f767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000813a8  00000000  00000000  00036702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b7aaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016dc  00000000  00000000  000b7b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800410c <__do_global_dtors_aux>:
 800410c:	b510      	push	{r4, lr}
 800410e:	4c05      	ldr	r4, [pc, #20]	; (8004124 <__do_global_dtors_aux+0x18>)
 8004110:	7823      	ldrb	r3, [r4, #0]
 8004112:	b933      	cbnz	r3, 8004122 <__do_global_dtors_aux+0x16>
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <__do_global_dtors_aux+0x1c>)
 8004116:	b113      	cbz	r3, 800411e <__do_global_dtors_aux+0x12>
 8004118:	4804      	ldr	r0, [pc, #16]	; (800412c <__do_global_dtors_aux+0x20>)
 800411a:	f3af 8000 	nop.w
 800411e:	2301      	movs	r3, #1
 8004120:	7023      	strb	r3, [r4, #0]
 8004122:	bd10      	pop	{r4, pc}
 8004124:	2000000c 	.word	0x2000000c
 8004128:	00000000 	.word	0x00000000
 800412c:	080056dc 	.word	0x080056dc

08004130 <frame_dummy>:
 8004130:	b508      	push	{r3, lr}
 8004132:	4b03      	ldr	r3, [pc, #12]	; (8004140 <frame_dummy+0x10>)
 8004134:	b11b      	cbz	r3, 800413e <frame_dummy+0xe>
 8004136:	4903      	ldr	r1, [pc, #12]	; (8004144 <frame_dummy+0x14>)
 8004138:	4803      	ldr	r0, [pc, #12]	; (8004148 <frame_dummy+0x18>)
 800413a:	f3af 8000 	nop.w
 800413e:	bd08      	pop	{r3, pc}
 8004140:	00000000 	.word	0x00000000
 8004144:	20000010 	.word	0x20000010
 8004148:	080056dc 	.word	0x080056dc

0800414c <strlen>:
 800414c:	4603      	mov	r3, r0
 800414e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004152:	2a00      	cmp	r2, #0
 8004154:	d1fb      	bne.n	800414e <strlen+0x2>
 8004156:	1a18      	subs	r0, r3, r0
 8004158:	3801      	subs	r0, #1
 800415a:	4770      	bx	lr

0800415c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004162:	f000 f96f 	bl	8004444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004166:	f000 f81b 	bl	80041a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800416a:	f000 f87f 	bl	800426c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800416e:	f000 f853 	bl	8004218 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char *message = "Hello STM32!\n";
 8004172:	4b09      	ldr	r3, [pc, #36]	; (8004198 <main+0x3c>)
 8004174:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff ffe8 	bl	800414c <strlen>
 800417c:	4603      	mov	r3, r0
 800417e:	b29a      	uxth	r2, r3
 8004180:	f04f 33ff 	mov.w	r3, #4294967295
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4805      	ldr	r0, [pc, #20]	; (800419c <main+0x40>)
 8004188:	f001 f8a8 	bl	80052dc <HAL_UART_Transmit>
	  HAL_Delay(2000);
 800418c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004190:	f000 f9ba 	bl	8004508 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8004194:	e7ef      	b.n	8004176 <main+0x1a>
 8004196:	bf00      	nop
 8004198:	080056f4 	.word	0x080056f4
 800419c:	20000028 	.word	0x20000028

080041a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b090      	sub	sp, #64	; 0x40
 80041a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041a6:	f107 0318 	add.w	r3, r7, #24
 80041aa:	2228      	movs	r2, #40	; 0x28
 80041ac:	2100      	movs	r1, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 fa8c 	bl	80056cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041b4:	1d3b      	adds	r3, r7, #4
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	605a      	str	r2, [r3, #4]
 80041bc:	609a      	str	r2, [r3, #8]
 80041be:	60da      	str	r2, [r3, #12]
 80041c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80041c2:	2302      	movs	r3, #2
 80041c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80041c6:	2301      	movs	r3, #1
 80041c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80041ca:	2310      	movs	r3, #16
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041d2:	f107 0318 	add.w	r3, r7, #24
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fc22 	bl	8004a20 <HAL_RCC_OscConfig>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80041e2:	f000 f859 	bl	8004298 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041e6:	230f      	movs	r3, #15
 80041e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fe8e 	bl	8004f20 <HAL_RCC_ClockConfig>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800420a:	f000 f845 	bl	8004298 <Error_Handler>
  }
}
 800420e:	bf00      	nop
 8004210:	3740      	adds	r7, #64	; 0x40
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800421c:	4b11      	ldr	r3, [pc, #68]	; (8004264 <MX_USART2_UART_Init+0x4c>)
 800421e:	4a12      	ldr	r2, [pc, #72]	; (8004268 <MX_USART2_UART_Init+0x50>)
 8004220:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <MX_USART2_UART_Init+0x4c>)
 8004224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004228:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800422a:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <MX_USART2_UART_Init+0x4c>)
 800422c:	2200      	movs	r2, #0
 800422e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <MX_USART2_UART_Init+0x4c>)
 8004232:	2200      	movs	r2, #0
 8004234:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004236:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <MX_USART2_UART_Init+0x4c>)
 8004238:	2200      	movs	r2, #0
 800423a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <MX_USART2_UART_Init+0x4c>)
 800423e:	220c      	movs	r2, #12
 8004240:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004242:	4b08      	ldr	r3, [pc, #32]	; (8004264 <MX_USART2_UART_Init+0x4c>)
 8004244:	2200      	movs	r2, #0
 8004246:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <MX_USART2_UART_Init+0x4c>)
 800424a:	2200      	movs	r2, #0
 800424c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800424e:	4805      	ldr	r0, [pc, #20]	; (8004264 <MX_USART2_UART_Init+0x4c>)
 8004250:	f000 fff4 	bl	800523c <HAL_UART_Init>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800425a:	f000 f81d 	bl	8004298 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000028 	.word	0x20000028
 8004268:	40004400 	.word	0x40004400

0800426c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <MX_GPIO_Init+0x28>)
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	4a07      	ldr	r2, [pc, #28]	; (8004294 <MX_GPIO_Init+0x28>)
 8004278:	f043 0304 	orr.w	r3, r3, #4
 800427c:	6193      	str	r3, [r2, #24]
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <MX_GPIO_Init+0x28>)
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	607b      	str	r3, [r7, #4]
 8004288:	687b      	ldr	r3, [r7, #4]

}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr
 8004294:	40021000 	.word	0x40021000

08004298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800429c:	b672      	cpsid	i
}
 800429e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042a0:	e7fe      	b.n	80042a0 <Error_Handler+0x8>
	...

080042a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80042aa:	4b15      	ldr	r3, [pc, #84]	; (8004300 <HAL_MspInit+0x5c>)
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	4a14      	ldr	r2, [pc, #80]	; (8004300 <HAL_MspInit+0x5c>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	6193      	str	r3, [r2, #24]
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <HAL_MspInit+0x5c>)
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042c2:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <HAL_MspInit+0x5c>)
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	4a0e      	ldr	r2, [pc, #56]	; (8004300 <HAL_MspInit+0x5c>)
 80042c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042cc:	61d3      	str	r3, [r2, #28]
 80042ce:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <HAL_MspInit+0x5c>)
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80042da:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <HAL_MspInit+0x60>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	4a04      	ldr	r2, [pc, #16]	; (8004304 <HAL_MspInit+0x60>)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr
 8004300:	40021000 	.word	0x40021000
 8004304:	40010000 	.word	0x40010000

08004308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004310:	f107 0310 	add.w	r3, r7, #16
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	609a      	str	r2, [r3, #8]
 800431c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1b      	ldr	r2, [pc, #108]	; (8004390 <HAL_UART_MspInit+0x88>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d12f      	bne.n	8004388 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004328:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <HAL_UART_MspInit+0x8c>)
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	4a19      	ldr	r2, [pc, #100]	; (8004394 <HAL_UART_MspInit+0x8c>)
 800432e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004332:	61d3      	str	r3, [r2, #28]
 8004334:	4b17      	ldr	r3, [pc, #92]	; (8004394 <HAL_UART_MspInit+0x8c>)
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004340:	4b14      	ldr	r3, [pc, #80]	; (8004394 <HAL_UART_MspInit+0x8c>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	4a13      	ldr	r2, [pc, #76]	; (8004394 <HAL_UART_MspInit+0x8c>)
 8004346:	f043 0304 	orr.w	r3, r3, #4
 800434a:	6193      	str	r3, [r2, #24]
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <HAL_UART_MspInit+0x8c>)
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004358:	2304      	movs	r3, #4
 800435a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435c:	2302      	movs	r3, #2
 800435e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004360:	2303      	movs	r3, #3
 8004362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004364:	f107 0310 	add.w	r3, r7, #16
 8004368:	4619      	mov	r1, r3
 800436a:	480b      	ldr	r0, [pc, #44]	; (8004398 <HAL_UART_MspInit+0x90>)
 800436c:	f000 f9d4 	bl	8004718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004370:	2308      	movs	r3, #8
 8004372:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	2300      	movs	r3, #0
 800437a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800437c:	f107 0310 	add.w	r3, r7, #16
 8004380:	4619      	mov	r1, r3
 8004382:	4805      	ldr	r0, [pc, #20]	; (8004398 <HAL_UART_MspInit+0x90>)
 8004384:	f000 f9c8 	bl	8004718 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004388:	bf00      	nop
 800438a:	3720      	adds	r7, #32
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40004400 	.word	0x40004400
 8004394:	40021000 	.word	0x40021000
 8004398:	40010800 	.word	0x40010800

0800439c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043a0:	e7fe      	b.n	80043a0 <NMI_Handler+0x4>

080043a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043a2:	b480      	push	{r7}
 80043a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043a6:	e7fe      	b.n	80043a6 <HardFault_Handler+0x4>

080043a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043ac:	e7fe      	b.n	80043ac <MemManage_Handler+0x4>

080043ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043ae:	b480      	push	{r7}
 80043b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043b2:	e7fe      	b.n	80043b2 <BusFault_Handler+0x4>

080043b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043b8:	e7fe      	b.n	80043b8 <UsageFault_Handler+0x4>

080043ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043ba:	b480      	push	{r7}
 80043bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043be:	bf00      	nop
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043c6:	b480      	push	{r7}
 80043c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043ca:	bf00      	nop
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043d2:	b480      	push	{r7}
 80043d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043d6:	bf00      	nop
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr

080043de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043e2:	f000 f875 	bl	80044d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}

080043ea <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043ea:	b480      	push	{r7}
 80043ec:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043ee:	bf00      	nop
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
	...

080043f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80043f8:	f7ff fff7 	bl	80043ea <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043fc:	480b      	ldr	r0, [pc, #44]	; (800442c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80043fe:	490c      	ldr	r1, [pc, #48]	; (8004430 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004400:	4a0c      	ldr	r2, [pc, #48]	; (8004434 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004404:	e002      	b.n	800440c <LoopCopyDataInit>

08004406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800440a:	3304      	adds	r3, #4

0800440c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800440c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800440e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004410:	d3f9      	bcc.n	8004406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004412:	4a09      	ldr	r2, [pc, #36]	; (8004438 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004414:	4c09      	ldr	r4, [pc, #36]	; (800443c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004418:	e001      	b.n	800441e <LoopFillZerobss>

0800441a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800441a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800441c:	3204      	adds	r2, #4

0800441e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800441e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004420:	d3fb      	bcc.n	800441a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004422:	f001 f92f 	bl	8005684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004426:	f7ff fe99 	bl	800415c <main>
  bx lr
 800442a:	4770      	bx	lr
  ldr r0, =_sdata
 800442c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004430:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004434:	08005738 	.word	0x08005738
  ldr r2, =_sbss
 8004438:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800443c:	20000074 	.word	0x20000074

08004440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004440:	e7fe      	b.n	8004440 <ADC1_2_IRQHandler>
	...

08004444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004448:	4b08      	ldr	r3, [pc, #32]	; (800446c <HAL_Init+0x28>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a07      	ldr	r2, [pc, #28]	; (800446c <HAL_Init+0x28>)
 800444e:	f043 0310 	orr.w	r3, r3, #16
 8004452:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004454:	2003      	movs	r0, #3
 8004456:	f000 f92b 	bl	80046b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800445a:	200f      	movs	r0, #15
 800445c:	f000 f808 	bl	8004470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004460:	f7ff ff20 	bl	80042a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40022000 	.word	0x40022000

08004470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004478:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <HAL_InitTick+0x54>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	4b12      	ldr	r3, [pc, #72]	; (80044c8 <HAL_InitTick+0x58>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	4619      	mov	r1, r3
 8004482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004486:	fbb3 f3f1 	udiv	r3, r3, r1
 800448a:	fbb2 f3f3 	udiv	r3, r2, r3
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f935 	bl	80046fe <HAL_SYSTICK_Config>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e00e      	b.n	80044bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b0f      	cmp	r3, #15
 80044a2:	d80a      	bhi.n	80044ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044a4:	2200      	movs	r2, #0
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ac:	f000 f90b 	bl	80046c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044b0:	4a06      	ldr	r2, [pc, #24]	; (80044cc <HAL_InitTick+0x5c>)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e000      	b.n	80044bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20000000 	.word	0x20000000
 80044c8:	20000008 	.word	0x20000008
 80044cc:	20000004 	.word	0x20000004

080044d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <HAL_IncTick+0x1c>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_IncTick+0x20>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4413      	add	r3, r2
 80044e0:	4a03      	ldr	r2, [pc, #12]	; (80044f0 <HAL_IncTick+0x20>)
 80044e2:	6013      	str	r3, [r2, #0]
}
 80044e4:	bf00      	nop
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	20000008 	.word	0x20000008
 80044f0:	20000070 	.word	0x20000070

080044f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return uwTick;
 80044f8:	4b02      	ldr	r3, [pc, #8]	; (8004504 <HAL_GetTick+0x10>)
 80044fa:	681b      	ldr	r3, [r3, #0]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr
 8004504:	20000070 	.word	0x20000070

08004508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004510:	f7ff fff0 	bl	80044f4 <HAL_GetTick>
 8004514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d005      	beq.n	800452e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004522:	4b0a      	ldr	r3, [pc, #40]	; (800454c <HAL_Delay+0x44>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800452e:	bf00      	nop
 8004530:	f7ff ffe0 	bl	80044f4 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	429a      	cmp	r2, r3
 800453e:	d8f7      	bhi.n	8004530 <HAL_Delay+0x28>
  {
  }
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000008 	.word	0x20000008

08004550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004560:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <__NVIC_SetPriorityGrouping+0x44>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800456c:	4013      	ands	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800457c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004582:	4a04      	ldr	r2, [pc, #16]	; (8004594 <__NVIC_SetPriorityGrouping+0x44>)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	60d3      	str	r3, [r2, #12]
}
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	e000ed00 	.word	0xe000ed00

08004598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <__NVIC_GetPriorityGrouping+0x18>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	0a1b      	lsrs	r3, r3, #8
 80045a2:	f003 0307 	and.w	r3, r3, #7
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	e000ed00 	.word	0xe000ed00

080045b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	6039      	str	r1, [r7, #0]
 80045be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	db0a      	blt.n	80045de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	490c      	ldr	r1, [pc, #48]	; (8004600 <__NVIC_SetPriority+0x4c>)
 80045ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d2:	0112      	lsls	r2, r2, #4
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	440b      	add	r3, r1
 80045d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045dc:	e00a      	b.n	80045f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	4908      	ldr	r1, [pc, #32]	; (8004604 <__NVIC_SetPriority+0x50>)
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	3b04      	subs	r3, #4
 80045ec:	0112      	lsls	r2, r2, #4
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	440b      	add	r3, r1
 80045f2:	761a      	strb	r2, [r3, #24]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	e000e100 	.word	0xe000e100
 8004604:	e000ed00 	.word	0xe000ed00

08004608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004608:	b480      	push	{r7}
 800460a:	b089      	sub	sp, #36	; 0x24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f1c3 0307 	rsb	r3, r3, #7
 8004622:	2b04      	cmp	r3, #4
 8004624:	bf28      	it	cs
 8004626:	2304      	movcs	r3, #4
 8004628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	3304      	adds	r3, #4
 800462e:	2b06      	cmp	r3, #6
 8004630:	d902      	bls.n	8004638 <NVIC_EncodePriority+0x30>
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3b03      	subs	r3, #3
 8004636:	e000      	b.n	800463a <NVIC_EncodePriority+0x32>
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800463c:	f04f 32ff 	mov.w	r2, #4294967295
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43da      	mvns	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	401a      	ands	r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004650:	f04f 31ff 	mov.w	r1, #4294967295
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	fa01 f303 	lsl.w	r3, r1, r3
 800465a:	43d9      	mvns	r1, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004660:	4313      	orrs	r3, r2
         );
}
 8004662:	4618      	mov	r0, r3
 8004664:	3724      	adds	r7, #36	; 0x24
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3b01      	subs	r3, #1
 8004678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800467c:	d301      	bcc.n	8004682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800467e:	2301      	movs	r3, #1
 8004680:	e00f      	b.n	80046a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004682:	4a0a      	ldr	r2, [pc, #40]	; (80046ac <SysTick_Config+0x40>)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3b01      	subs	r3, #1
 8004688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800468a:	210f      	movs	r1, #15
 800468c:	f04f 30ff 	mov.w	r0, #4294967295
 8004690:	f7ff ff90 	bl	80045b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <SysTick_Config+0x40>)
 8004696:	2200      	movs	r2, #0
 8004698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800469a:	4b04      	ldr	r3, [pc, #16]	; (80046ac <SysTick_Config+0x40>)
 800469c:	2207      	movs	r2, #7
 800469e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	e000e010 	.word	0xe000e010

080046b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff ff49 	bl	8004550 <__NVIC_SetPriorityGrouping>
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b086      	sub	sp, #24
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	4603      	mov	r3, r0
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
 80046d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046d8:	f7ff ff5e 	bl	8004598 <__NVIC_GetPriorityGrouping>
 80046dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	6978      	ldr	r0, [r7, #20]
 80046e4:	f7ff ff90 	bl	8004608 <NVIC_EncodePriority>
 80046e8:	4602      	mov	r2, r0
 80046ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ee:	4611      	mov	r1, r2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff5f 	bl	80045b4 <__NVIC_SetPriority>
}
 80046f6:	bf00      	nop
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff ffb0 	bl	800466c <SysTick_Config>
 800470c:	4603      	mov	r3, r0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004718:	b480      	push	{r7}
 800471a:	b08b      	sub	sp, #44	; 0x2c
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004722:	2300      	movs	r3, #0
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004726:	2300      	movs	r3, #0
 8004728:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800472a:	e169      	b.n	8004a00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800472c:	2201      	movs	r2, #1
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	429a      	cmp	r2, r3
 8004746:	f040 8158 	bne.w	80049fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	4a9a      	ldr	r2, [pc, #616]	; (80049b8 <HAL_GPIO_Init+0x2a0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d05e      	beq.n	8004812 <HAL_GPIO_Init+0xfa>
 8004754:	4a98      	ldr	r2, [pc, #608]	; (80049b8 <HAL_GPIO_Init+0x2a0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d875      	bhi.n	8004846 <HAL_GPIO_Init+0x12e>
 800475a:	4a98      	ldr	r2, [pc, #608]	; (80049bc <HAL_GPIO_Init+0x2a4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d058      	beq.n	8004812 <HAL_GPIO_Init+0xfa>
 8004760:	4a96      	ldr	r2, [pc, #600]	; (80049bc <HAL_GPIO_Init+0x2a4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d86f      	bhi.n	8004846 <HAL_GPIO_Init+0x12e>
 8004766:	4a96      	ldr	r2, [pc, #600]	; (80049c0 <HAL_GPIO_Init+0x2a8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d052      	beq.n	8004812 <HAL_GPIO_Init+0xfa>
 800476c:	4a94      	ldr	r2, [pc, #592]	; (80049c0 <HAL_GPIO_Init+0x2a8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d869      	bhi.n	8004846 <HAL_GPIO_Init+0x12e>
 8004772:	4a94      	ldr	r2, [pc, #592]	; (80049c4 <HAL_GPIO_Init+0x2ac>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d04c      	beq.n	8004812 <HAL_GPIO_Init+0xfa>
 8004778:	4a92      	ldr	r2, [pc, #584]	; (80049c4 <HAL_GPIO_Init+0x2ac>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d863      	bhi.n	8004846 <HAL_GPIO_Init+0x12e>
 800477e:	4a92      	ldr	r2, [pc, #584]	; (80049c8 <HAL_GPIO_Init+0x2b0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d046      	beq.n	8004812 <HAL_GPIO_Init+0xfa>
 8004784:	4a90      	ldr	r2, [pc, #576]	; (80049c8 <HAL_GPIO_Init+0x2b0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d85d      	bhi.n	8004846 <HAL_GPIO_Init+0x12e>
 800478a:	2b12      	cmp	r3, #18
 800478c:	d82a      	bhi.n	80047e4 <HAL_GPIO_Init+0xcc>
 800478e:	2b12      	cmp	r3, #18
 8004790:	d859      	bhi.n	8004846 <HAL_GPIO_Init+0x12e>
 8004792:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <HAL_GPIO_Init+0x80>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	08004813 	.word	0x08004813
 800479c:	080047ed 	.word	0x080047ed
 80047a0:	080047ff 	.word	0x080047ff
 80047a4:	08004841 	.word	0x08004841
 80047a8:	08004847 	.word	0x08004847
 80047ac:	08004847 	.word	0x08004847
 80047b0:	08004847 	.word	0x08004847
 80047b4:	08004847 	.word	0x08004847
 80047b8:	08004847 	.word	0x08004847
 80047bc:	08004847 	.word	0x08004847
 80047c0:	08004847 	.word	0x08004847
 80047c4:	08004847 	.word	0x08004847
 80047c8:	08004847 	.word	0x08004847
 80047cc:	08004847 	.word	0x08004847
 80047d0:	08004847 	.word	0x08004847
 80047d4:	08004847 	.word	0x08004847
 80047d8:	08004847 	.word	0x08004847
 80047dc:	080047f5 	.word	0x080047f5
 80047e0:	08004809 	.word	0x08004809
 80047e4:	4a79      	ldr	r2, [pc, #484]	; (80049cc <HAL_GPIO_Init+0x2b4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d013      	beq.n	8004812 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80047ea:	e02c      	b.n	8004846 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	623b      	str	r3, [r7, #32]
          break;
 80047f2:	e029      	b.n	8004848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	3304      	adds	r3, #4
 80047fa:	623b      	str	r3, [r7, #32]
          break;
 80047fc:	e024      	b.n	8004848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	3308      	adds	r3, #8
 8004804:	623b      	str	r3, [r7, #32]
          break;
 8004806:	e01f      	b.n	8004848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	330c      	adds	r3, #12
 800480e:	623b      	str	r3, [r7, #32]
          break;
 8004810:	e01a      	b.n	8004848 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d102      	bne.n	8004820 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800481a:	2304      	movs	r3, #4
 800481c:	623b      	str	r3, [r7, #32]
          break;
 800481e:	e013      	b.n	8004848 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d105      	bne.n	8004834 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004828:	2308      	movs	r3, #8
 800482a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	611a      	str	r2, [r3, #16]
          break;
 8004832:	e009      	b.n	8004848 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004834:	2308      	movs	r3, #8
 8004836:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69fa      	ldr	r2, [r7, #28]
 800483c:	615a      	str	r2, [r3, #20]
          break;
 800483e:	e003      	b.n	8004848 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004840:	2300      	movs	r3, #0
 8004842:	623b      	str	r3, [r7, #32]
          break;
 8004844:	e000      	b.n	8004848 <HAL_GPIO_Init+0x130>
          break;
 8004846:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	2bff      	cmp	r3, #255	; 0xff
 800484c:	d801      	bhi.n	8004852 <HAL_GPIO_Init+0x13a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	e001      	b.n	8004856 <HAL_GPIO_Init+0x13e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3304      	adds	r3, #4
 8004856:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2bff      	cmp	r3, #255	; 0xff
 800485c:	d802      	bhi.n	8004864 <HAL_GPIO_Init+0x14c>
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	e002      	b.n	800486a <HAL_GPIO_Init+0x152>
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	3b08      	subs	r3, #8
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	210f      	movs	r1, #15
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	fa01 f303 	lsl.w	r3, r1, r3
 8004878:	43db      	mvns	r3, r3
 800487a:	401a      	ands	r2, r3
 800487c:	6a39      	ldr	r1, [r7, #32]
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	fa01 f303 	lsl.w	r3, r1, r3
 8004884:	431a      	orrs	r2, r3
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 80b1 	beq.w	80049fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004898:	4b4d      	ldr	r3, [pc, #308]	; (80049d0 <HAL_GPIO_Init+0x2b8>)
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	4a4c      	ldr	r2, [pc, #304]	; (80049d0 <HAL_GPIO_Init+0x2b8>)
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	6193      	str	r3, [r2, #24]
 80048a4:	4b4a      	ldr	r3, [pc, #296]	; (80049d0 <HAL_GPIO_Init+0x2b8>)
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	60bb      	str	r3, [r7, #8]
 80048ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80048b0:	4a48      	ldr	r2, [pc, #288]	; (80049d4 <HAL_GPIO_Init+0x2bc>)
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	089b      	lsrs	r3, r3, #2
 80048b6:	3302      	adds	r3, #2
 80048b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	220f      	movs	r2, #15
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4013      	ands	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a40      	ldr	r2, [pc, #256]	; (80049d8 <HAL_GPIO_Init+0x2c0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d013      	beq.n	8004904 <HAL_GPIO_Init+0x1ec>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a3f      	ldr	r2, [pc, #252]	; (80049dc <HAL_GPIO_Init+0x2c4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00d      	beq.n	8004900 <HAL_GPIO_Init+0x1e8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a3e      	ldr	r2, [pc, #248]	; (80049e0 <HAL_GPIO_Init+0x2c8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d007      	beq.n	80048fc <HAL_GPIO_Init+0x1e4>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a3d      	ldr	r2, [pc, #244]	; (80049e4 <HAL_GPIO_Init+0x2cc>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d101      	bne.n	80048f8 <HAL_GPIO_Init+0x1e0>
 80048f4:	2303      	movs	r3, #3
 80048f6:	e006      	b.n	8004906 <HAL_GPIO_Init+0x1ee>
 80048f8:	2304      	movs	r3, #4
 80048fa:	e004      	b.n	8004906 <HAL_GPIO_Init+0x1ee>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e002      	b.n	8004906 <HAL_GPIO_Init+0x1ee>
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <HAL_GPIO_Init+0x1ee>
 8004904:	2300      	movs	r3, #0
 8004906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004908:	f002 0203 	and.w	r2, r2, #3
 800490c:	0092      	lsls	r2, r2, #2
 800490e:	4093      	lsls	r3, r2
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004916:	492f      	ldr	r1, [pc, #188]	; (80049d4 <HAL_GPIO_Init+0x2bc>)
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	089b      	lsrs	r3, r3, #2
 800491c:	3302      	adds	r3, #2
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d006      	beq.n	800493e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004930:	4b2d      	ldr	r3, [pc, #180]	; (80049e8 <HAL_GPIO_Init+0x2d0>)
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	492c      	ldr	r1, [pc, #176]	; (80049e8 <HAL_GPIO_Init+0x2d0>)
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	4313      	orrs	r3, r2
 800493a:	608b      	str	r3, [r1, #8]
 800493c:	e006      	b.n	800494c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800493e:	4b2a      	ldr	r3, [pc, #168]	; (80049e8 <HAL_GPIO_Init+0x2d0>)
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	43db      	mvns	r3, r3
 8004946:	4928      	ldr	r1, [pc, #160]	; (80049e8 <HAL_GPIO_Init+0x2d0>)
 8004948:	4013      	ands	r3, r2
 800494a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d006      	beq.n	8004966 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004958:	4b23      	ldr	r3, [pc, #140]	; (80049e8 <HAL_GPIO_Init+0x2d0>)
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	4922      	ldr	r1, [pc, #136]	; (80049e8 <HAL_GPIO_Init+0x2d0>)
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	4313      	orrs	r3, r2
 8004962:	60cb      	str	r3, [r1, #12]
 8004964:	e006      	b.n	8004974 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004966:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <HAL_GPIO_Init+0x2d0>)
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	43db      	mvns	r3, r3
 800496e:	491e      	ldr	r1, [pc, #120]	; (80049e8 <HAL_GPIO_Init+0x2d0>)
 8004970:	4013      	ands	r3, r2
 8004972:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d006      	beq.n	800498e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004980:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <HAL_GPIO_Init+0x2d0>)
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	4918      	ldr	r1, [pc, #96]	; (80049e8 <HAL_GPIO_Init+0x2d0>)
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	4313      	orrs	r3, r2
 800498a:	604b      	str	r3, [r1, #4]
 800498c:	e006      	b.n	800499c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800498e:	4b16      	ldr	r3, [pc, #88]	; (80049e8 <HAL_GPIO_Init+0x2d0>)
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	43db      	mvns	r3, r3
 8004996:	4914      	ldr	r1, [pc, #80]	; (80049e8 <HAL_GPIO_Init+0x2d0>)
 8004998:	4013      	ands	r3, r2
 800499a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d021      	beq.n	80049ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80049a8:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <HAL_GPIO_Init+0x2d0>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	490e      	ldr	r1, [pc, #56]	; (80049e8 <HAL_GPIO_Init+0x2d0>)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	600b      	str	r3, [r1, #0]
 80049b4:	e021      	b.n	80049fa <HAL_GPIO_Init+0x2e2>
 80049b6:	bf00      	nop
 80049b8:	10320000 	.word	0x10320000
 80049bc:	10310000 	.word	0x10310000
 80049c0:	10220000 	.word	0x10220000
 80049c4:	10210000 	.word	0x10210000
 80049c8:	10120000 	.word	0x10120000
 80049cc:	10110000 	.word	0x10110000
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40010000 	.word	0x40010000
 80049d8:	40010800 	.word	0x40010800
 80049dc:	40010c00 	.word	0x40010c00
 80049e0:	40011000 	.word	0x40011000
 80049e4:	40011400 	.word	0x40011400
 80049e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_GPIO_Init+0x304>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	43db      	mvns	r3, r3
 80049f4:	4909      	ldr	r1, [pc, #36]	; (8004a1c <HAL_GPIO_Init+0x304>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	3301      	adds	r3, #1
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f47f ae8e 	bne.w	800472c <HAL_GPIO_Init+0x14>
  }
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop
 8004a14:	372c      	adds	r7, #44	; 0x2c
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr
 8004a1c:	40010400 	.word	0x40010400

08004a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e26c      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8087 	beq.w	8004b4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a40:	4b92      	ldr	r3, [pc, #584]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d00c      	beq.n	8004a66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a4c:	4b8f      	ldr	r3, [pc, #572]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 030c 	and.w	r3, r3, #12
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d112      	bne.n	8004a7e <HAL_RCC_OscConfig+0x5e>
 8004a58:	4b8c      	ldr	r3, [pc, #560]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a64:	d10b      	bne.n	8004a7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a66:	4b89      	ldr	r3, [pc, #548]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d06c      	beq.n	8004b4c <HAL_RCC_OscConfig+0x12c>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d168      	bne.n	8004b4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e246      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a86:	d106      	bne.n	8004a96 <HAL_RCC_OscConfig+0x76>
 8004a88:	4b80      	ldr	r3, [pc, #512]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a7f      	ldr	r2, [pc, #508]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	e02e      	b.n	8004af4 <HAL_RCC_OscConfig+0xd4>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x98>
 8004a9e:	4b7b      	ldr	r3, [pc, #492]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7a      	ldr	r2, [pc, #488]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b78      	ldr	r3, [pc, #480]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a77      	ldr	r2, [pc, #476]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e01d      	b.n	8004af4 <HAL_RCC_OscConfig+0xd4>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ac0:	d10c      	bne.n	8004adc <HAL_RCC_OscConfig+0xbc>
 8004ac2:	4b72      	ldr	r3, [pc, #456]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a71      	ldr	r2, [pc, #452]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	4b6f      	ldr	r3, [pc, #444]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a6e      	ldr	r2, [pc, #440]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e00b      	b.n	8004af4 <HAL_RCC_OscConfig+0xd4>
 8004adc:	4b6b      	ldr	r3, [pc, #428]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a6a      	ldr	r2, [pc, #424]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	4b68      	ldr	r3, [pc, #416]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a67      	ldr	r2, [pc, #412]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d013      	beq.n	8004b24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7ff fcfa 	bl	80044f4 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b04:	f7ff fcf6 	bl	80044f4 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	; 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e1fa      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b16:	4b5d      	ldr	r3, [pc, #372]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0xe4>
 8004b22:	e014      	b.n	8004b4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b24:	f7ff fce6 	bl	80044f4 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b2c:	f7ff fce2 	bl	80044f4 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b64      	cmp	r3, #100	; 0x64
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e1e6      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3e:	4b53      	ldr	r3, [pc, #332]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0x10c>
 8004b4a:	e000      	b.n	8004b4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d063      	beq.n	8004c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b5a:	4b4c      	ldr	r3, [pc, #304]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b66:	4b49      	ldr	r3, [pc, #292]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d11c      	bne.n	8004bac <HAL_RCC_OscConfig+0x18c>
 8004b72:	4b46      	ldr	r3, [pc, #280]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d116      	bne.n	8004bac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7e:	4b43      	ldr	r3, [pc, #268]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_RCC_OscConfig+0x176>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d001      	beq.n	8004b96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e1ba      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b96:	4b3d      	ldr	r3, [pc, #244]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4939      	ldr	r1, [pc, #228]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004baa:	e03a      	b.n	8004c22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d020      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb4:	4b36      	ldr	r3, [pc, #216]	; (8004c90 <HAL_RCC_OscConfig+0x270>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bba:	f7ff fc9b 	bl	80044f4 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc2:	f7ff fc97 	bl	80044f4 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e19b      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd4:	4b2d      	ldr	r3, [pc, #180]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be0:	4b2a      	ldr	r3, [pc, #168]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	4927      	ldr	r1, [pc, #156]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	600b      	str	r3, [r1, #0]
 8004bf4:	e015      	b.n	8004c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf6:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <HAL_RCC_OscConfig+0x270>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7ff fc7a 	bl	80044f4 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c04:	f7ff fc76 	bl	80044f4 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e17a      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c16:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d03a      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d019      	beq.n	8004c6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c36:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3c:	f7ff fc5a 	bl	80044f4 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c44:	f7ff fc56 	bl	80044f4 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e15a      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c56:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <HAL_RCC_OscConfig+0x26c>)
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c62:	2001      	movs	r0, #1
 8004c64:	f000 facc 	bl	8005200 <RCC_Delay>
 8004c68:	e01c      	b.n	8004ca4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <HAL_RCC_OscConfig+0x274>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c70:	f7ff fc40 	bl	80044f4 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c76:	e00f      	b.n	8004c98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c78:	f7ff fc3c 	bl	80044f4 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d908      	bls.n	8004c98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e140      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
 8004c8a:	bf00      	nop
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	42420000 	.word	0x42420000
 8004c94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c98:	4b9e      	ldr	r3, [pc, #632]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e9      	bne.n	8004c78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80a6 	beq.w	8004dfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb6:	4b97      	ldr	r3, [pc, #604]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10d      	bne.n	8004cde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc2:	4b94      	ldr	r3, [pc, #592]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	4a93      	ldr	r2, [pc, #588]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	61d3      	str	r3, [r2, #28]
 8004cce:	4b91      	ldr	r3, [pc, #580]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cde:	4b8e      	ldr	r3, [pc, #568]	; (8004f18 <HAL_RCC_OscConfig+0x4f8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d118      	bne.n	8004d1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cea:	4b8b      	ldr	r3, [pc, #556]	; (8004f18 <HAL_RCC_OscConfig+0x4f8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a8a      	ldr	r2, [pc, #552]	; (8004f18 <HAL_RCC_OscConfig+0x4f8>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf6:	f7ff fbfd 	bl	80044f4 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfe:	f7ff fbf9 	bl	80044f4 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b64      	cmp	r3, #100	; 0x64
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e0fd      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d10:	4b81      	ldr	r3, [pc, #516]	; (8004f18 <HAL_RCC_OscConfig+0x4f8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d106      	bne.n	8004d32 <HAL_RCC_OscConfig+0x312>
 8004d24:	4b7b      	ldr	r3, [pc, #492]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	4a7a      	ldr	r2, [pc, #488]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	6213      	str	r3, [r2, #32]
 8004d30:	e02d      	b.n	8004d8e <HAL_RCC_OscConfig+0x36e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCC_OscConfig+0x334>
 8004d3a:	4b76      	ldr	r3, [pc, #472]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	4a75      	ldr	r2, [pc, #468]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	6213      	str	r3, [r2, #32]
 8004d46:	4b73      	ldr	r3, [pc, #460]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	4a72      	ldr	r2, [pc, #456]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d4c:	f023 0304 	bic.w	r3, r3, #4
 8004d50:	6213      	str	r3, [r2, #32]
 8004d52:	e01c      	b.n	8004d8e <HAL_RCC_OscConfig+0x36e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2b05      	cmp	r3, #5
 8004d5a:	d10c      	bne.n	8004d76 <HAL_RCC_OscConfig+0x356>
 8004d5c:	4b6d      	ldr	r3, [pc, #436]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	4a6c      	ldr	r2, [pc, #432]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d62:	f043 0304 	orr.w	r3, r3, #4
 8004d66:	6213      	str	r3, [r2, #32]
 8004d68:	4b6a      	ldr	r3, [pc, #424]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	4a69      	ldr	r2, [pc, #420]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	6213      	str	r3, [r2, #32]
 8004d74:	e00b      	b.n	8004d8e <HAL_RCC_OscConfig+0x36e>
 8004d76:	4b67      	ldr	r3, [pc, #412]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	4a66      	ldr	r2, [pc, #408]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	6213      	str	r3, [r2, #32]
 8004d82:	4b64      	ldr	r3, [pc, #400]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	4a63      	ldr	r2, [pc, #396]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004d88:	f023 0304 	bic.w	r3, r3, #4
 8004d8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d015      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d96:	f7ff fbad 	bl	80044f4 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9c:	e00a      	b.n	8004db4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9e:	f7ff fba9 	bl	80044f4 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e0ab      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db4:	4b57      	ldr	r3, [pc, #348]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0ee      	beq.n	8004d9e <HAL_RCC_OscConfig+0x37e>
 8004dc0:	e014      	b.n	8004dec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc2:	f7ff fb97 	bl	80044f4 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc8:	e00a      	b.n	8004de0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dca:	f7ff fb93 	bl	80044f4 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e095      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de0:	4b4c      	ldr	r3, [pc, #304]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1ee      	bne.n	8004dca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dec:	7dfb      	ldrb	r3, [r7, #23]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d105      	bne.n	8004dfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df2:	4b48      	ldr	r3, [pc, #288]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	4a47      	ldr	r2, [pc, #284]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8081 	beq.w	8004f0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e08:	4b42      	ldr	r3, [pc, #264]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 030c 	and.w	r3, r3, #12
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d061      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d146      	bne.n	8004eaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1c:	4b3f      	ldr	r3, [pc, #252]	; (8004f1c <HAL_RCC_OscConfig+0x4fc>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e22:	f7ff fb67 	bl	80044f4 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2a:	f7ff fb63 	bl	80044f4 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e067      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e3c:	4b35      	ldr	r3, [pc, #212]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1f0      	bne.n	8004e2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e50:	d108      	bne.n	8004e64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e52:	4b30      	ldr	r3, [pc, #192]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	492d      	ldr	r1, [pc, #180]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e64:	4b2b      	ldr	r3, [pc, #172]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a19      	ldr	r1, [r3, #32]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	430b      	orrs	r3, r1
 8004e76:	4927      	ldr	r1, [pc, #156]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e7c:	4b27      	ldr	r3, [pc, #156]	; (8004f1c <HAL_RCC_OscConfig+0x4fc>)
 8004e7e:	2201      	movs	r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7ff fb37 	bl	80044f4 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8a:	f7ff fb33 	bl	80044f4 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e037      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e9c:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_RCC_OscConfig+0x46a>
 8004ea8:	e02f      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eaa:	4b1c      	ldr	r3, [pc, #112]	; (8004f1c <HAL_RCC_OscConfig+0x4fc>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb0:	f7ff fb20 	bl	80044f4 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7ff fb1c 	bl	80044f4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e020      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x498>
 8004ed6:	e018      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e013      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <HAL_RCC_OscConfig+0x4f4>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d001      	beq.n	8004f0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40007000 	.word	0x40007000
 8004f1c:	42420060 	.word	0x42420060

08004f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0d0      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f34:	4b6a      	ldr	r3, [pc, #424]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d910      	bls.n	8004f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f42:	4b67      	ldr	r3, [pc, #412]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 0207 	bic.w	r2, r3, #7
 8004f4a:	4965      	ldr	r1, [pc, #404]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f52:	4b63      	ldr	r3, [pc, #396]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d001      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0b8      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d020      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f7c:	4b59      	ldr	r3, [pc, #356]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4a58      	ldr	r2, [pc, #352]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f94:	4b53      	ldr	r3, [pc, #332]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4a52      	ldr	r2, [pc, #328]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa0:	4b50      	ldr	r3, [pc, #320]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	494d      	ldr	r1, [pc, #308]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d040      	beq.n	8005040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d107      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc6:	4b47      	ldr	r3, [pc, #284]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d115      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e07f      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d107      	bne.n	8004fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fde:	4b41      	ldr	r3, [pc, #260]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e073      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fee:	4b3d      	ldr	r3, [pc, #244]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e06b      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ffe:	4b39      	ldr	r3, [pc, #228]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f023 0203 	bic.w	r2, r3, #3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	4936      	ldr	r1, [pc, #216]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 800500c:	4313      	orrs	r3, r2
 800500e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005010:	f7ff fa70 	bl	80044f4 <HAL_GetTick>
 8005014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005016:	e00a      	b.n	800502e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005018:	f7ff fa6c 	bl	80044f4 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	; 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e053      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502e:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f003 020c 	and.w	r2, r3, #12
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	429a      	cmp	r2, r3
 800503e:	d1eb      	bne.n	8005018 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d210      	bcs.n	8005070 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 0207 	bic.w	r2, r3, #7
 8005056:	4922      	ldr	r1, [pc, #136]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b20      	ldr	r3, [pc, #128]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e032      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	d008      	beq.n	800508e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800507c:	4b19      	ldr	r3, [pc, #100]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	4916      	ldr	r1, [pc, #88]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	4313      	orrs	r3, r2
 800508c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800509a:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	490e      	ldr	r1, [pc, #56]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ae:	f000 f821 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80050b2:	4602      	mov	r2, r0
 80050b4:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	490a      	ldr	r1, [pc, #40]	; (80050e8 <HAL_RCC_ClockConfig+0x1c8>)
 80050c0:	5ccb      	ldrb	r3, [r1, r3]
 80050c2:	fa22 f303 	lsr.w	r3, r2, r3
 80050c6:	4a09      	ldr	r2, [pc, #36]	; (80050ec <HAL_RCC_ClockConfig+0x1cc>)
 80050c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050ca:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <HAL_RCC_ClockConfig+0x1d0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff f9ce 	bl	8004470 <HAL_InitTick>

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40022000 	.word	0x40022000
 80050e4:	40021000 	.word	0x40021000
 80050e8:	08005704 	.word	0x08005704
 80050ec:	20000000 	.word	0x20000000
 80050f0:	20000004 	.word	0x20000004

080050f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	2300      	movs	r3, #0
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	2300      	movs	r3, #0
 8005108:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800510e:	4b1e      	ldr	r3, [pc, #120]	; (8005188 <HAL_RCC_GetSysClockFreq+0x94>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b04      	cmp	r3, #4
 800511c:	d002      	beq.n	8005124 <HAL_RCC_GetSysClockFreq+0x30>
 800511e:	2b08      	cmp	r3, #8
 8005120:	d003      	beq.n	800512a <HAL_RCC_GetSysClockFreq+0x36>
 8005122:	e027      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005124:	4b19      	ldr	r3, [pc, #100]	; (800518c <HAL_RCC_GetSysClockFreq+0x98>)
 8005126:	613b      	str	r3, [r7, #16]
      break;
 8005128:	e027      	b.n	800517a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	0c9b      	lsrs	r3, r3, #18
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	4a17      	ldr	r2, [pc, #92]	; (8005190 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005134:	5cd3      	ldrb	r3, [r2, r3]
 8005136:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d010      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005142:	4b11      	ldr	r3, [pc, #68]	; (8005188 <HAL_RCC_GetSysClockFreq+0x94>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	0c5b      	lsrs	r3, r3, #17
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	4a11      	ldr	r2, [pc, #68]	; (8005194 <HAL_RCC_GetSysClockFreq+0xa0>)
 800514e:	5cd3      	ldrb	r3, [r2, r3]
 8005150:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a0d      	ldr	r2, [pc, #52]	; (800518c <HAL_RCC_GetSysClockFreq+0x98>)
 8005156:	fb02 f203 	mul.w	r2, r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	e004      	b.n	800516e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a0c      	ldr	r2, [pc, #48]	; (8005198 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005168:	fb02 f303 	mul.w	r3, r2, r3
 800516c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	613b      	str	r3, [r7, #16]
      break;
 8005172:	e002      	b.n	800517a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <HAL_RCC_GetSysClockFreq+0x98>)
 8005176:	613b      	str	r3, [r7, #16]
      break;
 8005178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800517a:	693b      	ldr	r3, [r7, #16]
}
 800517c:	4618      	mov	r0, r3
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40021000 	.word	0x40021000
 800518c:	007a1200 	.word	0x007a1200
 8005190:	0800571c 	.word	0x0800571c
 8005194:	0800572c 	.word	0x0800572c
 8005198:	003d0900 	.word	0x003d0900

0800519c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051a0:	4b02      	ldr	r3, [pc, #8]	; (80051ac <HAL_RCC_GetHCLKFreq+0x10>)
 80051a2:	681b      	ldr	r3, [r3, #0]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr
 80051ac:	20000000 	.word	0x20000000

080051b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051b4:	f7ff fff2 	bl	800519c <HAL_RCC_GetHCLKFreq>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	0a1b      	lsrs	r3, r3, #8
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	4903      	ldr	r1, [pc, #12]	; (80051d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c6:	5ccb      	ldrb	r3, [r1, r3]
 80051c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40021000 	.word	0x40021000
 80051d4:	08005714 	.word	0x08005714

080051d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051dc:	f7ff ffde 	bl	800519c <HAL_RCC_GetHCLKFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	0adb      	lsrs	r3, r3, #11
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	4903      	ldr	r1, [pc, #12]	; (80051fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40021000 	.word	0x40021000
 80051fc:	08005714 	.word	0x08005714

08005200 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <RCC_Delay+0x34>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a0a      	ldr	r2, [pc, #40]	; (8005238 <RCC_Delay+0x38>)
 800520e:	fba2 2303 	umull	r2, r3, r2, r3
 8005212:	0a5b      	lsrs	r3, r3, #9
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	fb02 f303 	mul.w	r3, r2, r3
 800521a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800521c:	bf00      	nop
  }
  while (Delay --);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1e5a      	subs	r2, r3, #1
 8005222:	60fa      	str	r2, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f9      	bne.n	800521c <RCC_Delay+0x1c>
}
 8005228:	bf00      	nop
 800522a:	bf00      	nop
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr
 8005234:	20000000 	.word	0x20000000
 8005238:	10624dd3 	.word	0x10624dd3

0800523c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e042      	b.n	80052d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d106      	bne.n	8005268 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff f850 	bl	8004308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2224      	movs	r2, #36	; 0x24
 800526c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800527e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f971 	bl	8005568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005294:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695a      	ldr	r2, [r3, #20]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08a      	sub	sp, #40	; 0x28
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	4613      	mov	r3, r2
 80052ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d175      	bne.n	80053e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <HAL_UART_Transmit+0x2c>
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e06e      	b.n	80053ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2221      	movs	r2, #33	; 0x21
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800531a:	f7ff f8eb 	bl	80044f4 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	88fa      	ldrh	r2, [r7, #6]
 800532a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005334:	d108      	bne.n	8005348 <HAL_UART_Transmit+0x6c>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d104      	bne.n	8005348 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800533e:	2300      	movs	r3, #0
 8005340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	e003      	b.n	8005350 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800534c:	2300      	movs	r3, #0
 800534e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005350:	e02e      	b.n	80053b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2200      	movs	r2, #0
 800535a:	2180      	movs	r1, #128	; 0x80
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f848 	bl	80053f2 <UART_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e03a      	b.n	80053ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10b      	bne.n	8005392 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005388:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	3302      	adds	r3, #2
 800538e:	61bb      	str	r3, [r7, #24]
 8005390:	e007      	b.n	80053a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	781a      	ldrb	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	3301      	adds	r3, #1
 80053a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1cb      	bne.n	8005352 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2200      	movs	r2, #0
 80053c2:	2140      	movs	r1, #64	; 0x40
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f814 	bl	80053f2 <UART_WaitOnFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e006      	b.n	80053ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	e000      	b.n	80053ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80053e8:	2302      	movs	r3, #2
  }
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3720      	adds	r7, #32
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b086      	sub	sp, #24
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	603b      	str	r3, [r7, #0]
 80053fe:	4613      	mov	r3, r2
 8005400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005402:	e03b      	b.n	800547c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	d037      	beq.n	800547c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540c:	f7ff f872 	bl	80044f4 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	6a3a      	ldr	r2, [r7, #32]
 8005418:	429a      	cmp	r2, r3
 800541a:	d302      	bcc.n	8005422 <UART_WaitOnFlagUntilTimeout+0x30>
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e03a      	b.n	800549c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d023      	beq.n	800547c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b80      	cmp	r3, #128	; 0x80
 8005438:	d020      	beq.n	800547c <UART_WaitOnFlagUntilTimeout+0x8a>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b40      	cmp	r3, #64	; 0x40
 800543e:	d01d      	beq.n	800547c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b08      	cmp	r3, #8
 800544c:	d116      	bne.n	800547c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 f81d 	bl	80054a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2208      	movs	r2, #8
 800546e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e00f      	b.n	800549c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4013      	ands	r3, r2
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	429a      	cmp	r2, r3
 800548a:	bf0c      	ite	eq
 800548c:	2301      	moveq	r3, #1
 800548e:	2300      	movne	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	461a      	mov	r2, r3
 8005494:	79fb      	ldrb	r3, [r7, #7]
 8005496:	429a      	cmp	r2, r3
 8005498:	d0b4      	beq.n	8005404 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b095      	sub	sp, #84	; 0x54
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	330c      	adds	r3, #12
 80054b2:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b6:	e853 3f00 	ldrex	r3, [r3]
 80054ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	330c      	adds	r3, #12
 80054ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054cc:	643a      	str	r2, [r7, #64]	; 0x40
 80054ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e5      	bne.n	80054ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3314      	adds	r3, #20
 80054e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	e853 3f00 	ldrex	r3, [r3]
 80054ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	f023 0301 	bic.w	r3, r3, #1
 80054f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3314      	adds	r3, #20
 80054fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005500:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e5      	bne.n	80054e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005518:	2b01      	cmp	r3, #1
 800551a:	d119      	bne.n	8005550 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	e853 3f00 	ldrex	r3, [r3]
 800552a:	60bb      	str	r3, [r7, #8]
   return(result);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f023 0310 	bic.w	r3, r3, #16
 8005532:	647b      	str	r3, [r7, #68]	; 0x44
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	330c      	adds	r3, #12
 800553a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800553c:	61ba      	str	r2, [r7, #24]
 800553e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	6979      	ldr	r1, [r7, #20]
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	613b      	str	r3, [r7, #16]
   return(result);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e5      	bne.n	800551c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800555e:	bf00      	nop
 8005560:	3754      	adds	r7, #84	; 0x54
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80055a2:	f023 030c 	bic.w	r3, r3, #12
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	430b      	orrs	r3, r1
 80055ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a2c      	ldr	r2, [pc, #176]	; (800567c <UART_SetConfig+0x114>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d103      	bne.n	80055d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055d0:	f7ff fe02 	bl	80051d8 <HAL_RCC_GetPCLK2Freq>
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	e002      	b.n	80055de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055d8:	f7ff fdea 	bl	80051b0 <HAL_RCC_GetPCLK1Freq>
 80055dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4613      	mov	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	009a      	lsls	r2, r3, #2
 80055e8:	441a      	add	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f4:	4a22      	ldr	r2, [pc, #136]	; (8005680 <UART_SetConfig+0x118>)
 80055f6:	fba2 2303 	umull	r2, r3, r2, r3
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	0119      	lsls	r1, r3, #4
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	009a      	lsls	r2, r3, #2
 8005608:	441a      	add	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	fbb2 f2f3 	udiv	r2, r2, r3
 8005614:	4b1a      	ldr	r3, [pc, #104]	; (8005680 <UART_SetConfig+0x118>)
 8005616:	fba3 0302 	umull	r0, r3, r3, r2
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	2064      	movs	r0, #100	; 0x64
 800561e:	fb00 f303 	mul.w	r3, r0, r3
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	3332      	adds	r3, #50	; 0x32
 8005628:	4a15      	ldr	r2, [pc, #84]	; (8005680 <UART_SetConfig+0x118>)
 800562a:	fba2 2303 	umull	r2, r3, r2, r3
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005634:	4419      	add	r1, r3
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009a      	lsls	r2, r3, #2
 8005640:	441a      	add	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	fbb2 f2f3 	udiv	r2, r2, r3
 800564c:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <UART_SetConfig+0x118>)
 800564e:	fba3 0302 	umull	r0, r3, r3, r2
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	2064      	movs	r0, #100	; 0x64
 8005656:	fb00 f303 	mul.w	r3, r0, r3
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	3332      	adds	r3, #50	; 0x32
 8005660:	4a07      	ldr	r2, [pc, #28]	; (8005680 <UART_SetConfig+0x118>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	f003 020f 	and.w	r2, r3, #15
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	440a      	add	r2, r1
 8005672:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40013800 	.word	0x40013800
 8005680:	51eb851f 	.word	0x51eb851f

08005684 <__libc_init_array>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	2600      	movs	r6, #0
 8005688:	4d0c      	ldr	r5, [pc, #48]	; (80056bc <__libc_init_array+0x38>)
 800568a:	4c0d      	ldr	r4, [pc, #52]	; (80056c0 <__libc_init_array+0x3c>)
 800568c:	1b64      	subs	r4, r4, r5
 800568e:	10a4      	asrs	r4, r4, #2
 8005690:	42a6      	cmp	r6, r4
 8005692:	d109      	bne.n	80056a8 <__libc_init_array+0x24>
 8005694:	f000 f822 	bl	80056dc <_init>
 8005698:	2600      	movs	r6, #0
 800569a:	4d0a      	ldr	r5, [pc, #40]	; (80056c4 <__libc_init_array+0x40>)
 800569c:	4c0a      	ldr	r4, [pc, #40]	; (80056c8 <__libc_init_array+0x44>)
 800569e:	1b64      	subs	r4, r4, r5
 80056a0:	10a4      	asrs	r4, r4, #2
 80056a2:	42a6      	cmp	r6, r4
 80056a4:	d105      	bne.n	80056b2 <__libc_init_array+0x2e>
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
 80056a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ac:	4798      	blx	r3
 80056ae:	3601      	adds	r6, #1
 80056b0:	e7ee      	b.n	8005690 <__libc_init_array+0xc>
 80056b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b6:	4798      	blx	r3
 80056b8:	3601      	adds	r6, #1
 80056ba:	e7f2      	b.n	80056a2 <__libc_init_array+0x1e>
 80056bc:	08005730 	.word	0x08005730
 80056c0:	08005730 	.word	0x08005730
 80056c4:	08005730 	.word	0x08005730
 80056c8:	08005734 	.word	0x08005734

080056cc <memset>:
 80056cc:	4603      	mov	r3, r0
 80056ce:	4402      	add	r2, r0
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d100      	bne.n	80056d6 <memset+0xa>
 80056d4:	4770      	bx	lr
 80056d6:	f803 1b01 	strb.w	r1, [r3], #1
 80056da:	e7f9      	b.n	80056d0 <memset+0x4>

080056dc <_init>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	bf00      	nop
 80056e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e2:	bc08      	pop	{r3}
 80056e4:	469e      	mov	lr, r3
 80056e6:	4770      	bx	lr

080056e8 <_fini>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr
