
UserApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c90  0800410c  0800410c  0000410c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004d9c  08004d9c  00004d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dc0  08004dc0  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004dc0  08004dc0  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004dc0  08004dc0  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dc0  08004dc0  00004dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dc4  08004dc4  00004dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004dc8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08004dd4  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08004dd4  0001002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000270d  00000000  00000000  00010035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c27  00000000  00000000  00012742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000370  00000000  00000000  00013370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002f8  00000000  00000000  000136e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001571d  00000000  00000000  000139d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003b87  00000000  00000000  000290f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b871  00000000  00000000  0002cc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a84ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bbc  00000000  00000000  000a8540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800410c <__do_global_dtors_aux>:
 800410c:	b510      	push	{r4, lr}
 800410e:	4c05      	ldr	r4, [pc, #20]	; (8004124 <__do_global_dtors_aux+0x18>)
 8004110:	7823      	ldrb	r3, [r4, #0]
 8004112:	b933      	cbnz	r3, 8004122 <__do_global_dtors_aux+0x16>
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <__do_global_dtors_aux+0x1c>)
 8004116:	b113      	cbz	r3, 800411e <__do_global_dtors_aux+0x12>
 8004118:	4804      	ldr	r0, [pc, #16]	; (800412c <__do_global_dtors_aux+0x20>)
 800411a:	f3af 8000 	nop.w
 800411e:	2301      	movs	r3, #1
 8004120:	7023      	strb	r3, [r4, #0]
 8004122:	bd10      	pop	{r4, pc}
 8004124:	2000000c 	.word	0x2000000c
 8004128:	00000000 	.word	0x00000000
 800412c:	08004d84 	.word	0x08004d84

08004130 <frame_dummy>:
 8004130:	b508      	push	{r3, lr}
 8004132:	4b03      	ldr	r3, [pc, #12]	; (8004140 <frame_dummy+0x10>)
 8004134:	b11b      	cbz	r3, 800413e <frame_dummy+0xe>
 8004136:	4903      	ldr	r1, [pc, #12]	; (8004144 <frame_dummy+0x14>)
 8004138:	4803      	ldr	r0, [pc, #12]	; (8004148 <frame_dummy+0x18>)
 800413a:	f3af 8000 	nop.w
 800413e:	bd08      	pop	{r3, pc}
 8004140:	00000000 	.word	0x00000000
 8004144:	20000010 	.word	0x20000010
 8004148:	08004d84 	.word	0x08004d84

0800414c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004150:	f000 f8ca 	bl	80042e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004154:	f000 f801 	bl	800415a <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004158:	e7fe      	b.n	8004158 <main+0xc>

0800415a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b090      	sub	sp, #64	; 0x40
 800415e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004160:	f107 0318 	add.w	r3, r7, #24
 8004164:	2228      	movs	r2, #40	; 0x28
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fe03 	bl	8004d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800416e:	1d3b      	adds	r3, r7, #4
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	605a      	str	r2, [r3, #4]
 8004176:	609a      	str	r2, [r3, #8]
 8004178:	60da      	str	r2, [r3, #12]
 800417a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800417c:	2302      	movs	r3, #2
 800417e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004180:	2301      	movs	r3, #1
 8004182:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004184:	2310      	movs	r3, #16
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004188:	2300      	movs	r3, #0
 800418a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800418c:	f107 0318 	add.w	r3, r7, #24
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f9ef 	bl	8004574 <HAL_RCC_OscConfig>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800419c:	f000 f818 	bl	80041d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041a0:	230f      	movs	r3, #15
 80041a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041ac:	2300      	movs	r3, #0
 80041ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80041b4:	1d3b      	adds	r3, r7, #4
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fc5b 	bl	8004a74 <HAL_RCC_ClockConfig>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80041c4:	f000 f804 	bl	80041d0 <Error_Handler>
  }
}
 80041c8:	bf00      	nop
 80041ca:	3740      	adds	r7, #64	; 0x40
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041d4:	b672      	cpsid	i
}
 80041d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041d8:	e7fe      	b.n	80041d8 <Error_Handler+0x8>
	...

080041dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80041e2:	4b15      	ldr	r3, [pc, #84]	; (8004238 <HAL_MspInit+0x5c>)
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	4a14      	ldr	r2, [pc, #80]	; (8004238 <HAL_MspInit+0x5c>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	6193      	str	r3, [r2, #24]
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_MspInit+0x5c>)
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041fa:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <HAL_MspInit+0x5c>)
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	4a0e      	ldr	r2, [pc, #56]	; (8004238 <HAL_MspInit+0x5c>)
 8004200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004204:	61d3      	str	r3, [r2, #28]
 8004206:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <HAL_MspInit+0x5c>)
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420e:	607b      	str	r3, [r7, #4]
 8004210:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <HAL_MspInit+0x60>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	4a04      	ldr	r2, [pc, #16]	; (800423c <HAL_MspInit+0x60>)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	40021000 	.word	0x40021000
 800423c:	40010000 	.word	0x40010000

08004240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004244:	e7fe      	b.n	8004244 <NMI_Handler+0x4>

08004246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004246:	b480      	push	{r7}
 8004248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800424a:	e7fe      	b.n	800424a <HardFault_Handler+0x4>

0800424c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004250:	e7fe      	b.n	8004250 <MemManage_Handler+0x4>

08004252 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004252:	b480      	push	{r7}
 8004254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004256:	e7fe      	b.n	8004256 <BusFault_Handler+0x4>

08004258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800425c:	e7fe      	b.n	800425c <UsageFault_Handler+0x4>

0800425e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800425e:	b480      	push	{r7}
 8004260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr

0800426a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800426a:	b480      	push	{r7}
 800426c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800426e:	bf00      	nop
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr

08004276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004276:	b480      	push	{r7}
 8004278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr

08004282 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004286:	f000 f875 	bl	8004374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}

0800428e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800428e:	b480      	push	{r7}
 8004290:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004292:	bf00      	nop
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
	...

0800429c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800429c:	f7ff fff7 	bl	800428e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042a0:	480b      	ldr	r0, [pc, #44]	; (80042d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80042a2:	490c      	ldr	r1, [pc, #48]	; (80042d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80042a4:	4a0c      	ldr	r2, [pc, #48]	; (80042d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80042a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042a8:	e002      	b.n	80042b0 <LoopCopyDataInit>

080042aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042ae:	3304      	adds	r3, #4

080042b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042b4:	d3f9      	bcc.n	80042aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042b6:	4a09      	ldr	r2, [pc, #36]	; (80042dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80042b8:	4c09      	ldr	r4, [pc, #36]	; (80042e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042bc:	e001      	b.n	80042c2 <LoopFillZerobss>

080042be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042c0:	3204      	adds	r2, #4

080042c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042c4:	d3fb      	bcc.n	80042be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042c6:	f000 fd31 	bl	8004d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042ca:	f7ff ff3f 	bl	800414c <main>
  bx lr
 80042ce:	4770      	bx	lr
  ldr r0, =_sdata
 80042d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80042d8:	08004dc8 	.word	0x08004dc8
  ldr r2, =_sbss
 80042dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80042e0:	2000002c 	.word	0x2000002c

080042e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042e4:	e7fe      	b.n	80042e4 <ADC1_2_IRQHandler>
	...

080042e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042ec:	4b08      	ldr	r3, [pc, #32]	; (8004310 <HAL_Init+0x28>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a07      	ldr	r2, [pc, #28]	; (8004310 <HAL_Init+0x28>)
 80042f2:	f043 0310 	orr.w	r3, r3, #16
 80042f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042f8:	2003      	movs	r0, #3
 80042fa:	f000 f907 	bl	800450c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042fe:	200f      	movs	r0, #15
 8004300:	f000 f808 	bl	8004314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004304:	f7ff ff6a 	bl	80041dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40022000 	.word	0x40022000

08004314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800431c:	4b12      	ldr	r3, [pc, #72]	; (8004368 <HAL_InitTick+0x54>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b12      	ldr	r3, [pc, #72]	; (800436c <HAL_InitTick+0x58>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	4619      	mov	r1, r3
 8004326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800432a:	fbb3 f3f1 	udiv	r3, r3, r1
 800432e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f911 	bl	800455a <HAL_SYSTICK_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e00e      	b.n	8004360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b0f      	cmp	r3, #15
 8004346:	d80a      	bhi.n	800435e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004348:	2200      	movs	r2, #0
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	f04f 30ff 	mov.w	r0, #4294967295
 8004350:	f000 f8e7 	bl	8004522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004354:	4a06      	ldr	r2, [pc, #24]	; (8004370 <HAL_InitTick+0x5c>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	e000      	b.n	8004360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	20000000 	.word	0x20000000
 800436c:	20000008 	.word	0x20000008
 8004370:	20000004 	.word	0x20000004

08004374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_IncTick+0x1c>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	4b05      	ldr	r3, [pc, #20]	; (8004394 <HAL_IncTick+0x20>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4413      	add	r3, r2
 8004384:	4a03      	ldr	r2, [pc, #12]	; (8004394 <HAL_IncTick+0x20>)
 8004386:	6013      	str	r3, [r2, #0]
}
 8004388:	bf00      	nop
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr
 8004390:	20000008 	.word	0x20000008
 8004394:	20000028 	.word	0x20000028

08004398 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  return uwTick;
 800439c:	4b02      	ldr	r3, [pc, #8]	; (80043a8 <HAL_GetTick+0x10>)
 800439e:	681b      	ldr	r3, [r3, #0]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	20000028 	.word	0x20000028

080043ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <__NVIC_SetPriorityGrouping+0x44>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043c8:	4013      	ands	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043de:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <__NVIC_SetPriorityGrouping+0x44>)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	60d3      	str	r3, [r2, #12]
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <__NVIC_GetPriorityGrouping+0x18>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	0a1b      	lsrs	r3, r3, #8
 80043fe:	f003 0307 	and.w	r3, r3, #7
}
 8004402:	4618      	mov	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	6039      	str	r1, [r7, #0]
 800441a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800441c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004420:	2b00      	cmp	r3, #0
 8004422:	db0a      	blt.n	800443a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	b2da      	uxtb	r2, r3
 8004428:	490c      	ldr	r1, [pc, #48]	; (800445c <__NVIC_SetPriority+0x4c>)
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	0112      	lsls	r2, r2, #4
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	440b      	add	r3, r1
 8004434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004438:	e00a      	b.n	8004450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	b2da      	uxtb	r2, r3
 800443e:	4908      	ldr	r1, [pc, #32]	; (8004460 <__NVIC_SetPriority+0x50>)
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	3b04      	subs	r3, #4
 8004448:	0112      	lsls	r2, r2, #4
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	440b      	add	r3, r1
 800444e:	761a      	strb	r2, [r3, #24]
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	e000e100 	.word	0xe000e100
 8004460:	e000ed00 	.word	0xe000ed00

08004464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	; 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f1c3 0307 	rsb	r3, r3, #7
 800447e:	2b04      	cmp	r3, #4
 8004480:	bf28      	it	cs
 8004482:	2304      	movcs	r3, #4
 8004484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3304      	adds	r3, #4
 800448a:	2b06      	cmp	r3, #6
 800448c:	d902      	bls.n	8004494 <NVIC_EncodePriority+0x30>
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3b03      	subs	r3, #3
 8004492:	e000      	b.n	8004496 <NVIC_EncodePriority+0x32>
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004498:	f04f 32ff 	mov.w	r2, #4294967295
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43da      	mvns	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	401a      	ands	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044ac:	f04f 31ff 	mov.w	r1, #4294967295
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	fa01 f303 	lsl.w	r3, r1, r3
 80044b6:	43d9      	mvns	r1, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044bc:	4313      	orrs	r3, r2
         );
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3724      	adds	r7, #36	; 0x24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044d8:	d301      	bcc.n	80044de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044da:	2301      	movs	r3, #1
 80044dc:	e00f      	b.n	80044fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044de:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <SysTick_Config+0x40>)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044e6:	210f      	movs	r1, #15
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	f7ff ff90 	bl	8004410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <SysTick_Config+0x40>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044f6:	4b04      	ldr	r3, [pc, #16]	; (8004508 <SysTick_Config+0x40>)
 80044f8:	2207      	movs	r2, #7
 80044fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	e000e010 	.word	0xe000e010

0800450c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ff49 	bl	80043ac <__NVIC_SetPriorityGrouping>
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004522:	b580      	push	{r7, lr}
 8004524:	b086      	sub	sp, #24
 8004526:	af00      	add	r7, sp, #0
 8004528:	4603      	mov	r3, r0
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004534:	f7ff ff5e 	bl	80043f4 <__NVIC_GetPriorityGrouping>
 8004538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	6978      	ldr	r0, [r7, #20]
 8004540:	f7ff ff90 	bl	8004464 <NVIC_EncodePriority>
 8004544:	4602      	mov	r2, r0
 8004546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800454a:	4611      	mov	r1, r2
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff ff5f 	bl	8004410 <__NVIC_SetPriority>
}
 8004552:	bf00      	nop
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff ffb0 	bl	80044c8 <SysTick_Config>
 8004568:	4603      	mov	r3, r0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e26c      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 8087 	beq.w	80046a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004594:	4b92      	ldr	r3, [pc, #584]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 030c 	and.w	r3, r3, #12
 800459c:	2b04      	cmp	r3, #4
 800459e:	d00c      	beq.n	80045ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045a0:	4b8f      	ldr	r3, [pc, #572]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 030c 	and.w	r3, r3, #12
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d112      	bne.n	80045d2 <HAL_RCC_OscConfig+0x5e>
 80045ac:	4b8c      	ldr	r3, [pc, #560]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b8:	d10b      	bne.n	80045d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ba:	4b89      	ldr	r3, [pc, #548]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d06c      	beq.n	80046a0 <HAL_RCC_OscConfig+0x12c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d168      	bne.n	80046a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e246      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045da:	d106      	bne.n	80045ea <HAL_RCC_OscConfig+0x76>
 80045dc:	4b80      	ldr	r3, [pc, #512]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a7f      	ldr	r2, [pc, #508]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80045e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	e02e      	b.n	8004648 <HAL_RCC_OscConfig+0xd4>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0x98>
 80045f2:	4b7b      	ldr	r3, [pc, #492]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a7a      	ldr	r2, [pc, #488]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80045f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4b78      	ldr	r3, [pc, #480]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a77      	ldr	r2, [pc, #476]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e01d      	b.n	8004648 <HAL_RCC_OscConfig+0xd4>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0xbc>
 8004616:	4b72      	ldr	r3, [pc, #456]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a71      	ldr	r2, [pc, #452]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 800461c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	4b6f      	ldr	r3, [pc, #444]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a6e      	ldr	r2, [pc, #440]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	e00b      	b.n	8004648 <HAL_RCC_OscConfig+0xd4>
 8004630:	4b6b      	ldr	r3, [pc, #428]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a6a      	ldr	r2, [pc, #424]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b68      	ldr	r3, [pc, #416]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a67      	ldr	r2, [pc, #412]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004646:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d013      	beq.n	8004678 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004650:	f7ff fea2 	bl	8004398 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004658:	f7ff fe9e 	bl	8004398 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e1fa      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	4b5d      	ldr	r3, [pc, #372]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0xe4>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7ff fe8e 	bl	8004398 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004680:	f7ff fe8a 	bl	8004398 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	; 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e1e6      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004692:	4b53      	ldr	r3, [pc, #332]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x10c>
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d063      	beq.n	8004776 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ae:	4b4c      	ldr	r3, [pc, #304]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046ba:	4b49      	ldr	r3, [pc, #292]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d11c      	bne.n	8004700 <HAL_RCC_OscConfig+0x18c>
 80046c6:	4b46      	ldr	r3, [pc, #280]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d116      	bne.n	8004700 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d2:	4b43      	ldr	r3, [pc, #268]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <HAL_RCC_OscConfig+0x176>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d001      	beq.n	80046ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e1ba      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ea:	4b3d      	ldr	r3, [pc, #244]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	4939      	ldr	r1, [pc, #228]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fe:	e03a      	b.n	8004776 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d020      	beq.n	800474a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004708:	4b36      	ldr	r3, [pc, #216]	; (80047e4 <HAL_RCC_OscConfig+0x270>)
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470e:	f7ff fe43 	bl	8004398 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004716:	f7ff fe3f 	bl	8004398 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e19b      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004728:	4b2d      	ldr	r3, [pc, #180]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004734:	4b2a      	ldr	r3, [pc, #168]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4927      	ldr	r1, [pc, #156]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004744:	4313      	orrs	r3, r2
 8004746:	600b      	str	r3, [r1, #0]
 8004748:	e015      	b.n	8004776 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800474a:	4b26      	ldr	r3, [pc, #152]	; (80047e4 <HAL_RCC_OscConfig+0x270>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7ff fe22 	bl	8004398 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004758:	f7ff fe1e 	bl	8004398 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e17a      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476a:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d03a      	beq.n	80047f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d019      	beq.n	80047be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800478a:	4b17      	ldr	r3, [pc, #92]	; (80047e8 <HAL_RCC_OscConfig+0x274>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004790:	f7ff fe02 	bl	8004398 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004798:	f7ff fdfe 	bl	8004398 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e15a      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047aa:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047b6:	2001      	movs	r0, #1
 80047b8:	f000 fa9a 	bl	8004cf0 <RCC_Delay>
 80047bc:	e01c      	b.n	80047f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047be:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <HAL_RCC_OscConfig+0x274>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c4:	f7ff fde8 	bl	8004398 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ca:	e00f      	b.n	80047ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047cc:	f7ff fde4 	bl	8004398 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d908      	bls.n	80047ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e140      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
 80047de:	bf00      	nop
 80047e0:	40021000 	.word	0x40021000
 80047e4:	42420000 	.word	0x42420000
 80047e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ec:	4b9e      	ldr	r3, [pc, #632]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e9      	bne.n	80047cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80a6 	beq.w	8004952 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004806:	2300      	movs	r3, #0
 8004808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480a:	4b97      	ldr	r3, [pc, #604]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10d      	bne.n	8004832 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004816:	4b94      	ldr	r3, [pc, #592]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	4a93      	ldr	r2, [pc, #588]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800481c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004820:	61d3      	str	r3, [r2, #28]
 8004822:	4b91      	ldr	r3, [pc, #580]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482a:	60bb      	str	r3, [r7, #8]
 800482c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800482e:	2301      	movs	r3, #1
 8004830:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004832:	4b8e      	ldr	r3, [pc, #568]	; (8004a6c <HAL_RCC_OscConfig+0x4f8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d118      	bne.n	8004870 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800483e:	4b8b      	ldr	r3, [pc, #556]	; (8004a6c <HAL_RCC_OscConfig+0x4f8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a8a      	ldr	r2, [pc, #552]	; (8004a6c <HAL_RCC_OscConfig+0x4f8>)
 8004844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800484a:	f7ff fda5 	bl	8004398 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004852:	f7ff fda1 	bl	8004398 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b64      	cmp	r3, #100	; 0x64
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e0fd      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004864:	4b81      	ldr	r3, [pc, #516]	; (8004a6c <HAL_RCC_OscConfig+0x4f8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d106      	bne.n	8004886 <HAL_RCC_OscConfig+0x312>
 8004878:	4b7b      	ldr	r3, [pc, #492]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	4a7a      	ldr	r2, [pc, #488]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	6213      	str	r3, [r2, #32]
 8004884:	e02d      	b.n	80048e2 <HAL_RCC_OscConfig+0x36e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10c      	bne.n	80048a8 <HAL_RCC_OscConfig+0x334>
 800488e:	4b76      	ldr	r3, [pc, #472]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	4a75      	ldr	r2, [pc, #468]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	6213      	str	r3, [r2, #32]
 800489a:	4b73      	ldr	r3, [pc, #460]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	4a72      	ldr	r2, [pc, #456]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048a0:	f023 0304 	bic.w	r3, r3, #4
 80048a4:	6213      	str	r3, [r2, #32]
 80048a6:	e01c      	b.n	80048e2 <HAL_RCC_OscConfig+0x36e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b05      	cmp	r3, #5
 80048ae:	d10c      	bne.n	80048ca <HAL_RCC_OscConfig+0x356>
 80048b0:	4b6d      	ldr	r3, [pc, #436]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	4a6c      	ldr	r2, [pc, #432]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048b6:	f043 0304 	orr.w	r3, r3, #4
 80048ba:	6213      	str	r3, [r2, #32]
 80048bc:	4b6a      	ldr	r3, [pc, #424]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	4a69      	ldr	r2, [pc, #420]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	6213      	str	r3, [r2, #32]
 80048c8:	e00b      	b.n	80048e2 <HAL_RCC_OscConfig+0x36e>
 80048ca:	4b67      	ldr	r3, [pc, #412]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	4a66      	ldr	r2, [pc, #408]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	6213      	str	r3, [r2, #32]
 80048d6:	4b64      	ldr	r3, [pc, #400]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	4a63      	ldr	r2, [pc, #396]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048dc:	f023 0304 	bic.w	r3, r3, #4
 80048e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d015      	beq.n	8004916 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ea:	f7ff fd55 	bl	8004398 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f0:	e00a      	b.n	8004908 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f2:	f7ff fd51 	bl	8004398 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004900:	4293      	cmp	r3, r2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e0ab      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004908:	4b57      	ldr	r3, [pc, #348]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0ee      	beq.n	80048f2 <HAL_RCC_OscConfig+0x37e>
 8004914:	e014      	b.n	8004940 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004916:	f7ff fd3f 	bl	8004398 <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800491c:	e00a      	b.n	8004934 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491e:	f7ff fd3b 	bl	8004398 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	f241 3288 	movw	r2, #5000	; 0x1388
 800492c:	4293      	cmp	r3, r2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e095      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004934:	4b4c      	ldr	r3, [pc, #304]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ee      	bne.n	800491e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d105      	bne.n	8004952 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004946:	4b48      	ldr	r3, [pc, #288]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	4a47      	ldr	r2, [pc, #284]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800494c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004950:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 8081 	beq.w	8004a5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800495c:	4b42      	ldr	r3, [pc, #264]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 030c 	and.w	r3, r3, #12
 8004964:	2b08      	cmp	r3, #8
 8004966:	d061      	beq.n	8004a2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d146      	bne.n	80049fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004970:	4b3f      	ldr	r3, [pc, #252]	; (8004a70 <HAL_RCC_OscConfig+0x4fc>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004976:	f7ff fd0f 	bl	8004398 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497e:	f7ff fd0b 	bl	8004398 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e067      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004990:	4b35      	ldr	r3, [pc, #212]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f0      	bne.n	800497e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a4:	d108      	bne.n	80049b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049a6:	4b30      	ldr	r3, [pc, #192]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	492d      	ldr	r1, [pc, #180]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049b8:	4b2b      	ldr	r3, [pc, #172]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a19      	ldr	r1, [r3, #32]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	430b      	orrs	r3, r1
 80049ca:	4927      	ldr	r1, [pc, #156]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049d0:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <HAL_RCC_OscConfig+0x4fc>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d6:	f7ff fcdf 	bl	8004398 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049de:	f7ff fcdb 	bl	8004398 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e037      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049f0:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCC_OscConfig+0x46a>
 80049fc:	e02f      	b.n	8004a5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fe:	4b1c      	ldr	r3, [pc, #112]	; (8004a70 <HAL_RCC_OscConfig+0x4fc>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a04:	f7ff fcc8 	bl	8004398 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7ff fcc4 	bl	8004398 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e020      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a1e:	4b12      	ldr	r3, [pc, #72]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x498>
 8004a2a:	e018      	b.n	8004a5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e013      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a38:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d106      	bne.n	8004a5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d001      	beq.n	8004a5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40007000 	.word	0x40007000
 8004a70:	42420060 	.word	0x42420060

08004a74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0d0      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a88:	4b6a      	ldr	r3, [pc, #424]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d910      	bls.n	8004ab8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a96:	4b67      	ldr	r3, [pc, #412]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f023 0207 	bic.w	r2, r3, #7
 8004a9e:	4965      	ldr	r1, [pc, #404]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	4b63      	ldr	r3, [pc, #396]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e0b8      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d020      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d005      	beq.n	8004adc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ad0:	4b59      	ldr	r3, [pc, #356]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	4a58      	ldr	r2, [pc, #352]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ada:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ae8:	4b53      	ldr	r3, [pc, #332]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	4a52      	ldr	r2, [pc, #328]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004aee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004af2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af4:	4b50      	ldr	r3, [pc, #320]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	494d      	ldr	r1, [pc, #308]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d040      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d107      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1a:	4b47      	ldr	r3, [pc, #284]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d115      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e07f      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d107      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b32:	4b41      	ldr	r3, [pc, #260]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e073      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b42:	4b3d      	ldr	r3, [pc, #244]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e06b      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b52:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f023 0203 	bic.w	r2, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4936      	ldr	r1, [pc, #216]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b64:	f7ff fc18 	bl	8004398 <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b6c:	f7ff fc14 	bl	8004398 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e053      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b82:	4b2d      	ldr	r3, [pc, #180]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f003 020c 	and.w	r2, r3, #12
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d1eb      	bne.n	8004b6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b94:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d210      	bcs.n	8004bc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b24      	ldr	r3, [pc, #144]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 0207 	bic.w	r2, r3, #7
 8004baa:	4922      	ldr	r1, [pc, #136]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb2:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e032      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd0:	4b19      	ldr	r3, [pc, #100]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4916      	ldr	r1, [pc, #88]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bee:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	490e      	ldr	r1, [pc, #56]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c02:	f000 f821 	bl	8004c48 <HAL_RCC_GetSysClockFreq>
 8004c06:	4602      	mov	r2, r0
 8004c08:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	091b      	lsrs	r3, r3, #4
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	490a      	ldr	r1, [pc, #40]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004c14:	5ccb      	ldrb	r3, [r1, r3]
 8004c16:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1a:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <HAL_RCC_ClockConfig+0x1cc>)
 8004c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <HAL_RCC_ClockConfig+0x1d0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff fb76 	bl	8004314 <HAL_InitTick>

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40022000 	.word	0x40022000
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	08004d9c 	.word	0x08004d9c
 8004c40:	20000000 	.word	0x20000000
 8004c44:	20000004 	.word	0x20000004

08004c48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	2300      	movs	r3, #0
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c62:	4b1e      	ldr	r3, [pc, #120]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x94>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d002      	beq.n	8004c78 <HAL_RCC_GetSysClockFreq+0x30>
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d003      	beq.n	8004c7e <HAL_RCC_GetSysClockFreq+0x36>
 8004c76:	e027      	b.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c78:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c7a:	613b      	str	r3, [r7, #16]
      break;
 8004c7c:	e027      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	0c9b      	lsrs	r3, r3, #18
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c88:	5cd3      	ldrb	r3, [r2, r3]
 8004c8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d010      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c96:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x94>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	0c5b      	lsrs	r3, r3, #17
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	4a11      	ldr	r2, [pc, #68]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ca2:	5cd3      	ldrb	r3, [r2, r3]
 8004ca4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a0d      	ldr	r2, [pc, #52]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004caa:	fb02 f203 	mul.w	r2, r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	e004      	b.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a0c      	ldr	r2, [pc, #48]	; (8004cec <HAL_RCC_GetSysClockFreq+0xa4>)
 8004cbc:	fb02 f303 	mul.w	r3, r2, r3
 8004cc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	613b      	str	r3, [r7, #16]
      break;
 8004cc6:	e002      	b.n	8004cce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cca:	613b      	str	r3, [r7, #16]
      break;
 8004ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cce:	693b      	ldr	r3, [r7, #16]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	007a1200 	.word	0x007a1200
 8004ce4:	08004dac 	.word	0x08004dac
 8004ce8:	08004dbc 	.word	0x08004dbc
 8004cec:	003d0900 	.word	0x003d0900

08004cf0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <RCC_Delay+0x34>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a0a      	ldr	r2, [pc, #40]	; (8004d28 <RCC_Delay+0x38>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	0a5b      	lsrs	r3, r3, #9
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	fb02 f303 	mul.w	r3, r2, r3
 8004d0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d0c:	bf00      	nop
  }
  while (Delay --);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1e5a      	subs	r2, r3, #1
 8004d12:	60fa      	str	r2, [r7, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1f9      	bne.n	8004d0c <RCC_Delay+0x1c>
}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr
 8004d24:	20000000 	.word	0x20000000
 8004d28:	10624dd3 	.word	0x10624dd3

08004d2c <__libc_init_array>:
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	2600      	movs	r6, #0
 8004d30:	4d0c      	ldr	r5, [pc, #48]	; (8004d64 <__libc_init_array+0x38>)
 8004d32:	4c0d      	ldr	r4, [pc, #52]	; (8004d68 <__libc_init_array+0x3c>)
 8004d34:	1b64      	subs	r4, r4, r5
 8004d36:	10a4      	asrs	r4, r4, #2
 8004d38:	42a6      	cmp	r6, r4
 8004d3a:	d109      	bne.n	8004d50 <__libc_init_array+0x24>
 8004d3c:	f000 f822 	bl	8004d84 <_init>
 8004d40:	2600      	movs	r6, #0
 8004d42:	4d0a      	ldr	r5, [pc, #40]	; (8004d6c <__libc_init_array+0x40>)
 8004d44:	4c0a      	ldr	r4, [pc, #40]	; (8004d70 <__libc_init_array+0x44>)
 8004d46:	1b64      	subs	r4, r4, r5
 8004d48:	10a4      	asrs	r4, r4, #2
 8004d4a:	42a6      	cmp	r6, r4
 8004d4c:	d105      	bne.n	8004d5a <__libc_init_array+0x2e>
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}
 8004d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d54:	4798      	blx	r3
 8004d56:	3601      	adds	r6, #1
 8004d58:	e7ee      	b.n	8004d38 <__libc_init_array+0xc>
 8004d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d5e:	4798      	blx	r3
 8004d60:	3601      	adds	r6, #1
 8004d62:	e7f2      	b.n	8004d4a <__libc_init_array+0x1e>
 8004d64:	08004dc0 	.word	0x08004dc0
 8004d68:	08004dc0 	.word	0x08004dc0
 8004d6c:	08004dc0 	.word	0x08004dc0
 8004d70:	08004dc4 	.word	0x08004dc4

08004d74 <memset>:
 8004d74:	4603      	mov	r3, r0
 8004d76:	4402      	add	r2, r0
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d100      	bne.n	8004d7e <memset+0xa>
 8004d7c:	4770      	bx	lr
 8004d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d82:	e7f9      	b.n	8004d78 <memset+0x4>

08004d84 <_init>:
 8004d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d86:	bf00      	nop
 8004d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8a:	bc08      	pop	{r3}
 8004d8c:	469e      	mov	lr, r3
 8004d8e:	4770      	bx	lr

08004d90 <_fini>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	bf00      	nop
 8004d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d96:	bc08      	pop	{r3}
 8004d98:	469e      	mov	lr, r3
 8004d9a:	4770      	bx	lr
