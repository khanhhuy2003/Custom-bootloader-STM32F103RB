/*
******************************************************************************
** @file        : LinkerScript.ld
**
** @brief       : Linker script for STM32F103RB with Bootloader & User Application
**
** Target      : STMicroelectronics STM32F103RB (128KB Flash, 20KB RAM)
**
******************************************************************************
*/

/* Entry Point */
ENTRY(Reset_Handler)

/* Highest address of the user mode stack */
_estack = ORIGIN(RAM) + LENGTH(RAM); /* Stack starts at top of RAM */

_Min_Heap_Size = 0x200 ; /* Required heap size */
_Min_Stack_Size = 0x400 ; /* Required stack size */

/* Define memory regions */
MEMORY
{
  RAM          (xrw)  : ORIGIN = 0x20000000,  LENGTH = 20K  /* RAM */
  FLASH_BOOT   (rx)   : ORIGIN = 0x08000000,  LENGTH = 16K  /* Bootloader (16KB) */
  FLASH_APP    (rx)   : ORIGIN = 0x08004000,  LENGTH = 112K /* User App (112KB) */
}

/* Sections */
SECTIONS
{
  /* Bootloader Vector Table */
  .isr_vector :
  {
    . = ALIGN(4);
    KEEP(*(.isr_vector))  /* Keep vector table in bootloader */
    . = ALIGN(4);
  } >FLASH_BOOT

  /* Bootloader Code */
  .text.bootloader :
  {
    . = ALIGN(4);
    *(.text.bootloader)   /* Bootloader code */
    *(.rodata.bootloader) /* Bootloader read-only data */
    . = ALIGN(4);
  } >FLASH_BOOT

  /* User Application Vector Table (Placed at 0x08004000) */
  .isr_vector_user :
  {
    . = 0x08004000;
    KEEP(*(.isr_vector))
  } >FLASH_APP

  /* User Application Code */
  .text.user_application :
  {
    . = ALIGN(4);
    *(.text)           /* User Application Code */
    *(.rodata)         /* Read-Only Data */
    . = ALIGN(4);
  } >FLASH_APP

  /* Initialized Data Section (RAM) */
  _sidata = LOADADDR(.data);
  .data :
  {
    . = ALIGN(4);
    _sdata = .;
    *(.data)
    *(.data*)
    . = ALIGN(4);
    _edata = .;
  } >RAM AT> FLASH_APP

  /* Uninitialized Data Section (RAM) */
  .bss :
  {
    _sbss = .;
    *(.bss)
    *(.bss*)
    *(COMMON)
    . = ALIGN(4);
    _ebss = .;
  } >RAM

  /* Heap and Stack */
  ._user_heap_stack :
  {
    . = ALIGN(8);
    PROVIDE ( end = . );
    PROVIDE ( _end = . );
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(8);
  } >RAM
}
